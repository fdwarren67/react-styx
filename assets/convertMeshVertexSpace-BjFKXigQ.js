import{B as s,s as m,R as p}from"./index-5Uv45sI4.js";import{p as n}from"./MeshVertexAttributes-DHzMURey.js";import{B as l}from"./vertexSpaceConversion-DEtDr1dE.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BkXVqBJw.js";import"./computeTranslationToOriginAndRotation-Bbvn0XWt.js";import"./projectPointToVector-BYRPP7er.js";import"./meshVertexSpaceUtils-D_km3sEg.js";import"./MeshLocalVertexSpace-DgK43vZA.js";import"./vec3-iAinBP56.js";import"./BufferView-CbSE4D9I.js";import"./vec4-xkXYFXVM.js";async function E(t,o,r){await Promise.resolve(),s(r);const e=l(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
