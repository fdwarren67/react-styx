import {
  getReactWrapperOptions,
  makeReactWrapperFactory
} from "./chunk-MALSDV7D.js";
import {
  require_react
} from "./chunk-HUL2CLQT.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@esri/calcite-components-react/dist/components.js
var import_react = __toESM(require_react());

// node_modules/@lit/react/development/create-component.js
var NODE_MODE = false;
var DEV_MODE = true;
var reservedReactProperties = /* @__PURE__ */ new Set([
  "children",
  "localName",
  "ref",
  "style",
  "className"
]);
var listenedEvents = /* @__PURE__ */ new WeakMap();
var addOrUpdateEventListener = (node, event, listener) => {
  let events = listenedEvents.get(node);
  if (events === void 0) {
    listenedEvents.set(node, events = /* @__PURE__ */ new Map());
  }
  let handler = events.get(event);
  if (listener !== void 0) {
    if (handler === void 0) {
      events.set(event, handler = { handleEvent: listener });
      node.addEventListener(event, handler);
    } else {
      handler.handleEvent = listener;
    }
  } else if (handler !== void 0) {
    events.delete(event);
    node.removeEventListener(event, handler);
  }
};
var setProperty = (node, name, value, old, events) => {
  const event = events == null ? void 0 : events[name];
  if (event !== void 0) {
    if (value !== old) {
      addOrUpdateEventListener(node, event, value);
    }
    return;
  }
  node[name] = value;
  if ((value === void 0 || value === null) && name in HTMLElement.prototype) {
    node.removeAttribute(name);
  }
};
var createComponent = ({ react: React2, tagName, elementClass, events, displayName }) => {
  const eventProps = new Set(Object.keys(events ?? {}));
  if (DEV_MODE && !NODE_MODE) {
    for (const p of reservedReactProperties) {
      if (p in elementClass.prototype && !(p in HTMLElement.prototype)) {
        console.warn(`${tagName} contains property ${p} which is a React reserved property. It will be used by React and not set on the element.`);
      }
    }
  }
  const ReactComponent = React2.forwardRef((props, ref) => {
    const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());
    const elementRef = React2.useRef(null);
    const reactProps = {};
    const elementProps = {};
    for (const [k, v] of Object.entries(props)) {
      if (reservedReactProperties.has(k)) {
        reactProps[k === "className" ? "class" : k] = v;
        continue;
      }
      if (eventProps.has(k) || k in elementClass.prototype) {
        elementProps[k] = v;
        continue;
      }
      reactProps[k] = v;
    }
    if (!NODE_MODE) {
      React2.useLayoutEffect(() => {
        if (elementRef.current === null) {
          return;
        }
        const newElemProps = /* @__PURE__ */ new Map();
        for (const key in elementProps) {
          setProperty(elementRef.current, key, props[key], prevElemPropsRef.current.get(key), events);
          prevElemPropsRef.current.delete(key);
          newElemProps.set(key, props[key]);
        }
        for (const [key, value] of prevElemPropsRef.current) {
          setProperty(elementRef.current, key, void 0, value, events);
        }
        prevElemPropsRef.current = newElemProps;
      });
      React2.useLayoutEffect(() => {
        var _a;
        (_a = elementRef.current) == null ? void 0 : _a.removeAttribute("defer-hydration");
      }, []);
    }
    if (NODE_MODE) {
      if ((React2.createElement.name === "litPatchedCreateElement" || globalThis.litSsrReactEnabled) && Object.keys(elementProps).length) {
        reactProps["_$litProps$"] = elementProps;
      }
    } else {
      reactProps["suppressHydrationWarning"] = true;
    }
    return React2.createElement(tagName, {
      ...reactProps,
      ref: React2.useCallback((node) => {
        elementRef.current = node;
        if (typeof ref === "function") {
          ref(node);
        } else if (ref !== null) {
          ref.current = node;
        }
      }, [ref])
    });
  });
  ReactComponent.displayName = displayName ?? elementClass.name;
  return ReactComponent;
};

// node_modules/@esri/calcite-components-react/dist/components.js
var createWrapper = makeReactWrapperFactory(import_react.default, createComponent);
var CalciteAccordion = createWrapper(getReactWrapperOptions("calcite-accordion", {}));
var CalciteAccordionItem = createWrapper(getReactWrapperOptions("calcite-accordion-item", {}));
var CalciteAction = createWrapper(getReactWrapperOptions("calcite-action", {}));
var CalciteActionBar = createWrapper(getReactWrapperOptions("calcite-action-bar", {
  onCalciteActionBarToggle: "calciteActionBarToggle"
}));
var CalciteActionGroup = createWrapper(getReactWrapperOptions("calcite-action-group", {}));
var CalciteActionMenu = createWrapper(getReactWrapperOptions("calcite-action-menu", {
  onCalciteActionMenuOpen: "calciteActionMenuOpen"
}));
var CalciteActionPad = createWrapper(getReactWrapperOptions("calcite-action-pad", {
  onCalciteActionPadToggle: "calciteActionPadToggle"
}));
var CalciteAlert = createWrapper(getReactWrapperOptions("calcite-alert", {
  onCalciteAlertBeforeClose: "calciteAlertBeforeClose",
  onCalciteAlertBeforeOpen: "calciteAlertBeforeOpen",
  onCalciteAlertClose: "calciteAlertClose",
  onCalciteAlertOpen: "calciteAlertOpen"
}));
var CalciteAutocomplete = createWrapper(getReactWrapperOptions("calcite-autocomplete", {
  onCalciteAutocompleteBeforeClose: "calciteAutocompleteBeforeClose",
  onCalciteAutocompleteBeforeOpen: "calciteAutocompleteBeforeOpen",
  onCalciteAutocompleteChange: "calciteAutocompleteChange",
  onCalciteAutocompleteClose: "calciteAutocompleteClose",
  onCalciteAutocompleteOpen: "calciteAutocompleteOpen",
  onCalciteAutocompleteTextChange: "calciteAutocompleteTextChange",
  onCalciteAutocompleteTextInput: "calciteAutocompleteTextInput"
}));
var CalciteAutocompleteItem = createWrapper(getReactWrapperOptions("calcite-autocomplete-item", {}));
var CalciteAutocompleteItemGroup = createWrapper(getReactWrapperOptions("calcite-autocomplete-item-group", {}));
var CalciteAvatar = createWrapper(getReactWrapperOptions("calcite-avatar", {}));
var CalciteBlock = createWrapper(getReactWrapperOptions("calcite-block", {
  onCalciteBlockBeforeClose: "calciteBlockBeforeClose",
  onCalciteBlockBeforeOpen: "calciteBlockBeforeOpen",
  onCalciteBlockClose: "calciteBlockClose",
  onCalciteBlockOpen: "calciteBlockOpen",
  onCalciteBlockSortHandleBeforeClose: "calciteBlockSortHandleBeforeClose",
  onCalciteBlockSortHandleBeforeOpen: "calciteBlockSortHandleBeforeOpen",
  onCalciteBlockSortHandleClose: "calciteBlockSortHandleClose",
  onCalciteBlockSortHandleOpen: "calciteBlockSortHandleOpen",
  onCalciteBlockToggle: "calciteBlockToggle"
}));
var CalciteBlockGroup = createWrapper(getReactWrapperOptions("calcite-block-group", {
  onCalciteBlockGroupDragEnd: "calciteBlockGroupDragEnd",
  onCalciteBlockGroupDragStart: "calciteBlockGroupDragStart",
  onCalciteBlockGroupOrderChange: "calciteBlockGroupOrderChange"
}));
var CalciteBlockSection = createWrapper(getReactWrapperOptions("calcite-block-section", {
  onCalciteBlockSectionToggle: "calciteBlockSectionToggle"
}));
var CalciteButton = createWrapper(getReactWrapperOptions("calcite-button", {}));
var CalciteCard = createWrapper(getReactWrapperOptions("calcite-card", {
  onCalciteCardSelect: "calciteCardSelect"
}));
var CalciteCardGroup = createWrapper(getReactWrapperOptions("calcite-card-group", {
  onCalciteCardGroupSelect: "calciteCardGroupSelect"
}));
var CalciteCarousel = createWrapper(getReactWrapperOptions("calcite-carousel", {
  onCalciteCarouselChange: "calciteCarouselChange",
  onCalciteCarouselPause: "calciteCarouselPause",
  onCalciteCarouselPlay: "calciteCarouselPlay",
  onCalciteCarouselResume: "calciteCarouselResume",
  onCalciteCarouselStop: "calciteCarouselStop"
}));
var CalciteCarouselItem = createWrapper(getReactWrapperOptions("calcite-carousel-item", {}));
var CalciteCheckbox = createWrapper(getReactWrapperOptions("calcite-checkbox", {
  onCalciteCheckboxChange: "calciteCheckboxChange"
}));
var CalciteChip = createWrapper(getReactWrapperOptions("calcite-chip", {
  onCalciteChipClose: "calciteChipClose",
  onCalciteChipSelect: "calciteChipSelect"
}));
var CalciteChipGroup = createWrapper(getReactWrapperOptions("calcite-chip-group", {
  onCalciteChipGroupSelect: "calciteChipGroupSelect"
}));
var CalciteColorPicker = createWrapper(getReactWrapperOptions("calcite-color-picker", {
  onCalciteColorPickerChange: "calciteColorPickerChange",
  onCalciteColorPickerInput: "calciteColorPickerInput"
}));
var CalciteColorPickerHexInput = createWrapper(getReactWrapperOptions("calcite-color-picker-hex-input", {
  onCalciteColorPickerHexInputChange: "calciteColorPickerHexInputChange"
}));
var CalciteColorPickerSwatch = createWrapper(getReactWrapperOptions("calcite-color-picker-swatch", {}));
var CalciteCombobox = createWrapper(getReactWrapperOptions("calcite-combobox", {
  onCalciteComboboxBeforeClose: "calciteComboboxBeforeClose",
  onCalciteComboboxBeforeOpen: "calciteComboboxBeforeOpen",
  onCalciteComboboxChange: "calciteComboboxChange",
  onCalciteComboboxChipClose: "calciteComboboxChipClose",
  onCalciteComboboxClose: "calciteComboboxClose",
  onCalciteComboboxFilterChange: "calciteComboboxFilterChange",
  onCalciteComboboxOpen: "calciteComboboxOpen"
}));
var CalciteComboboxItem = createWrapper(getReactWrapperOptions("calcite-combobox-item", {
  onCalciteComboboxItemChange: "calciteComboboxItemChange"
}));
var CalciteComboboxItemGroup = createWrapper(getReactWrapperOptions("calcite-combobox-item-group", {}));
var CalciteDatePicker = createWrapper(getReactWrapperOptions("calcite-date-picker", {
  onCalciteDatePickerChange: "calciteDatePickerChange",
  onCalciteDatePickerRangeChange: "calciteDatePickerRangeChange"
}));
var CalciteDatePickerDay = createWrapper(getReactWrapperOptions("calcite-date-picker-day", {}));
var CalciteDatePickerMonth = createWrapper(getReactWrapperOptions("calcite-date-picker-month", {}));
var CalciteDatePickerMonthHeader = createWrapper(getReactWrapperOptions("calcite-date-picker-month-header", {}));
var CalciteDialog = createWrapper(getReactWrapperOptions("calcite-dialog", {
  onCalciteDialogBeforeClose: "calciteDialogBeforeClose",
  onCalciteDialogBeforeOpen: "calciteDialogBeforeOpen",
  onCalciteDialogClose: "calciteDialogClose",
  onCalciteDialogOpen: "calciteDialogOpen",
  onCalciteDialogScroll: "calciteDialogScroll"
}));
var CalciteDropdown = createWrapper(getReactWrapperOptions("calcite-dropdown", {
  onCalciteDropdownBeforeClose: "calciteDropdownBeforeClose",
  onCalciteDropdownBeforeOpen: "calciteDropdownBeforeOpen",
  onCalciteDropdownClose: "calciteDropdownClose",
  onCalciteDropdownOpen: "calciteDropdownOpen",
  onCalciteDropdownSelect: "calciteDropdownSelect"
}));
var CalciteDropdownGroup = createWrapper(getReactWrapperOptions("calcite-dropdown-group", {}));
var CalciteDropdownItem = createWrapper(getReactWrapperOptions("calcite-dropdown-item", {
  onCalciteDropdownItemSelect: "calciteDropdownItemSelect"
}));
var CalciteFab = createWrapper(getReactWrapperOptions("calcite-fab", {}));
var CalciteFilter = createWrapper(getReactWrapperOptions("calcite-filter", {
  onCalciteFilterChange: "calciteFilterChange"
}));
var CalciteFlow = createWrapper(getReactWrapperOptions("calcite-flow", {}));
var CalciteFlowItem = createWrapper(getReactWrapperOptions("calcite-flow-item", {
  onCalciteFlowItemBack: "calciteFlowItemBack",
  onCalciteFlowItemClose: "calciteFlowItemClose",
  onCalciteFlowItemScroll: "calciteFlowItemScroll",
  onCalciteFlowItemToggle: "calciteFlowItemToggle"
}));
var CalciteGraph = createWrapper(getReactWrapperOptions("calcite-graph", {}));
var CalciteHandle = createWrapper(getReactWrapperOptions("calcite-handle", {
  onCalciteHandleChange: "calciteHandleChange",
  onCalciteHandleNudge: "calciteHandleNudge"
}));
var CalciteIcon = createWrapper(getReactWrapperOptions("calcite-icon", {}));
var CalciteInlineEditable = createWrapper(getReactWrapperOptions("calcite-inline-editable", {
  onCalciteInlineEditableEditCancel: "calciteInlineEditableEditCancel",
  onCalciteInlineEditableEditConfirm: "calciteInlineEditableEditConfirm"
}));
var CalciteInput = createWrapper(getReactWrapperOptions("calcite-input", {
  onCalciteInputChange: "calciteInputChange",
  onCalciteInputInput: "calciteInputInput"
}));
var CalciteInputDatePicker = createWrapper(getReactWrapperOptions("calcite-input-date-picker", {
  onCalciteInputDatePickerBeforeClose: "calciteInputDatePickerBeforeClose",
  onCalciteInputDatePickerBeforeOpen: "calciteInputDatePickerBeforeOpen",
  onCalciteInputDatePickerChange: "calciteInputDatePickerChange",
  onCalciteInputDatePickerClose: "calciteInputDatePickerClose",
  onCalciteInputDatePickerOpen: "calciteInputDatePickerOpen"
}));
var CalciteInputMessage = createWrapper(getReactWrapperOptions("calcite-input-message", {}));
var CalciteInputNumber = createWrapper(getReactWrapperOptions("calcite-input-number", {
  onCalciteInputNumberChange: "calciteInputNumberChange",
  onCalciteInputNumberInput: "calciteInputNumberInput"
}));
var CalciteInputText = createWrapper(getReactWrapperOptions("calcite-input-text", {
  onCalciteInputTextChange: "calciteInputTextChange",
  onCalciteInputTextInput: "calciteInputTextInput"
}));
var CalciteInputTimePicker = createWrapper(getReactWrapperOptions("calcite-input-time-picker", {
  onCalciteInputTimePickerBeforeClose: "calciteInputTimePickerBeforeClose",
  onCalciteInputTimePickerBeforeOpen: "calciteInputTimePickerBeforeOpen",
  onCalciteInputTimePickerChange: "calciteInputTimePickerChange",
  onCalciteInputTimePickerClose: "calciteInputTimePickerClose",
  onCalciteInputTimePickerOpen: "calciteInputTimePickerOpen"
}));
var CalciteInputTimeZone = createWrapper(getReactWrapperOptions("calcite-input-time-zone", {
  onCalciteInputTimeZoneBeforeClose: "calciteInputTimeZoneBeforeClose",
  onCalciteInputTimeZoneBeforeOpen: "calciteInputTimeZoneBeforeOpen",
  onCalciteInputTimeZoneChange: "calciteInputTimeZoneChange",
  onCalciteInputTimeZoneClose: "calciteInputTimeZoneClose",
  onCalciteInputTimeZoneOpen: "calciteInputTimeZoneOpen"
}));
var CalciteLabel = createWrapper(getReactWrapperOptions("calcite-label", {}));
var CalciteLink = createWrapper(getReactWrapperOptions("calcite-link", {}));
var CalciteList = createWrapper(getReactWrapperOptions("calcite-list", {
  onCalciteListChange: "calciteListChange",
  onCalciteListDragEnd: "calciteListDragEnd",
  onCalciteListDragStart: "calciteListDragStart",
  onCalciteListFilter: "calciteListFilter",
  onCalciteListOrderChange: "calciteListOrderChange"
}));
var CalciteListItem = createWrapper(getReactWrapperOptions("calcite-list-item", {
  onCalciteListItemClose: "calciteListItemClose",
  onCalciteListItemSelect: "calciteListItemSelect",
  onCalciteListItemSortHandleBeforeClose: "calciteListItemSortHandleBeforeClose",
  onCalciteListItemSortHandleBeforeOpen: "calciteListItemSortHandleBeforeOpen",
  onCalciteListItemSortHandleClose: "calciteListItemSortHandleClose",
  onCalciteListItemSortHandleOpen: "calciteListItemSortHandleOpen",
  onCalciteListItemToggle: "calciteListItemToggle"
}));
var CalciteListItemGroup = createWrapper(getReactWrapperOptions("calcite-list-item-group", {}));
var CalciteLoader = createWrapper(getReactWrapperOptions("calcite-loader", {}));
var CalciteMenu = createWrapper(getReactWrapperOptions("calcite-menu", {}));
var CalciteMenuItem = createWrapper(getReactWrapperOptions("calcite-menu-item", {
  onCalciteMenuItemSelect: "calciteMenuItemSelect"
}));
var CalciteMeter = createWrapper(getReactWrapperOptions("calcite-meter", {}));
var CalciteModal = createWrapper(getReactWrapperOptions("calcite-modal", {
  onCalciteModalBeforeClose: "calciteModalBeforeClose",
  onCalciteModalBeforeOpen: "calciteModalBeforeOpen",
  onCalciteModalClose: "calciteModalClose",
  onCalciteModalOpen: "calciteModalOpen"
}));
var CalciteNavigation = createWrapper(getReactWrapperOptions("calcite-navigation", {
  onCalciteNavigationActionSelect: "calciteNavigationActionSelect"
}));
var CalciteNavigationLogo = createWrapper(getReactWrapperOptions("calcite-navigation-logo", {}));
var CalciteNavigationUser = createWrapper(getReactWrapperOptions("calcite-navigation-user", {}));
var CalciteNotice = createWrapper(getReactWrapperOptions("calcite-notice", {
  onCalciteNoticeBeforeClose: "calciteNoticeBeforeClose",
  onCalciteNoticeBeforeOpen: "calciteNoticeBeforeOpen",
  onCalciteNoticeClose: "calciteNoticeClose",
  onCalciteNoticeOpen: "calciteNoticeOpen"
}));
var CalciteOption = createWrapper(getReactWrapperOptions("calcite-option", {}));
var CalciteOptionGroup = createWrapper(getReactWrapperOptions("calcite-option-group", {}));
var CalcitePagination = createWrapper(getReactWrapperOptions("calcite-pagination", {
  onCalcitePaginationChange: "calcitePaginationChange"
}));
var CalcitePanel = createWrapper(getReactWrapperOptions("calcite-panel", {
  onCalcitePanelClose: "calcitePanelClose",
  onCalcitePanelScroll: "calcitePanelScroll",
  onCalcitePanelToggle: "calcitePanelToggle"
}));
var CalcitePopover = createWrapper(getReactWrapperOptions("calcite-popover", {
  onCalcitePopoverBeforeClose: "calcitePopoverBeforeClose",
  onCalcitePopoverBeforeOpen: "calcitePopoverBeforeOpen",
  onCalcitePopoverClose: "calcitePopoverClose",
  onCalcitePopoverOpen: "calcitePopoverOpen"
}));
var CalciteProgress = createWrapper(getReactWrapperOptions("calcite-progress", {}));
var CalciteRadioButton = createWrapper(getReactWrapperOptions("calcite-radio-button", {
  onCalciteRadioButtonChange: "calciteRadioButtonChange"
}));
var CalciteRadioButtonGroup = createWrapper(getReactWrapperOptions("calcite-radio-button-group", {
  onCalciteRadioButtonGroupChange: "calciteRadioButtonGroupChange"
}));
var CalciteRating = createWrapper(getReactWrapperOptions("calcite-rating", {
  onCalciteRatingChange: "calciteRatingChange"
}));
var CalciteScrim = createWrapper(getReactWrapperOptions("calcite-scrim", {}));
var CalciteSegmentedControl = createWrapper(getReactWrapperOptions("calcite-segmented-control", {
  onCalciteSegmentedControlChange: "calciteSegmentedControlChange"
}));
var CalciteSegmentedControlItem = createWrapper(getReactWrapperOptions("calcite-segmented-control-item", {}));
var CalciteSelect = createWrapper(getReactWrapperOptions("calcite-select", {
  onCalciteSelectChange: "calciteSelectChange"
}));
var CalciteSheet = createWrapper(getReactWrapperOptions("calcite-sheet", {
  onCalciteSheetBeforeClose: "calciteSheetBeforeClose",
  onCalciteSheetBeforeOpen: "calciteSheetBeforeOpen",
  onCalciteSheetClose: "calciteSheetClose",
  onCalciteSheetOpen: "calciteSheetOpen"
}));
var CalciteShell = createWrapper(getReactWrapperOptions("calcite-shell", {}));
var CalciteShellCenterRow = createWrapper(getReactWrapperOptions("calcite-shell-center-row", {}));
var CalciteShellPanel = createWrapper(getReactWrapperOptions("calcite-shell-panel", {}));
var CalciteSlider = createWrapper(getReactWrapperOptions("calcite-slider", {
  onCalciteSliderChange: "calciteSliderChange",
  onCalciteSliderInput: "calciteSliderInput"
}));
var CalciteSortHandle = createWrapper(getReactWrapperOptions("calcite-sort-handle", {
  onCalciteSortHandleBeforeClose: "calciteSortHandleBeforeClose",
  onCalciteSortHandleBeforeOpen: "calciteSortHandleBeforeOpen",
  onCalciteSortHandleClose: "calciteSortHandleClose",
  onCalciteSortHandleMove: "calciteSortHandleMove",
  onCalciteSortHandleOpen: "calciteSortHandleOpen",
  onCalciteSortHandleReorder: "calciteSortHandleReorder"
}));
var CalciteSortableList = createWrapper(getReactWrapperOptions("calcite-sortable-list", {
  onCalciteListOrderChange: "calciteListOrderChange"
}));
var CalciteSplitButton = createWrapper(getReactWrapperOptions("calcite-split-button", {
  onCalciteSplitButtonPrimaryClick: "calciteSplitButtonPrimaryClick",
  onCalciteSplitButtonSecondaryClick: "calciteSplitButtonSecondaryClick"
}));
var CalciteStack = createWrapper(getReactWrapperOptions("calcite-stack", {}));
var CalciteStepper = createWrapper(getReactWrapperOptions("calcite-stepper", {
  onCalciteStepperChange: "calciteStepperChange",
  onCalciteStepperItemChange: "calciteStepperItemChange"
}));
var CalciteStepperItem = createWrapper(getReactWrapperOptions("calcite-stepper-item", {
  onCalciteStepperItemSelect: "calciteStepperItemSelect"
}));
var CalciteSwitch = createWrapper(getReactWrapperOptions("calcite-switch", {
  onCalciteSwitchChange: "calciteSwitchChange"
}));
var CalciteTab = createWrapper(getReactWrapperOptions("calcite-tab", {}));
var CalciteTabNav = createWrapper(getReactWrapperOptions("calcite-tab-nav", {
  onCalciteTabChange: "calciteTabChange"
}));
var CalciteTabTitle = createWrapper(getReactWrapperOptions("calcite-tab-title", {
  onCalciteTabsActivate: "calciteTabsActivate",
  onCalciteTabsClose: "calciteTabsClose"
}));
var CalciteTable = createWrapper(getReactWrapperOptions("calcite-table", {
  onCalciteTablePageChange: "calciteTablePageChange",
  onCalciteTableSelect: "calciteTableSelect"
}));
var CalciteTableCell = createWrapper(getReactWrapperOptions("calcite-table-cell", {}));
var CalciteTableHeader = createWrapper(getReactWrapperOptions("calcite-table-header", {}));
var CalciteTableRow = createWrapper(getReactWrapperOptions("calcite-table-row", {
  onCalciteTableRowSelect: "calciteTableRowSelect"
}));
var CalciteTabs = createWrapper(getReactWrapperOptions("calcite-tabs", {}));
var CalciteTextArea = createWrapper(getReactWrapperOptions("calcite-text-area", {
  onCalciteTextAreaChange: "calciteTextAreaChange",
  onCalciteTextAreaInput: "calciteTextAreaInput"
}));
var CalciteTile = createWrapper(getReactWrapperOptions("calcite-tile", {
  onCalciteTileSelect: "calciteTileSelect"
}));
var CalciteTileGroup = createWrapper(getReactWrapperOptions("calcite-tile-group", {
  onCalciteTileGroupSelect: "calciteTileGroupSelect"
}));
var CalciteTileSelect = createWrapper(getReactWrapperOptions("calcite-tile-select", {
  onCalciteTileSelectChange: "calciteTileSelectChange"
}));
var CalciteTileSelectGroup = createWrapper(getReactWrapperOptions("calcite-tile-select-group", {}));
var CalciteTimePicker = createWrapper(getReactWrapperOptions("calcite-time-picker", {
  onCalciteTimePickerChange: "calciteTimePickerChange"
}));
var CalciteTip = createWrapper(getReactWrapperOptions("calcite-tip", {
  onCalciteTipDismiss: "calciteTipDismiss"
}));
var CalciteTipGroup = createWrapper(getReactWrapperOptions("calcite-tip-group", {}));
var CalciteTipManager = createWrapper(getReactWrapperOptions("calcite-tip-manager", {
  onCalciteTipManagerClose: "calciteTipManagerClose"
}));
var CalciteTooltip = createWrapper(getReactWrapperOptions("calcite-tooltip", {
  onCalciteTooltipBeforeClose: "calciteTooltipBeforeClose",
  onCalciteTooltipBeforeOpen: "calciteTooltipBeforeOpen",
  onCalciteTooltipClose: "calciteTooltipClose",
  onCalciteTooltipOpen: "calciteTooltipOpen"
}));
var CalciteTree = createWrapper(getReactWrapperOptions("calcite-tree", {
  onCalciteTreeSelect: "calciteTreeSelect"
}));
var CalciteTreeItem = createWrapper(getReactWrapperOptions("calcite-tree-item", {}));
export {
  CalciteAccordion,
  CalciteAccordionItem,
  CalciteAction,
  CalciteActionBar,
  CalciteActionGroup,
  CalciteActionMenu,
  CalciteActionPad,
  CalciteAlert,
  CalciteAutocomplete,
  CalciteAutocompleteItem,
  CalciteAutocompleteItemGroup,
  CalciteAvatar,
  CalciteBlock,
  CalciteBlockGroup,
  CalciteBlockSection,
  CalciteButton,
  CalciteCard,
  CalciteCardGroup,
  CalciteCarousel,
  CalciteCarouselItem,
  CalciteCheckbox,
  CalciteChip,
  CalciteChipGroup,
  CalciteColorPicker,
  CalciteColorPickerHexInput,
  CalciteColorPickerSwatch,
  CalciteCombobox,
  CalciteComboboxItem,
  CalciteComboboxItemGroup,
  CalciteDatePicker,
  CalciteDatePickerDay,
  CalciteDatePickerMonth,
  CalciteDatePickerMonthHeader,
  CalciteDialog,
  CalciteDropdown,
  CalciteDropdownGroup,
  CalciteDropdownItem,
  CalciteFab,
  CalciteFilter,
  CalciteFlow,
  CalciteFlowItem,
  CalciteGraph,
  CalciteHandle,
  CalciteIcon,
  CalciteInlineEditable,
  CalciteInput,
  CalciteInputDatePicker,
  CalciteInputMessage,
  CalciteInputNumber,
  CalciteInputText,
  CalciteInputTimePicker,
  CalciteInputTimeZone,
  CalciteLabel,
  CalciteLink,
  CalciteList,
  CalciteListItem,
  CalciteListItemGroup,
  CalciteLoader,
  CalciteMenu,
  CalciteMenuItem,
  CalciteMeter,
  CalciteModal,
  CalciteNavigation,
  CalciteNavigationLogo,
  CalciteNavigationUser,
  CalciteNotice,
  CalciteOption,
  CalciteOptionGroup,
  CalcitePagination,
  CalcitePanel,
  CalcitePopover,
  CalciteProgress,
  CalciteRadioButton,
  CalciteRadioButtonGroup,
  CalciteRating,
  CalciteScrim,
  CalciteSegmentedControl,
  CalciteSegmentedControlItem,
  CalciteSelect,
  CalciteSheet,
  CalciteShell,
  CalciteShellCenterRow,
  CalciteShellPanel,
  CalciteSlider,
  CalciteSortHandle,
  CalciteSortableList,
  CalciteSplitButton,
  CalciteStack,
  CalciteStepper,
  CalciteStepperItem,
  CalciteSwitch,
  CalciteTab,
  CalciteTabNav,
  CalciteTabTitle,
  CalciteTable,
  CalciteTableCell,
  CalciteTableHeader,
  CalciteTableRow,
  CalciteTabs,
  CalciteTextArea,
  CalciteTile,
  CalciteTileGroup,
  CalciteTileSelect,
  CalciteTileSelectGroup,
  CalciteTimePicker,
  CalciteTip,
  CalciteTipGroup,
  CalciteTipManager,
  CalciteTooltip,
  CalciteTree,
  CalciteTreeItem
};
/*! Bundled license information:

@lit/react/development/create-component.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/react/development/index.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=@esri_calcite-components-react.js.map
