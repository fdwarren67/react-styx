import {
  y
} from "./chunk-DAFTSB3S.js";
import "./chunk-2UD6J77T.js";
import {
  Ye
} from "./chunk-HPA5LQSZ.js";
import "./chunk-3SU7BOQG.js";
import "./chunk-JED5CITL.js";
import "./chunk-TRBU6WLM.js";
import "./chunk-XBF3Q5CM.js";
import "./chunk-BSQH3I7W.js";
import "./chunk-PHUXOQ5V.js";
import "./chunk-7LZ547RY.js";
import "./chunk-3XDQGJHT.js";
import "./chunk-BMOULVP4.js";
import "./chunk-LVHCS2TZ.js";
import "./chunk-YSZGPB5I.js";
import "./chunk-5GYWQFHA.js";
import "./chunk-MR2DYNTG.js";
import "./chunk-65Z5LAMC.js";
import "./chunk-IFZYBBFM.js";
import "./chunk-WYOFTVUU.js";
import "./chunk-S4AV6MOI.js";
import "./chunk-QOBHQZYU.js";
import "./chunk-CKW4LZG2.js";
import "./chunk-VYOLHG4T.js";
import "./chunk-TKEIF3N7.js";
import "./chunk-RMOE6XHW.js";
import "./chunk-QAXPIBME.js";
import "./chunk-ISRSQJQR.js";
import "./chunk-WOB72RZU.js";
import "./chunk-HKTC3ZVY.js";
import "./chunk-MQ3WYGQ2.js";
import "./chunk-S4QLDBOB.js";
import "./chunk-RTA3XNM7.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-5ZCYRESW.js";
import "./chunk-XZDT5RTS.js";
import "./chunk-QAP2FVP7.js";
import {
  d
} from "./chunk-6EREU4EG.js";
import "./chunk-7DHQ2VMC.js";
import "./chunk-Z5UGTZ3C.js";
import "./chunk-ZXHHBJMH.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-4GBYHIKO.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-5T3XQRJL.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import "./chunk-NBXBK3QW.js";
import "./chunk-K5B7AETB.js";
import "./chunk-KLCKQJVO.js";
import "./chunk-5APVNM2E.js";
import "./chunk-73NNNHMH.js";
import "./chunk-C6YDI6QX.js";
import "./chunk-DJ5HVIE7.js";
import "./chunk-KPY4ZIC2.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-WO43UGNC.js";
import "./chunk-GPMU6IW4.js";
import {
  p
} from "./chunk-LTFI343D.js";
import "./chunk-FVMWI3UB.js";
import {
  b
} from "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-4GYBOMKF.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import {
  m as m2
} from "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import {
  g
} from "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import {
  o
} from "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import {
  f,
  h
} from "./chunk-BECTSF5P.js";
import {
  I
} from "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  a,
  k
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import {
  has
} from "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var c = class extends m2 {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = k(async (t2) => {
      await this.load();
      const { extent: e, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return e && (this.sourceJSON.extent = e), o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(t) {
    const e = null != t ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e = {}) {
    await this.load(e);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e);
    return d.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e);
  }
  async queryFeatureCount(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e);
  }
  async queryObjectIds(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e);
  }
  async queryExtent(t, e = {}) {
    await this.load(e);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e);
    return { count: o2.count, extent: w.fromJSON(o2.extent) };
  }
  async querySnapping(t, e = {}) {
    return await this.load(e), this._connection.invoke("querySnapping", t, e);
  }
  async queryAttributeBins(t, e = {}) {
    return await this.load(), this._connection.invoke("queryAttributeBins", t ? t.toJSON() : null, e);
  }
  async _startWorker(t) {
    this._connection = await p("CSVSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: t, registryTarget: this });
    const { url: e, delimiter: o2, fields: i, latitudeField: s2, longitudeField: n, spatialReference: a3, timeInfo: c2 } = this.loadOptions, u = await this._connection.invoke("load", { url: e, customParameters: this.customParameters, parsingOptions: { delimiter: o2, fields: i == null ? void 0 : i.map((t2) => t2.toJSON()), latitudeField: s2, longitudeField: n, spatialReference: a3 == null ? void 0 : a3.toJSON(), timeInfo: c2 == null ? void 0 : c2.toJSON() } }, { signal: t });
    this.locationInfo = u.locationInfo, this.sourceJSON = u.layerDefinition, this.delimiter = u.delimiter;
  }
};
r([m()], c.prototype, "type", void 0), r([m()], c.prototype, "loadOptions", void 0), r([m()], c.prototype, "customParameters", void 0), r([m()], c.prototype, "locationInfo", void 0), r([m()], c.prototype, "sourceJSON", void 0), r([m()], c.prototype, "delimiter", void 0), c = r([a2("esri.layers.graphics.sources.CSVSource")], c);

// node_modules/@arcgis/core/layers/CSVLayer.js
function h2(e, r2) {
  throw new s(r2, `CSVLayer (title: ${e.title}, id: ${e.id}) cannot be saved to a portal item`);
}
var m3 = class extends Ye {
  constructor(...e) {
    super(...e), this.geometryType = "point", this.capabilities = y(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.spatialReference = g.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e, t) {
    return "string" == typeof e ? { url: e, ...t } : e;
  }
  load(e) {
    const t = null != e ? e.signal : null, i = this.loadFromPortal({ supportedTypes: ["CSV"], supportsData: false }, e).catch(a).then(async () => this.initLayerProperties(await this.createGraphicsSource(t)));
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e, t) {
    var _a, _b;
    return null != t.showLabels ? t.showLabels : !!((_b = (_a = t.layerDefinition) == null ? void 0 : _a.drawingInfo) == null ? void 0 : _b.labelingInfo);
  }
  set url(e) {
    if (!e) return void this._set("url", e);
    const t = I(e);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e) {
    const t = new c({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField ?? void 0, longitudeField: this.longitudeField ?? void 0, spatialReference: this.spatialReference ?? void 0, timeInfo: this.timeInfo ?? void 0, url: this.url }, customParameters: this.customParameters ?? void 0 });
    return this._set("source", t), await t.load({ signal: e }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e, t) {
    return this.load().then(() => this.source.queryFeatures(b.from(e) || this.createQuery())).then((e2) => {
      if (e2 == null ? void 0 : e2.features) for (const t2 of e2.features) t2.layer = t2.sourceLayer = this;
      return e2;
    });
  }
  async queryObjectIds(e, t) {
    return await this.load(), this.source.queryObjectIds(b.from(e) || this.createQuery());
  }
  queryFeatureCount(e, t) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e) || this.createQuery()));
  }
  queryExtent(e, t) {
    return this.load().then(() => this.source.queryExtent(b.from(e) || this.createQuery()));
  }
  read(e, t) {
    super.read(e, t), t && "service" === t.origin && this.revert(["latitudeField", "longitudeField"], "service");
  }
  write(e, t) {
    return super.write(e, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e) {
    return h2(this, "csv-layer:save");
  }
  async saveAs(e, t) {
    return h2(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e, updates: t } = await this.source.refresh(this.customParameters);
      return null != t && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
r([m({ readOnly: true, json: { read: false, write: false } })], m3.prototype, "capabilities", void 0), r([m({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], m3.prototype, "delimiter", void 0), r([m({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], m3.prototype, "editingEnabled", void 0), r([m({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], m3.prototype, "fields", void 0), r([m({ type: Boolean, readOnly: true })], m3.prototype, "isTable", null), r([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], m3.prototype, "readWebMapLabelsVisible", null), r([m({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], m3.prototype, "latitudeField", void 0), r([m({ type: ["show", "hide"] })], m3.prototype, "listMode", void 0), r([m({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], m3.prototype, "locationType", void 0), r([m({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], m3.prototype, "longitudeField", void 0), r([m({ type: ["CSV"] })], m3.prototype, "operationalLayerType", void 0), r([m()], m3.prototype, "outFields", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], m3.prototype, "path", void 0), r([m({ json: { read: false }, cast: null, type: c, readOnly: true })], m3.prototype, "source", void 0), r([m({ json: { read: false }, value: "csv", readOnly: true })], m3.prototype, "type", void 0), r([m({ json: { read: f, write: { isRequired: true, ignoreOrigin: true, writer: h } } })], m3.prototype, "url", null), m3 = r([a2("esri.layers.CSVLayer")], m3);
var f2 = m3;
export {
  f2 as default
};
//# sourceMappingURL=CSVLayer-TSEGABH7.js.map
