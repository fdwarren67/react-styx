import {
  B
} from "./chunk-HN2VIPED.js";
import "./chunk-W25RAFXQ.js";
import "./chunk-VGMYHNBL.js";
import "./chunk-JGZQANAC.js";
import "./chunk-MRUZJ4BJ.js";
import {
  n
} from "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import "./chunk-KLBFJ6WQ.js";
import "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-QAWD6UDA.js";
import {
  s
} from "./chunk-3WB47P7Q.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-D7XVYH42.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import "./chunk-VTWDBFQT.js";
import "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import {
  has
} from "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var n2 = class {
  async createIndex(t, r) {
    var _a;
    const n3 = new Array();
    if (!((_a = t.vertexAttributes) == null ? void 0 : _a.position)) return new s();
    const o2 = a(t), s3 = null != r ? await r.invoke("createIndexThread", o2, { transferList: n3 }) : this.createIndexThread(o2).result;
    return i().fromJSON(s3);
  }
  createIndexThread(e) {
    const t = i();
    if (!e) return { result: t.toJSON() };
    const r = new Float64Array(e.position);
    return e.components ? s2(t, r, e.components.map((e2) => new Uint32Array(e2))) : o(t, r);
  }
};
function o(e, t) {
  const r = new Array(t.length / 9);
  let n3 = 0;
  for (let o2 = 0; o2 < t.length; o2 += 9) r[n3++] = c(t, o2, o2 + 3, o2 + 6);
  return e.load(r), { result: e.toJSON() };
}
function s2(e, t, r) {
  let n3 = 0;
  for (const a2 of r) n3 += a2.length / 3;
  const o2 = new Array(n3);
  let s3 = 0;
  for (const a2 of r) for (let e2 = 0; e2 < a2.length; e2 += 3) o2[s3++] = c(t, 3 * a2[e2], 3 * a2[e2 + 1], 3 * a2[e2 + 2]);
  return e.load(o2), { result: e.toJSON() };
}
function a(e) {
  var _a;
  const { vertexAttributes: { position: n3 }, vertexSpace: o2, spatialReference: s3, transform: a2 } = e, i2 = (_a = B({ vertexAttributes: { position: n3 }, vertexSpace: o2, spatialReference: s3, transform: a2 }, n.absolute, { allowBufferReuse: true })) == null ? void 0 : _a.position;
  return i2 ? !e.components || e.components.some((e2) => !e2.faces) ? { position: i2.buffer } : { position: i2.buffer, components: e.components.map((e2) => e2.faces) } : null;
}
function i() {
  return new s(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
}
function c(e, t, r, n3) {
  return { minX: Math.min(e[t], e[r], e[n3]), maxX: Math.max(e[t], e[r], e[n3]), minY: Math.min(e[t + 1], e[r + 1], e[n3 + 1]), maxY: Math.max(e[t + 1], e[r + 1], e[n3 + 1]), p0: [e[t], e[t + 1], e[t + 2]], p1: [e[r], e[r + 1], e[r + 2]], p2: [e[n3], e[n3 + 1], e[n3 + 2]] };
}
export {
  n2 as default
};
//# sourceMappingURL=ElevationSamplerWorker-XE5VS5HZ.js.map
