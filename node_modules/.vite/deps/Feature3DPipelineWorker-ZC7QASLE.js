import {
  k,
  s as s8,
  t as t5
} from "./chunk-JVICKXJO.js";
import {
  f as f2,
  h as h3,
  l as l2,
  m as m3
} from "./chunk-KMTBAOD5.js";
import {
  B
} from "./chunk-KBDYFPYD.js";
import {
  ae,
  u as u5
} from "./chunk-ONKUNBAA.js";
import {
  D,
  ct
} from "./chunk-4KZDR5QC.js";
import {
  c as c2,
  s as s9,
  u as u6
} from "./chunk-2NO2M4WL.js";
import "./chunk-AD3QCYSE.js";
import "./chunk-NJX7X3PO.js";
import "./chunk-R6B3KWCZ.js";
import "./chunk-3Y2XWHXG.js";
import {
  z
} from "./chunk-OJP6GZK7.js";
import {
  A,
  a2 as a5,
  o2 as o6
} from "./chunk-ARBGNZ5J.js";
import "./chunk-OBY6T2CW.js";
import "./chunk-SCA7QFZT.js";
import "./chunk-IDAFLWQ6.js";
import "./chunk-QDSJY67F.js";
import "./chunk-5NM52FSC.js";
import "./chunk-OV44J3A7.js";
import "./chunk-TLQ257RX.js";
import "./chunk-DKMSNAX7.js";
import {
  n as n7
} from "./chunk-IVUJZZWI.js";
import "./chunk-KLCCKTMY.js";
import "./chunk-O3RCWUGN.js";
import "./chunk-WRGRINPJ.js";
import {
  o as o5
} from "./chunk-R33GG7W2.js";
import "./chunk-BXGUHXQX.js";
import "./chunk-CS6KRDFU.js";
import "./chunk-GPG44W5H.js";
import "./chunk-VGAGCEX3.js";
import "./chunk-UA3V7B5J.js";
import "./chunk-5MBR7YI6.js";
import "./chunk-WA26GNQ4.js";
import "./chunk-P5AGQYYC.js";
import {
  e as e5
} from "./chunk-223G2GN7.js";
import "./chunk-AW5WQH2J.js";
import "./chunk-NTLDV7GO.js";
import "./chunk-656DVQ4F.js";
import "./chunk-6VADNTLC.js";
import "./chunk-NM5Y74WL.js";
import "./chunk-3MD5LAW4.js";
import "./chunk-U2P5JTEN.js";
import "./chunk-MSPEL4X6.js";
import "./chunk-35YSR2SI.js";
import "./chunk-DLHCJHCP.js";
import "./chunk-KBTHUZME.js";
import "./chunk-DWU33BWI.js";
import "./chunk-Y6THB4GE.js";
import "./chunk-W2OFQBYT.js";
import "./chunk-3LQTECQ4.js";
import "./chunk-LTEACZYT.js";
import "./chunk-IBHVRKIT.js";
import "./chunk-QIPDGN53.js";
import "./chunk-SNU6D4LT.js";
import "./chunk-N3R7UAKL.js";
import "./chunk-C2LO2UDO.js";
import "./chunk-276B3RLG.js";
import "./chunk-UGOVBDXX.js";
import "./chunk-QQGGEN5E.js";
import "./chunk-46GTJXDE.js";
import "./chunk-T5NYJWDC.js";
import "./chunk-QTPKIRO2.js";
import "./chunk-S2GEPA3W.js";
import "./chunk-3RHYA2CC.js";
import "./chunk-6WRMI32T.js";
import "./chunk-7FXRLNEH.js";
import "./chunk-CXHZI2CJ.js";
import "./chunk-RSBV5MGA.js";
import "./chunk-QEAQVAMR.js";
import {
  n as n5
} from "./chunk-OITDZHA4.js";
import "./chunk-ZGGC3KHK.js";
import "./chunk-UM5QMFZV.js";
import "./chunk-MD2QBQPV.js";
import "./chunk-CBFRSYD6.js";
import "./chunk-2CY5SLAC.js";
import "./chunk-LQHBJ3TA.js";
import "./chunk-MKVF6I7G.js";
import {
  n as n6
} from "./chunk-457CK7GN.js";
import "./chunk-EVDBYOW7.js";
import "./chunk-QQOUESXA.js";
import "./chunk-EQ5WRTBD.js";
import "./chunk-6QXEI4OT.js";
import "./chunk-55SEMSMA.js";
import "./chunk-BUZ7I3MJ.js";
import "./chunk-I7JIAECC.js";
import "./chunk-ZXD5CGBL.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-R2ZUOHHV.js";
import {
  t as t4
} from "./chunk-EXHR7CRN.js";
import "./chunk-HX6OAJGI.js";
import "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import {
  t as t2
} from "./chunk-BBNY45W4.js";
import "./chunk-BG4BZEWI.js";
import "./chunk-HE2KJFY5.js";
import "./chunk-MFRTZACF.js";
import {
  o as o4,
  t as t3
} from "./chunk-374VFTLO.js";
import "./chunk-OBVDE24U.js";
import {
  e as e3
} from "./chunk-HYT6FDCG.js";
import "./chunk-VGMYHNBL.js";
import "./chunk-MRUZJ4BJ.js";
import "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import {
  m as m2
} from "./chunk-KLBFJ6WQ.js";
import {
  e as e4
} from "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-QAWD6UDA.js";
import {
  d as d2
} from "./chunk-36CN7JP2.js";
import "./chunk-WX3BOMD3.js";
import {
  b as b4,
  h as h2
} from "./chunk-TSFKACKN.js";
import {
  a as a4
} from "./chunk-W5QWJI4E.js";
import {
  L
} from "./chunk-SEOVQLIZ.js";
import "./chunk-EUB5OBXG.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-2UD6J77T.js";
import "./chunk-YYDDGFL6.js";
import "./chunk-SNZZPKBU.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import {
  n as n2
} from "./chunk-3HA4XA2C.js";
import {
  e as e2
} from "./chunk-H2OC77GP.js";
import {
  a as a3,
  i as i2,
  n,
  s as s4
} from "./chunk-RDHJUEBL.js";
import {
  E,
  s as s7
} from "./chunk-3WB47P7Q.js";
import "./chunk-6ZI2HC5K.js";
import "./chunk-WESTCUBG.js";
import "./chunk-IZJWCIYF.js";
import "./chunk-BG4U4RTY.js";
import {
  u as u4
} from "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-2ZAGB4JV.js";
import "./chunk-B2CK3GCY.js";
import "./chunk-NINPG5JV.js";
import "./chunk-5BSH2ZN2.js";
import "./chunk-HQ2GCCLQ.js";
import "./chunk-PBHST2SF.js";
import {
  l
} from "./chunk-6WERKJTM.js";
import "./chunk-QNYMCEB7.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import {
  s as s3
} from "./chunk-YUQ6PSJ2.js";
import {
  r as r2
} from "./chunk-SB6LU3VH.js";
import "./chunk-5T3XQRJL.js";
import {
  Z
} from "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import "./chunk-HGWPGAUL.js";
import {
  N
} from "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import {
  b as b3
} from "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import {
  O,
  Q
} from "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import {
  o as o2
} from "./chunk-EGSJQZXU.js";
import "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-QW7P5D76.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import {
  f,
  h,
  n as n4,
  o as o3,
  s as s6
} from "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import {
  c as c3,
  t as t6
} from "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import {
  a2,
  b as b2,
  u as u2
} from "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import {
  n as n3,
  s as s5,
  u as u3
} from "./chunk-D3P3E2RE.js";
import {
  P,
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import {
  i
} from "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import {
  R,
  c,
  o,
  p
} from "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import {
  g as g2
} from "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  g,
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  b,
  e2 as e,
  s as s2,
  t,
  u3 as u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import {
  G,
  has
} from "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/Tile3DManager.js
var u7 = class extends g {
  constructor(t9) {
    super(t9), this._updatingCount = 0, this._tileHandles = new s3(), this._wanted = new s3();
  }
  destroy() {
    for (const t9 of this._tileHandles.values()) t9.abort();
    this._tileHandles.clear(), this._wanted.clear();
  }
  get updating() {
    return this._updatingCount > 0;
  }
  get _boundingRect() {
    const { extent: t9 } = this;
    return null == t9 ? null : o(t9);
  }
  get _missingTiles() {
    const t9 = new Array(), e9 = this._wanted;
    for (const i8 of this._tileHandles.values()) e9.has(i8.id) && !h4(i8) && t9.push(i8);
    return t9;
  }
  async onTileTreeChange(t9) {
    ++this._updatingCount;
    try {
      const { added: e9, removed: i8 } = t9, o9 = this._tileHandles, { _boundingRect: n11 } = this, s11 = null != n11 ? e9.filter((t10) => R(n11, t10.extent)) : e9, r6 = this._wanted, l5 = new Array();
      for (const t10 of i8) {
        const { id: i9 } = t10;
        r6.delete(i9);
        if (e9.some((e10) => m4(e10, t10) || m4(t10, e10))) continue;
        const n12 = o9.get(i9);
        null != n12 && l5.push(this._removeTile(n12));
      }
      for (const t10 of s11) r6.set(t10.id, t10), l5.push(this._addTile(t10));
      await Promise.allSettled(l5);
    } finally {
      --this._updatingCount;
    }
  }
  async _removeTile(t9) {
    this._tileHandles.delete(t9.id), t9.abort(), this._validate();
    const { tile: e9 } = t9, i8 = new g3(t9.untilSettled(), null != e9 ? this.createRemoveTileCommand(e9) : null);
    t9.nextEvent = null;
    const { command: o9 } = await i8.getCommand();
    o9 == null ? void 0 : o9.execute();
  }
  async _addTile(t9) {
    const { _tileHandles: e9 } = this, i8 = e9.get(t9.id);
    if (null != i8) return !h4(i8) || i8.tile.isComplete || (i8.tile = i8.tile.reset(), i8.nextEvent = this._onTileLoad(i8)), void await i8.untilSettled();
    const n11 = new p2(t9);
    this._tileHandles.set(n11.id, n11);
    const s11 = this.loadTile(t9, n11.signal);
    n11.nextEvent = s11;
    const r6 = await s11;
    if (n11.aborted) throw u();
    n11.tile = r6, f3(n11), n11.nextEvent = this._onTileLoad(n11), await n11.untilSettled();
  }
  async _onTileLoad(t9) {
    const { _wanted: e9, _tileHandles: i8, _missingTiles: o9 } = this, n11 = t9.descriptor, s11 = new Array(), r6 = new Array(), l5 = /* @__PURE__ */ new Set();
    for (const d4 of i8.values()) {
      if (d4 === t9) continue;
      const { descriptor: a14, id: c7 } = d4;
      if (e9.has(c7) || o9.some(({ descriptor: t10 }) => m4(t10, a14) || m4(a14, t10))) {
        if (h4(d4)) {
          if (m4(n11, a14)) {
            const t10 = d4.tile;
            for (const e10 of t10.objectIds()) l5.add(e10);
          }
          if (m4(a14, n11)) {
            const e10 = t9.tile, i9 = new Set(e10.objectIds()), o10 = d4.tile, n12 = o10.exclude(i9);
            d4.tile = n12;
            const l6 = AbortSignal.any([d4.signal, t9.signal]), a15 = d4.untilSettled();
            s11.push(new g3(a15, this.createRemoveTileCommand(o10))), s11.push(new g3(a15, this.createAddTileCommand(n12, l6), l6)), r6.push(d4), this._validateRemoval(n12, i9);
          }
        }
      } else {
        d4.abort(), i8.delete(c7);
        const { tile: t10 } = d4;
        null != t10 && s11.push(new g3(d4.untilSettled(), this.createRemoveTileCommand(t10))), d4.nextEvent = null;
      }
    }
    l5.size > 0 && (t9.tile = t9.tile.exclude(l5), this._validateRemoval(t9.tile, l5)), s11.push(new g3(t9.untilSettled(), this.createAddTileCommand(t9.tile, t9.signal), t9.signal)), r6.push(t9), this._validate();
    const a13 = this._joinCommands(s11);
    for (const d4 of r6) d4.nextEvent = a13;
    await a13;
  }
  async _joinCommands(t9) {
    const e9 = (await Promise.allSettled(t9.map(async (t10) => t10.getCommand()))).map((t10) => {
      var _a;
      return "fulfilled" !== t10.status || ((_a = t10.value.signal) == null ? void 0 : _a.aborted) ? null : t10.value.command;
    }).filter(G);
    if (0 === e9.length) return;
    e9.reduce((t10, e10) => (t10.append(e10), t10)).execute();
  }
  _validate() {
    if (!has("feature-pipeline-3d-test-validation")) return;
    const t9 = new Array();
    for (const e9 of this._tileHandles.values()) {
      if (!h4(e9)) continue;
      const { tile: i8 } = e9, o9 = i8.featureCount, n11 = new Uint32Array(o9);
      i8.readObjectIds(n11), t9.push({ tile: i8, objectIds: new Set(n11) });
    }
    for (let e9 = 0; e9 < t9.length; ++e9) {
      const { tile: i8, objectIds: o9 } = t9[e9];
      for (let n11 = e9 + 1; n11 < t9.length; ++n11) {
        const { tile: e10, objectIds: s11 } = t9[n11];
        for (const t10 of s11) if (o9.has(t10)) {
          const o10 = m4(e10.descriptor, i8.descriptor), n12 = m4(i8.descriptor, e10.descriptor);
          throw new Error(`${i8.descriptor.id} and ${e10.descriptor.id} both contain ${t10}. aInB: ${o10}; bInA: ${n12}`);
        }
      }
    }
  }
  _validateRemoval(t9, e9) {
    if (has("feature-pipeline-3d-test-validation")) {
      for (const i8 of t9.objectIds()) if (e9.has(i8)) throw new Error(`Failed to remove ${i8} from ${t9.descriptor.id}!`);
    }
  }
};
function m4({ lij: [t9, e9, i8] }, { lij: [o9, n11, s11] }) {
  const r6 = o9 - t9;
  return r6 >= 0 && e9 === n11 >> r6 && i8 === s11 >> r6;
}
r([m()], u7.prototype, "updating", null), r([m({ constructOnly: true })], u7.prototype, "loadTile", void 0), r([m({ constructOnly: true })], u7.prototype, "createAddTileCommand", void 0), r([m({ constructOnly: true })], u7.prototype, "createRemoveTileCommand", void 0), r([m()], u7.prototype, "_updatingCount", void 0), r([m()], u7.prototype, "extent", void 0), r([m()], u7.prototype, "_boundingRect", null), r([m()], u7.prototype, "_missingTiles", null), u7 = r([a("esri.views.3d.layers.graphics.pipeline.Tile3DManager")], u7);
var p2 = class {
  constructor(t9) {
    this.descriptor = t9, this._controller = new AbortController(), this._tile = r2(null), this.nextEvent = null;
  }
  get id() {
    return this.descriptor.id;
  }
  get tile() {
    return this._tile.value;
  }
  set tile(t9) {
    this._tile.value = t9;
  }
  get signal() {
    return this._controller.signal;
  }
  abort() {
    this._controller.abort();
  }
  get aborted() {
    return this._controller.signal.aborted;
  }
  async untilSettled() {
    try {
      await this.nextEvent;
    } catch (t9) {
      b(t9) || console.error(t9);
    }
  }
};
function h4(t9) {
  return null != t9.tile;
}
function f3(t9) {
  if (!h4(t9)) throw new Error();
}
var g3 = class {
  constructor(t9, e9, i8) {
    this.previousEventSettled = t9, this.commandPromise = e9, this.signal = i8;
  }
  async getCommand() {
    const { previousEventSettled: t9, commandPromise: e9, signal: i8 } = this, [n11] = await Promise.all([e9, t9]);
    if (i8 == null ? void 0 : i8.aborted) throw u();
    return { command: n11, signal: i8 };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/featureData/FeatureData.js
var e6 = class _e {
  constructor(t9, e9) {
    this.tile = t9, this._tileIndices = e9;
  }
  get id() {
    return this.tile.id;
  }
  get featureCount() {
    var _a;
    return ((_a = this._tileIndices) == null ? void 0 : _a.length) ?? this.tile.featureCount;
  }
  get usedMemory() {
    var _a;
    return s4 + (((_a = this._tileIndices) == null ? void 0 : _a.byteLength) ?? 0);
  }
  get extent() {
    return this.tile.descriptor.extent;
  }
  readObjectIds(t9, e9) {
    const { _tileIndices: i8, tile: r6 } = this;
    return r6.readObjectIds(t9, i8, e9);
  }
  readCoordinates(t9, e9) {
    const { _tileIndices: i8, tile: r6 } = this;
    return r6.readCoordinates(t9, i8, e9);
  }
  subset(t9) {
    const { _tileIndices: i8, tile: r6 } = this;
    if (null == i8) return new _e(r6, t9);
    const n11 = new Uint32Array(t9.length);
    for (let e9 = 0; e9 < n11.length; ++e9) n11[e9] = i8[t9[e9]];
    return new _e(r6, n11);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/featureData/FeatureDataStore.js
var t7 = class {
  constructor() {
    this._tileToFeatureData = /* @__PURE__ */ new Map();
  }
  add(t9) {
    this._tileToFeatureData.set(t9.tile, t9);
  }
  remove(t9) {
    this._tileToFeatureData.delete(t9);
  }
  get(t9) {
    return this._tileToFeatureData.get(t9);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/featureSet/TiledFeatureStore.js
var u8 = class {
  constructor(t9, e9) {
    this._index = t9, this._view = e9;
  }
  get usedMemory() {
    return s4 + n;
  }
  getObjectId() {
    return this._view.getObjectId(this._index);
  }
  getAttribute(t9) {
    return this._view.getAttribute(this._index, t9);
  }
  getAttributeAsTimestamp(t9) {
    return this._view.getAttributeAsTimestamp(this._index, t9);
  }
  getAttributes() {
    return this._view.getAttributes(this._index);
  }
  getOptimizedGeometry() {
    return this._view.getOptimizedGeometry(this._index);
  }
  getCentroid(t9) {
    return this._view.getCentroid(this._index, t9);
  }
  getBounds() {
    return this._view.getBounds(this._index);
  }
  getBoundingBox() {
    return this._view.getBoundingBox(this._index);
  }
  cloneWithGeometry(t9) {
    return new m5(this._index, this._view, t9);
  }
};
var m5 = class extends u8 {
  constructor(t9, e9, i8) {
    super(t9, e9), this._geometryOverride = i8;
  }
  getOptimizedGeometry() {
    return this._geometryOverride;
  }
  getCentroid(t9) {
    return n2(new e2(), this._geometryOverride, t9.hasZ, t9.hasM);
  }
};
var d3 = class {
  constructor() {
    this._tileBounds = /* @__PURE__ */ new Map(), this.events = new i(), this.featureAdapter = h5.shared;
  }
  get usedMemory() {
    return s4 + s4 * this._tileBounds.size;
  }
  addTile(t9) {
    const { featureCount: e9 } = t9;
    if (0 === e9) return;
    const i8 = new s7(9, (e10) => t9.getBounds(e10)), s11 = new Array();
    for (let r6 = 0; r6 < e9; ++r6) s11[r6] = r6;
    i8.load(s11), this._tileBounds.set(t9, i8), this.events.emit("changed");
  }
  removeTile(t9) {
    this._tileBounds.delete(t9), this.events.emit("changed");
  }
  clear() {
    this._tileBounds.clear(), this.events.emit("changed");
  }
  forEach(t9) {
    for (const [e9, i8] of this._tileBounds) i8.all((i9) => t9(new u8(i9, e9)));
  }
  forEachInBounds(t9, e9) {
    a6.minX = t9[0], a6.minY = t9[1], a6.maxX = t9[2], a6.maxY = t9[3];
    for (const [i8, r6] of this._tileBounds) r6.search(a6, (t10) => e9(new u8(t10, i8)));
  }
  forEachBounds(t9, e9) {
    for (const i8 of t9) e9(i8.getBoundingBox());
  }
  getFullExtent(t9) {
    let e9 = 1 / 0, i8 = 1 / 0, r6 = -1 / 0, s11 = -1 / 0;
    for (const n11 of this._tileBounds.values()) {
      const { minX: t10, minY: o9, maxX: u12, maxY: m8 } = n11.toJSON();
      e9 = Math.min(e9, t10), i8 = Math.min(i8, o9), r6 = Math.min(r6, u12), s11 = Math.min(s11, m8);
    }
    return { xmin: e9, ymin: i8, xmax: r6, ymax: s11, spatialReference: t9 };
  }
};
var h5 = class {
  getObjectId(t9) {
    return t9.getObjectId();
  }
  getAttribute(t9, e9) {
    return t9.getAttribute(e9);
  }
  getAttributeAsTimestamp(t9, e9) {
    return t9.getAttributeAsTimestamp(e9);
  }
  getAttributes(t9) {
    return t9.getAttributes();
  }
  getGeometry(t9) {
    return t9.getOptimizedGeometry();
  }
  getCentroid(t9, e9) {
    return t9.getCentroid(e9);
  }
  cloneWithGeometry(t9, e9) {
    return t9.cloneWithGeometry(e9);
  }
};
h5.shared = new h5();
var a6 = new E();

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/Tile.js
var r3 = class _r {
  constructor(r6, i8, d4 = a7(i8)) {
    this.descriptor = r6, this._pages = i8, this._addressTable = d4;
    const o9 = a3 + i8.reduce((e9, { usedMemory: t9 }) => e9 + t9, 0), g5 = 3 * n, u12 = i2(d4);
    this.usedMemory = s4 + o9 + g5 + u12, this.featureCount = Math.floor(this._addressTable.length / 2), this.isComplete = this.featureCount === i8.reduce((e9, t9) => e9 + t9.featureCount, 0);
  }
  get id() {
    return this.descriptor.id;
  }
  getObjectId(e9) {
    const { pageIndex: t9, featurePageIndex: s11 } = this._translateIndex(e9);
    return this._pages[t9].getObjectId(s11);
  }
  getAttribute(e9, t9) {
    const { pageIndex: s11, featurePageIndex: n11 } = this._translateIndex(e9);
    return this._pages[s11].getAttribute(n11, t9);
  }
  getAttributeAsTimestamp(e9, t9) {
    const { pageIndex: s11, featurePageIndex: n11 } = this._translateIndex(e9);
    return this._pages[s11].getAttributeAsTimestamp(n11, t9);
  }
  getAttributes(e9) {
    const { pageIndex: t9, featurePageIndex: s11 } = this._translateIndex(e9);
    return this._pages[t9].getAttributes(s11);
  }
  getCoordinates(e9, t9, s11) {
    const { pageIndex: n11, featurePageIndex: r6 } = this._translateIndex(e9);
    this._pages[n11].getCoordinates(r6, t9, s11);
  }
  getOptimizedGeometry(e9) {
    const { pageIndex: t9, featurePageIndex: s11 } = this._translateIndex(e9);
    return this._pages[t9].getOptimizedGeometry(s11);
  }
  getCentroid(e9, t9) {
    const { pageIndex: s11, featurePageIndex: n11 } = this._translateIndex(e9);
    return this._pages[s11].getCentroid(n11, t9);
  }
  getBounds(e9) {
    const { pageIndex: t9, featurePageIndex: s11 } = this._translateIndex(e9);
    return this._pages[t9].getBounds(s11);
  }
  getBoundingBox(e9) {
    const { pageIndex: t9, featurePageIndex: s11 } = this._translateIndex(e9);
    return this._pages[t9].getBoundingBox(s11);
  }
  readObjectIds(e9, t9 = this._allFeatureIndices(), s11 = 0) {
    let n11 = s11;
    for (const { page: r6, indices: a13 } of this._batchPageIndices(t9)) n11 = r6.readObjectIds(e9, a13, n11);
    return n11;
  }
  readCoordinates(e9, t9 = this._allFeatureIndices(), s11 = 0) {
    let n11 = s11;
    for (const { page: r6, indices: a13 } of this._batchPageIndices(t9)) n11 = r6.readCoordinates(e9, a13, n11);
    return n11;
  }
  *objectIds(e9 = this._allFeatureIndices()) {
    for (const { page: t9, indices: s11 } of this._batchPageIndices(e9)) for (const e10 of t9.objectIds(s11)) yield e10;
  }
  exclude(e9) {
    if (0 === e9.size) return this;
    const { _addressTable: t9, featureCount: s11 } = this, n11 = new Array();
    for (let r6 = 0; r6 < s11; ++r6) {
      const s12 = this.getObjectId(r6);
      e9.has(s12) || (n11.push(t9[2 * r6]), n11.push(t9[2 * r6 + 1]));
    }
    return new _r(this.descriptor, this._pages, n11);
  }
  reset() {
    const { isComplete: e9, _pages: t9 } = this;
    return e9 ? this : new _r(this.descriptor, t9);
  }
  *_allFeatureIndices() {
    const { featureCount: e9 } = this;
    for (let t9 = 0; t9 < e9; ++t9) yield t9;
  }
  _translateIndex(e9) {
    const { _addressTable: t9 } = this;
    return { pageIndex: t9[2 * e9], featurePageIndex: t9[2 * e9 + 1] };
  }
  *_batchPageIndices(e9) {
    const t9 = new Array();
    {
      let s12 = 0, n11 = new Array();
      for (const r6 of e9) {
        const { pageIndex: e10, featurePageIndex: a13 } = this._translateIndex(r6);
        s12 !== e10 && (0 !== n11.length && t9.push({ pageIndex: s12, indices: n11 }), s12 = e10, n11 = []), n11.push(a13);
      }
      0 !== n11.length && t9.push({ pageIndex: s12, indices: n11 });
    }
    const { _pages: s11 } = this;
    for (const { pageIndex: n11, indices: r6 } of t9) yield { page: s11[n11], indices: r6 };
  }
};
function a7(e9) {
  const t9 = e9.reduce((e10, { featureCount: t10 }) => e10 + t10, 0), s11 = new Array();
  if (0 === t9) return s11;
  const n11 = e9[0].featureCount;
  for (let r6 = 0; r6 < t9; ++r6) s11[2 * r6] = Math.floor(r6 / n11), s11[2 * r6 + 1] = r6 % n11;
  return s11;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/featureSet/PBFPointFeatureSetView.js
var u9 = class {
  constructor(e9) {
    this._reader = new a4(new Uint8Array(e9), new DataView(e9)), this._index = g4(this._reader);
  }
  get featureCount() {
    return this._index.featureIndices.length;
  }
  get exceededTransferLimit() {
    return this._index.exceededTransferLimit;
  }
  get usedMemory() {
    return this._reader.usedMemory;
  }
  getObjectId(e9) {
    return this.getAttribute(e9, this._index.objectIdFieldName);
  }
  getAttribute(e9, t9) {
    var _a;
    const { _index: { fieldsIndex: r6, attributeIndices: s11 } } = this, n11 = (_a = r6.get(t9)) == null ? void 0 : _a.index;
    if (null == n11) return;
    const o9 = s11[e9 * r6.fields.length + n11], i8 = this._reader;
    return i8.move(o9), m6(i8);
  }
  getAttributeAsTimestamp(e9, t9) {
    const r6 = this.getAttribute(e9, t9);
    return "string" == typeof r6 ? new Date(r6).getTime() : "number" == typeof r6 || null == r6 ? r6 : null;
  }
  getAttributes(e9) {
    const { _index: { fieldsIndex: t9, attributeIndices: r6 } } = this, s11 = e9 * t9.fields.length, n11 = this._reader, o9 = {};
    for (const i8 of t9.fields) {
      const e10 = r6[s11 + i8.index];
      n11.move(e10), o9[i8.name] = m6(n11);
    }
    return o9;
  }
  getCoordinates(e9, t9, r6 = 0) {
    const s11 = this._reader, { transform: n11, featureIndices: o9 } = this._index, { scale: i8, translate: a13 } = n11;
    s11.move(o9[e9]), this._readCoordinates(i8, a13, t9, r6);
  }
  getOptimizedGeometry(e9) {
    const t9 = n3();
    return this.getCoordinates(e9, t9), new e2([], t9);
  }
  getCentroid(e9, { hasZ: t9, hasM: r6 }) {
    this.getCoordinates(e9, p3);
    const [s11, n11, o9] = p3, a13 = [s11, n11];
    return t9 && (a13[3] = o9), r6 && (a13[t9 ? 4 : 3] = 0), new e2([], a13);
  }
  getBounds(e9) {
    this.getCoordinates(e9, p3);
    const [t9, r6] = p3, n11 = new E();
    return n11.minX = t9, n11.minY = r6, n11.maxX = t9, n11.maxY = r6, n11;
  }
  getBoundingBox(e9) {
    this.getCoordinates(e9, p3);
    const [t9, r6, s11] = p3;
    return a2(t9, r6, s11, t9, r6, s11);
  }
  readObjectIds(e9, t9 = this._allFeatureIndices(), r6 = 0) {
    const s11 = this._reader, { objectIdFieldName: n11, attributeIndices: o9, fieldsIndex: i8 } = this._index, a13 = i8.get(n11).index, d4 = i8.fields.length;
    for (const c7 of t9) {
      const t10 = o9[c7 * d4 + a13];
      s11.move(t10), e9[r6++] = m6(s11);
    }
    return r6;
  }
  readCoordinates(e9, t9 = this._allFeatureIndices(), r6 = 0) {
    const s11 = this._reader, { transform: n11, featureIndices: o9 } = this._index, { scale: i8, translate: a13 } = n11;
    for (const d4 of t9) {
      const t10 = o9[d4];
      s11.move(t10), r6 = this._readCoordinates(i8, a13, e9, r6);
    }
    return r6;
  }
  *objectIds(e9 = this._allFeatureIndices()) {
    const t9 = this._reader, { objectIdFieldName: r6, attributeIndices: s11, fieldsIndex: n11 } = this._index, o9 = n11.get(r6).index, i8 = n11.fields.length;
    for (const a13 of e9) {
      const e10 = s11[a13 * i8 + o9];
      t9.move(e10), yield m6(t9);
    }
  }
  *_allFeatureIndices() {
    const { featureCount: e9 } = this;
    for (let t9 = 0; t9 < e9; ++t9) yield t9;
  }
  _readCoordinates([e9, t9, r6], [s11, n11, o9], i8, a13) {
    const d4 = 2, c7 = 3, u12 = this._reader, g5 = u12.getLength(), l5 = u12.pos() + g5;
    for (; u12.pos() < l5 && u12.next(); ) switch (u12.tag()) {
      case d4: {
        const d5 = u12.getLength(), g6 = u12.pos() + d5;
        for (; u12.pos() < g6 && u12.next(); ) if (u12.tag() === c7) u12.getUInt32(), i8[a13++] = s11 + e9 * u12.getSInt64(), i8[a13++] = n11 + t9 * u12.getSInt64(), i8[a13++] = o9 + r6 * u12.getSInt64();
        else u12.skip();
        break;
      }
      default:
        u12.skip();
    }
    return a13;
  }
};
function g4(e9) {
  const t9 = 2;
  for (; e9.next(); ) {
    if (e9.tag() === t9) return l3(e9.getMessage());
    e9.skip();
  }
  h6();
}
function l3(e9) {
  const t9 = 1;
  for (; e9.next(); ) {
    if (e9.tag() === t9) return f4(e9.getMessage());
    e9.skip();
  }
  h6();
}
function f4(e9) {
  const t9 = 9, r6 = 12, s11 = 13, n11 = 15, i8 = 7, u12 = 0, g5 = 10, l5 = 1, f7 = 1;
  let m8, p4, x2 = false, I = false, b6 = 0;
  const _3 = new Array(), w3 = new Array(), y = new Array();
  for (; e9.next(); ) switch (e9.tag()) {
    case f7:
      p4 = e9.getString();
      break;
    case i8:
      e9.getEnum() !== u12 && h6();
      break;
    case t9:
      x2 = e9.getBool() ?? false;
      break;
    case r6:
      m8 = u4(e9.processMessage(h2));
      break;
    case s11: {
      const t10 = e9.processMessage(b4);
      t10.index = b6++, _3.push(t10);
      break;
    }
    case n11: {
      w3.push(e9.pos());
      const t10 = e9.getUInt32(), r7 = e9.pos() + t10;
      for (; e9.pos() < r7 && e9.next(); ) if (e9.tag() === l5) y.push(e9.pos()), e9.skip();
      else e9.skip();
      break;
    }
    case g5:
      I = e9.getBool() ?? false;
      break;
    default:
      e9.skip();
  }
  const j2 = new Z(_3);
  return null != m8 && I && null != p4 && j2.has(p4) || h6(), { transform: m8, exceededTransferLimit: x2, fieldsIndex: j2, objectIdFieldName: p4, featureIndices: w3, attributeIndices: y };
}
function h6() {
  const t9 = new s("pbf-parsing-failed", "Error while parsing PBF", new Error());
  throw console.error(t9), t9;
}
function m6(e9) {
  const t9 = 1, r6 = 2, s11 = 3, n11 = 4, o9 = 5, i8 = 6, a13 = 7, d4 = 8, c7 = 9, u12 = e9.getLength(), g5 = e9.pos() + u12;
  for (; e9.pos() < g5 && e9.next(); ) switch (e9.tag()) {
    case t9:
      return e9.getString();
    case r6:
      return e9.getFloat();
    case s11:
      return e9.getDouble();
    case n11:
      return e9.getSInt32();
    case o9:
      return e9.getUInt32();
    case i8:
      return e9.getInt64();
    case a13:
      return e9.getUInt64();
    case d4:
      return e9.getSInt64();
    case c7:
      return e9.getBool();
    default:
      return e9.skip(), null;
  }
  return null;
}
var p3 = n3();

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/fetching/Tile3DFetcher.js
var i3 = 8e3;
var a8 = 4;
var n8 = 4;
var c4 = class {
  constructor(e9, t9, r6, o9, s11) {
    this.spatialReference = e9, this.url = r6, this.objectIdField = o9, this.capabilities = s11;
    const { supportsMaxRecordCountFactor: n11, maxRecordCount: c7 } = this.capabilities.query, u12 = n11 ? a8 : 1, p4 = (c7 ?? i3) * u12;
    this._pageSize = Math.min(i3, p4);
    const l5 = t9.clone();
    l5.cacheHint = true, l5.resultType = "tile", l5.outSpatialReference = e9, l5.returnGeometry = true, l5.returnZ = true, l5.maxRecordCountFactor = u12, l5.num = this._pageSize, l5.outFields = [o9], this._baseQuery = l5;
  }
  async fetch(r6, s11) {
    const { spatialReference: i8 } = this, a13 = c(r6.extent, i8), c7 = this._baseQuery.clone();
    c7.geometry = a13;
    const u12 = new Array();
    let p4 = 0, l5 = false, h7 = 1;
    for (; !l5; ) {
      const t9 = [];
      for (let e9 = 0; e9 < h7; ++e9) t9.push(this._fetchPage(c7, p4++, s11));
      const r7 = await Promise.all(t9);
      s2(s11);
      for (const e9 of r7) {
        const t10 = 0 !== e9.featureCount;
        l5 || (l5 = !e9.exceededTransferLimit || !t10), t10 && u12.push(e9);
      }
      h7 = Math.min(h7 + 1, n8);
    }
    return new r3(r6, u12);
  }
  async _fetchPage(t9, o9, i8) {
    const a13 = t9.clone();
    a13.start = o9 * this._pageSize;
    const n11 = (await d2(this.url, a13, { signal: i8 })).data;
    return s2(i8), new u9(n11);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/DrawParameters.js
var i4 = class extends n7 {
  constructor(e9 = n3()) {
    super(), this.origin = e9;
  }
  get slicePlaneLocalOrigin() {
    return this.origin;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/DirectRenderer.js
var m7 = class extends u5 {
  constructor(e9) {
    super(e9), this._glMaterials = null, this._produces = /* @__PURE__ */ new Map(), this._renderGeometries = /* @__PURE__ */ new Map(), this._vaoCache = null, this._drawParameters = new i4(), this._bufferWriter = null;
  }
  get produces() {
    return this._produces;
  }
  get numFeatures() {
    const e9 = 6;
    let r6 = 0;
    return this._renderGeometries.forEach((t9) => r6 += t9.numElements / e9), r6;
  }
  get usedMemory() {
    let e9 = 0;
    return this._renderGeometries.forEach((r6) => {
      e9 += r6.vao.usedMemory;
    }), e9;
  }
  initialize() {
    this._bufferWriter = this.material.createBufferWriter(), this.material.produces.forEach((e9, r6) => {
      this._produces.set(r6, (r7) => r7 !== n6.Highlight && r7 !== n6.ShadowHighlight && e9(r7));
    });
  }
  destroy() {
    this._glMaterials.dispose();
    const e9 = this._renderGeometries.keys();
    for (const r6 of e9) this.removeRenderGeometry(r6);
  }
  acquireTechniques(e9) {
    const r6 = this.material;
    if (!r6.shouldRender(e9)) return null;
    const { output: t9, bind: i8 } = e9, o9 = r6.produces.get(i8.slot);
    if (!(o9 == null ? void 0 : o9(t9))) return null;
    if (t9 === n6.Highlight || t9 === n6.ShadowHighlight) return null;
    const n11 = this._glMaterials.load(e9.rctx, i8.slot, t9);
    return n11 == null ? void 0 : n11.beginSlot(i8);
  }
  render(e9, r6) {
    const t9 = this._renderGeometries;
    if (0 === t9.size) return;
    const { bind: i8 } = e9, s11 = i8.slot === A.OCCLUDER_MATERIAL || i8.slot === A.TRANSPARENT_OCCLUDER_MATERIAL ? i8.slot : null, o9 = e9.rctx;
    o9.runAppleAmdDriverHelper(), o9.bindTechnique(r6, i8, this.material.parameters);
    const n11 = r6.program;
    for (const [a13, l5] of t9) this._drawParameters.origin = l5.localOrigin, n11.bindDraw(i8, this.material.parameters, this._drawParameters), r6.ensureAttributeLocations(l5.vao), o9.bindVAO(l5.vao), o9.setPipelineState(r6.getPipeline(false, s11)), o9.drawArrays(r6.primitiveType, 0, l5.numElements);
  }
  initializeRenderContext(e9, r6) {
    this._glMaterials = new t5(this.material, e9.materials), this._vaoCache = e9.renderContext.rctx.getVaoCache(this.material.vertexAttributeLocations, t2(this._bufferWriter.vertexBufferLayout));
  }
  uninitializeRenderContext() {
  }
  addRenderGeometry(e9, r6, t9) {
    this.removeRenderGeometry(e9);
    const i8 = this._vaoCache.newVao(r6.data.byteLength);
    i8.vertexBuffers.get("geometry").setSubData(new Uint8Array(r6.data), 0, 0, r6.data.byteLength);
    const s11 = { localOrigin: t9, vao: i8, numElements: r6.elementCount };
    return this._renderGeometries.set(e9, s11), s11;
  }
  removeRenderGeometry(e9) {
    const r6 = this._renderGeometries.get(e9);
    null != r6 && (this._vaoCache.deleteVao(r6.vao), this._renderGeometries.delete(e9));
  }
  hasHighlightOptions(e9) {
    return false;
  }
};
r([m({ constructOnly: true })], m7.prototype, "material", void 0), m7 = r([a("esri.views.3d.layers.graphics.pipeline.rendering.DirectRenderer")], m7);

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/LodRenderer.js
var l4 = class {
  constructor(e9) {
    this._optionalFields = new Array(), this._featureIdToInstanceIndex = /* @__PURE__ */ new Map(), this._disposeResourceHandles = new Array(), this._lodRendererResources = null, this.layerUid = e9.layerUid, this.view = e9.view, this.sharedResources = this.view.sharedSymbolResources, this.scheduler = this.view.resourceController.scheduler;
  }
  get numFeatures() {
    return this._featureIdToInstanceIndex.size;
  }
  get usedMemory() {
    var _a;
    const e9 = (_a = this._lodRendererResources) == null ? void 0 : _a.lodRenderer, r6 = e9 == null ? void 0 : e9.symbol;
    return ((r6 == null ? void 0 : r6.computeUsedMemory()) ?? 0) + 16 * this._featureIdToInstanceIndex.size;
  }
  destroy() {
    this._disposeResourceHandles.forEach((e9) => e9());
  }
  async doLoad(e9, s11, n11) {
    has("enable-feature:objectAndLayerId-rendering") && this._optionalFields.push(e3.OBJECTANDLAYERIDCOLOR);
    const t9 = c5((e10) => s11(e10), e9), i8 = this.view._stage, a13 = t9.getMaterials();
    i8.addMany(a13), this._addDisposeResource(() => i8.removeMany(a13));
    const d4 = t9.getTextures();
    i8.addMany(d4), this._addDisposeResource(() => {
      d4.forEach((e10) => e10.unload()), i8.removeMany(d4);
    }), await Promise.all(d4.map((e10) => this.view._stage.schedule(() => e10.load(i8.renderView.renderingContext), n11))), s2(n11);
    const l5 = await this._createLodRenderer(t9, n11);
    this._lodRendererResources = { lodRenderer: l5, materials: a13, textures: d4 };
  }
  addInstances(e9) {
    const r6 = this._lodRendererResources;
    if (null == r6) return;
    const { featureIds: s11, localTransforms: o9, globalTransforms: n11 } = e9, t9 = r6.lodRenderer;
    if (null == t9) return;
    const i8 = t9.instanceData, a13 = s11.length;
    for (let d4 = 0; d4 < a13; ++d4) {
      const e10 = s11[d4], r7 = i8.addInstance(), t10 = i8.view, a14 = 16 * d4;
      t10.localTransform.copyFromTypedBuffer(r7, o9, a14), t10.globalTransform.copyFromTypedBuffer(r7, n11, a14), i8.updateModelTransform(r7), i8.setVisible(r7, true), this._featureIdToInstanceIndex.set(e10, r7);
    }
  }
  removeInstances(e9) {
    const r6 = this._lodRendererResources;
    if (null == r6) return;
    const s11 = r6.lodRenderer.instanceData, o9 = this._featureIdToInstanceIndex, n11 = e9.length;
    for (let t9 = 0; t9 < n11; ++t9) {
      const r7 = e9[t9], n12 = o9.get(r7);
      null != n12 && (s11.removeInstance(n12), o9.delete(r7));
    }
  }
  _addDisposeResource(e9) {
    this._disposeResourceHandles.push(e9);
  }
  async _createLodRenderer(e9, r6) {
    const s11 = this.view._stage, o9 = { layerUid: this.layerUid, graphicUid: (e10) => 1, notifyGraphicGeometryChanged: (e10) => 1, notifyGraphicVisibilityChanged: (e10) => 1 }, t9 = new k({ symbol: e9, optionalFields: this._optionalFields, metadata: o9, shaderTransformation: null }, this.scheduler);
    return t9.slicePlaneEnabled = false, this._addDisposeResource(() => {
      s11.removeRenderPlugin(t9), t9.destroy();
    }), await s11.addRenderPlugin(t9, r6), t9;
  }
};
function c5(e9, r6) {
  const s11 = r6.levels.map((r7) => {
    const s12 = r7.components.map((r8) => {
      const s13 = e9(r8.materialId);
      if (!u10(s13)) throw new Error("LodRenderer only supports DefaultMaterial");
      const o9 = new m3(s13, r8.renderGeometryBuffer.data, r8.renderGeometryBuffer.elementCount, r8.boundingInfo);
      return new l2(o9);
    });
    return new f2(s12, r7.minScreenSpaceRadius);
  });
  return new h3(s11);
}
function u10(e9) {
  return null != e9 && "materialType" in e9 && "default" === e9.materialType;
}
l4 = r([a("esri.views.3d.layers.graphics.pipeline.rendering.LodRenderer")], l4);

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/FeaturePipelineRenderManager.js
var _ = class extends g {
  constructor(e9) {
    super(), this.view = null, this.layerUid = null, this._renderGeometries = /* @__PURE__ */ new Map(), this._materials = /* @__PURE__ */ new Map(), this._directRenderers = /* @__PURE__ */ new Map(), this._lodRenderers = /* @__PURE__ */ new Map(), this.totalFeatures = 0, this.view = e9.view, this.layerUid = e9.layerUid;
  }
  initialize() {
  }
  destroy() {
    this.removeAllHandles(), this._lodRenderers.forEach((e9) => e9.destroy());
  }
  async executeRenderCommands(e9) {
    for (const r6 of e9) switch (r6.id) {
      case "create-material":
        await this._createMaterial(r6);
        break;
      case "create-direct-renderer":
        await this._createDirectRenderer(r6);
        break;
      case "add-direct-renderer-geometry":
        await this._addDirectRendererGeometry(r6), this._updateFeatureCount();
        break;
      case "remove-direct-renderer-geometry":
        await this._removeDirectRendererGeometry(r6), this._updateFeatureCount();
        break;
      case "create-lod-renderer":
        await this._createLodRenderer(r6);
        break;
      case "add-lod-instances":
        await this._addLodInstances(r6), this._updateFeatureCount();
        break;
      case "remove-lod-instances":
        await this._removeLodInstances(r6), this._updateFeatureCount();
    }
  }
  _updateFeatureCount() {
    let e9 = 0;
    for (const r6 of this._directRenderers.values()) e9 += r6.numFeatures;
    for (const r6 of this._lodRenderers.values()) e9 += r6.numFeatures;
    this._set("totalFeatures", e9);
  }
  get usedMemory() {
    let e9 = 0;
    for (const r6 of this._directRenderers.values()) e9 += r6.usedMemory;
    for (const r6 of this._lodRenderers.values()) e9 += r6.usedMemory;
    return e9;
  }
  async _createMaterial(e9) {
    const { view: r6 } = this, { sharedSymbolResources: i8 } = r6;
    if (null == i8) throw new Error("No shared symbol resources found!");
    const { textures: o9 } = i8, a13 = r6.state.viewingMode === l.Global;
    let n11 = null;
    switch (e9.type) {
      case "default":
        n11 = v(i8, { physicalBasedRenderingEnabled: true, slicePlaneEnabled: false, castShadows: true, isPrimitive: true, screenSizePerspectiveEnabled: true, doublePrecisionRequiresObfuscation: r6._stage.renderView.renderingContext.driverTest.doublePrecisionRequiresObfuscation.result }, a13);
        break;
      case "hud":
        {
          const [e10, r7] = R2(o9, a13);
          this.addHandles([e(() => t(r7))]), n11 = e10;
        }
        break;
      default:
        throw new Error(`unable to create unknown material type ${e9.type}`);
    }
    this._materials.set(e9.materialId, n11);
  }
  _getMaterial(e9) {
    return this._materials.get(e9);
  }
  async _createDirectRenderer(e9) {
    const r6 = e9.materialId, t9 = this._getMaterial(r6);
    if (null == t9) throw new Error(`material not found ${r6}`);
    const { view: s11 } = this, i8 = new m7({ material: t9 });
    this._directRenderers.set(r6, i8), s11._stage.addRenderPlugin(i8), s11._stage.renderView.renderer.updateHasFlags();
  }
  async _addDirectRendererGeometry(e9) {
    const r6 = e9.renderGeometryId, t9 = e9.materialId;
    await this._removeDirectRendererGeometry({ renderGeometryId: r6 });
    const s11 = this._directRenderers.get(t9);
    if (null == s11) return void console.error("no renderer assigned to provided material");
    const i8 = s11.addRenderGeometry(r6, e9.renderGeometryBuffer, e9.localOrigin);
    this._renderGeometries.set(r6, { renderGeometry: i8, materialId: t9 }), this.view._stage.renderView.requestRender();
  }
  async _removeDirectRendererGeometry(e9) {
    const r6 = e9.renderGeometryId, t9 = this._renderGeometries.get(r6);
    if (null == t9) return;
    const s11 = t9.materialId, i8 = this._directRenderers.get(s11);
    null != i8 ? i8.removeRenderGeometry(e9.renderGeometryId) : console.error("no renderer assigned to provided material");
  }
  async _createLodRenderer(e9) {
    const r6 = new l4({ view: this.view, layerUid: this.layerUid }), t9 = new AbortController(), s11 = (e10) => this._getMaterial(e10);
    await r6.doLoad(e9.lodRenderGeometry, s11, t9.signal), this._lodRenderers.set(e9.lodRendererId, r6);
  }
  async _addLodInstances(e9) {
    const r6 = this._lodRenderers.get(e9.lodRendererId);
    if (null == r6) throw new Error("no lod renderer assigned to provided lod renderer Id");
    r6.addInstances(e9.data);
  }
  async _removeLodInstances(e9) {
    const r6 = this._lodRenderers.get(e9.lodRendererId);
    if (null == r6) throw new Error("no lod renderer assigned to provided lod renderer Id");
    r6.removeInstances(e9.featureIds);
  }
};
function R2(e9, r6) {
  const t9 = { anchorPosition: s8.center, occlusionTest: true, hasSlicePlane: false, color: [1, 0, 0, 1], outlineColor: [0, 0, 0, 1], outlineSize: 1, distanceFieldBoundingBox: c2 }, s11 = null;
  if (null != e9) {
    const r7 = e9.fromData("circle-icon", () => u6("circle"));
    t9.textureId = r7.texture.id, t9.textureIsSignedDistanceField = true, t9.sampleSignedDistanceFieldTexelCenter = s9("circle");
  }
  return [new ae(t9, r6), s11];
}
function v(e9, r6, t9) {
  const s11 = { usePBR: r6.physicalBasedRenderingEnabled, isSchematic: true, mrrFactors: o5, ambient: s5, diffuse: s5, hasSlicePlane: r6.slicePlaneEnabled, castShadows: r6.castShadows, offsetTransparentBackfaces: !r6.isPrimitive };
  return b5(s11), r6.screenSizePerspectiveEnabled && (s11.screenSizePerspective = e9.screenSizePerspectiveSettings), s11.externalColor = N, s11.isInstanced = true, new z(s11, { spherical: t9, doublePrecisionRequiresObfuscation: true });
}
function b5(e9) {
  const r6 = e9.opacity ?? 1, t9 = r6 < 1;
  return e9.transparent = t9, e9.opacity = r6, e9.cullFace = t9 ? e5.None : e5.Back, e9;
}
r([m({ readOnly: true })], _.prototype, "totalFeatures", void 0), _ = r([a("esri.views.3d.layers.graphics.pipeline.rendering.FeaturePipelineRenderManager")], _);

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/RenderGeometryBufferWriter.js
var n9 = class {
  constructor(r6) {
    this._bufferWriter = null, this._bufferWriter = r6.createBufferWriter();
  }
  createBuffer(o9, n11) {
    const s11 = this._bufferWriter;
    let l5 = null;
    if (o9.transformation && n11) n4(f5, o9.transformation), f5[12] -= n11[0], f5[13] -= n11[1], f5[14] -= n11[2], l5 = f5;
    else {
      if (n11) throw new Error("not implemented");
      o9.transformation && (l5 = o9.transformation);
    }
    let u12 = null;
    l5 && (h(a9, f5), s6(a9, a9), u12 = a9);
    const m8 = o9.attributes, c7 = s11.elementCount(m8), b6 = s11.vertexBufferLayout.stride / 4;
    c7 > Math.floor(i5 / b6) && console.warn("geometry with very large number of elements encountered");
    const h7 = s11.vertexBufferLayout.createBuffer(c7), d4 = 0;
    return s11.write(l5, u12, m8, o9.objectAndLayerIdColor, h7, d4), { data: h7.buffer, elementCount: c7 };
  }
};
var f5 = e4();
var a9 = e4();
var i5 = 16777216 / 4;

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/RenderCommandEncoder.js
var o7 = class {
  constructor(e9) {
    this._context = e9, this._commands = [], this._transferables = /* @__PURE__ */ new Set();
  }
  createMaterial(e9) {
    const n11 = this._context, a13 = n11.generateId("material");
    switch (e9) {
      case "default":
        {
          const e10 = new z({}, { spherical: this._context.globalViewingMode, doublePrecisionRequiresObfuscation: true }), r6 = new n9(e10);
          n11.registerRenderGeometryBufferWriter(a13, r6);
        }
        break;
      case "hud": {
        const e10 = R2(null, this._context.globalViewingMode)[0], s11 = new n9(e10);
        n11.registerRenderGeometryBufferWriter(a13, s11);
      }
    }
    return this._commands.push({ id: "create-material", type: e9, materialId: a13 }), a13;
  }
  createDirectRenderer(e9) {
    const r6 = this._context.generateId("material-renderer");
    return this._commands.push({ id: "create-direct-renderer", materialRendererId: r6, materialId: e9 }), r6;
  }
  addDirectRendererGeometry(e9, r6, t9) {
    const n11 = r6.materialId, a13 = this._context.getRenderGeometryBufferWriter(n11);
    if (null == a13) throw new Error(`no bufferwriter found for material ${n11}`);
    const s11 = a13.createBuffer(r6, t9);
    this._transferables.add(s11.data), this._commands.push({ id: "add-direct-renderer-geometry", renderGeometryId: e9, materialId: n11, renderGeometryBuffer: s11, localOrigin: t9 });
  }
  removeDirectRendererGeometry(e9) {
    this._commands.push({ id: "remove-direct-renderer-geometry", renderGeometryId: e9 });
  }
  createLodRenderer(r6) {
    const t9 = this._context.generateId("lod-renderer"), s11 = { levels: r6.levels.map((r7) => ({ components: r7.components.map((r8) => {
      const t10 = r8.attributes.get(e3.POSITION);
      if (!t10 || 0 === t10.indices.length) throw new Error("positions attribute expected");
      const s12 = 3, o9 = o4(t10.indices.length / s12), d4 = new o6(o9, s12, t10), i8 = this._context.getRenderGeometryBufferWriter(r8.materialId);
      if (null == i8) throw new Error("writer not found");
      const c7 = i8.createBuffer(r8, null);
      this._transferables.add(c7.data);
      return { materialId: r8.materialId, renderGeometryBuffer: c7, boundingInfo: { bbMax: d4.bbMax, bbMin: d4.bbMin } };
    }), minScreenSpaceRadius: r7.minScreenSpaceRadius })) };
    return this._commands.push({ id: "create-lod-renderer", lodRendererId: t9, lodRenderGeometry: s11 }), t9;
  }
  addLodInstances(e9, r6) {
    this._commands.push({ id: "add-lod-instances", lodRendererId: e9, data: r6 }), this._transferables.add(r6.featureIds.buffer), this._transferables.add(r6.globalTransforms.buffer), this._transferables.add(r6.localTransforms.buffer);
  }
  removeLodInstances(e9, r6) {
    this._commands.push({ id: "remove-lod-instances", lodRendererId: e9, featureIds: r6 }), this._transferables.add(r6.buffer);
  }
  append(e9) {
    if (e9._context !== this._context) throw new Error("Cannot append encoders from different contexts");
    const { _commands: r6, _transferables: t9 } = this;
    for (const n11 of e9._commands) r6.push(n11);
    for (const n11 of e9._transferables) t9.add(n11);
  }
  async dispatch() {
    const e9 = this._commands, r6 = Array.from(this._transferables);
    this._clearCommandBuffer(), await this._context.dispatchRenderCommands(e9, r6);
  }
  _clearCommandBuffer() {
    this._commands = [], this._transferables.clear();
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/rendering/RenderCommandContext.js
var t8 = class {
  constructor(r6) {
    this._idCounter = 0, this._bufferWriters = /* @__PURE__ */ new Map(), this._dispatchRenderCommandsCallback = async () => {
    }, this.globalViewingMode = false, this.globalViewingMode = r6.viewingMode === l.Global, this._dispatchRenderCommandsCallback = r6.dispatchRenderCommandsCallback;
  }
  generateId(e9 = "") {
    return `${e9}${this._idCounter++}`;
  }
  createEncoder() {
    return new o7(this);
  }
  async dispatchRenderCommands(e9, r6) {
    0 !== e9.length && await this._dispatchRenderCommandsCallback(e9, r6);
  }
  registerRenderGeometryBufferWriter(e9, r6) {
    this._bufferWriters.set(e9, r6);
  }
  getRenderGeometryBufferWriter(e9) {
    return this._bufferWriters.get(e9);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/PipelineCommand.js
var e7 = class {
  constructor(e9, n11) {
    this._renderCommands = e9, this._pipelineStateCommands = n11;
  }
  append(e9) {
    this.appendRenderCommands(e9._renderCommands), this.appendPipelineStateCommands(e9._pipelineStateCommands);
  }
  appendRenderCommands(e9) {
    this._renderCommands.append(e9);
  }
  appendPipelineStateCommand(e9) {
    this._pipelineStateCommands.push(e9);
  }
  appendPipelineStateCommands(e9) {
    const { _pipelineStateCommands: n11 } = this;
    for (const t9 of e9) n11.push(t9);
  }
  execute() {
    for (const e9 of this._pipelineStateCommands) e9();
    this._renderCommands.dispatch();
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/featureData/processingUtils.js
function n10(e9, r6) {
  const { featureCount: t9 } = e9;
  if (0 === t9) return new Uint32Array();
  const o9 = new Uint32Array(t9);
  return e9.readObjectIds(o9), o9;
}
function a10(e9, r6) {
  const { featureCount: t9 } = e9;
  if (0 === t9) return new Float64Array();
  const o9 = new Float64Array(3 * t9);
  return e9.readCoordinates(o9), o9;
}
function i6(e9, t9) {
  const { featureCount: o9 } = e9;
  if (0 === o9) return new Float64Array();
  const n11 = a10(e9), i8 = t9.viewSpatialReference, c7 = t9.renderSpatialReference, f7 = new Float64Array(3 * o9);
  if (!o2(n11, i8, 0, f7, c7, 0, o9)) throw new Error("Failed to project coordinates");
  return f7;
}
function c6(r6, n11) {
  const a13 = n11.viewSpatialReference, i8 = n11.renderSpatialReference, { extent: c7 } = r6, f7 = p(c7), u12 = n3();
  return n5([f7[0], f7[1], 0], a13, u12, i8), u12;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/symbolization/symbolizationUtils.js
function e8(e9) {
  const n11 = /* @__PURE__ */ new Map();
  for (const [t9, r6] of e9) n11.set(t9, { ...r6, indices: t3(r6.indices) });
  return n11;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/symbolization/primitiveObjectUtils.js
function r4(t9, i8) {
  const r6 = (t10, n11, r7 = false) => ({ levels: t10.map((t11) => {
    const o9 = e8(n11(t11.tesselation));
    r7 && a11(o9);
    return { components: [{ attributes: o9, objectAndLayerIdColor: void 0, transformation: null, materialId: i8 }], minScreenSpaceRadius: t11.minScreenSpaceRadius };
  }) });
  switch (t9) {
    case "cone":
      return r6(s10, (e9) => ct(1, 0.5, e9, false), true);
    case "sphere":
    case "cube":
    case "inverted-cone":
    case "cylinder":
    case "tetrahedron":
    case "diamond":
      throw new Error("not implemented");
    default:
      return;
  }
}
function a11(e9) {
  const t9 = e9, n11 = t9.get(e3.POSITION).data, r6 = t9.get(e3.NORMAL).data;
  if (r6) {
    const t10 = o8(e9, e3.NORMAL).data;
    for (let e10 = 0; e10 < r6.length; e10 += 3) {
      const n12 = r6[e10 + 1];
      t10[e10 + 1] = -r6[e10 + 2], t10[e10 + 2] = n12;
    }
  }
  if (n11) {
    const t10 = o8(e9, e3.POSITION).data;
    for (let e10 = 0; e10 < n11.length; e10 += 3) {
      const i8 = n11[e10 + 1];
      t10[e10 + 1] = -n11[e10 + 2], t10[e10 + 2] = i8;
    }
  }
}
function o8(e9, n11) {
  let i8 = e9.get(n11);
  return i8 && !i8.exclusive && (i8 = { ...i8, exclusive: true, data: a5(i8.data) }, e9.set(n11, i8)), i8;
}
var s10 = [{ tesselation: 6, minScreenSpaceRadius: 0 }, { tesselation: 18, minScreenSpaceRadius: 7 }, { tesselation: 64, minScreenSpaceRadius: 65 }];

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/symbolization/TestObjectSymbol.js
var f6 = class {
  constructor(t9) {
    this._context = t9, this.lodRendererId = null, this._loaded = false, this._loadingPromise = null, this._primitive = "cone";
  }
  get loaded() {
    return this._loaded;
  }
  load() {
    return null == this._loadingPromise && (this._loadingPromise = this._load()), this._loadingPromise;
  }
  async _load() {
    const t9 = this._context.renderCommandContext.createEncoder(), e9 = t9.createMaterial("default"), r6 = r4(this._primitive, e9);
    this.lodRendererId = t9.createLodRenderer(r6), await t9.dispatch(), this._loaded = true;
  }
  async createAddCommand(t9) {
    const e9 = this._context.renderCommandContext.createEncoder();
    if (null == this.lodRendererId) throw new Error("expected lod renderer id to not be null");
    const { featureCount: r6 } = t9;
    if (0 === r6) return e9;
    const i8 = true, n11 = u2(c3(this._primitive)), c7 = u3(b2(n11)), p4 = u3(t6(c7, { isPrimitive: i8, width: 100, depth: null, height: null })), f7 = new Float64Array(16 * r6), u12 = new Float64Array(16 * r6), g5 = a10(t9, this._context);
    for (let o9 = 0; o9 < r6; ++o9) {
      const t10 = o9, e10 = g5[3 * o9 + 0], r7 = g5[3 * o9 + 1], i9 = g5[3 * o9 + 2], n12 = this._computeGlobalTransform(e10, r7, i9, this._context.viewSpatialReference, x), s11 = this._computeLocalTransform(p4, c7, _2);
      this._writeMatrixToTypedBuffer(f7, t10, s11), this._writeMatrixToTypedBuffer(u12, t10, n12);
    }
    const y = n10(t9, this._context), T = { featureIds: new Uint32Array(y), localTransforms: f7, globalTransforms: u12 };
    return e9.addLodInstances(this.lodRendererId, T), e9;
  }
  async createRemoveCommand(t9) {
    const e9 = this._context.renderCommandContext.createEncoder();
    if (null == this.lodRendererId) return e9;
    const r6 = n10(t9, this._context);
    return e9.removeLodInstances(this.lodRendererId, r6), e9;
  }
  _writeMatrixToTypedBuffer(t9, e9, r6) {
    let o9 = 16 * e9;
    for (let i8 = 0; i8 < 16; i8++) t9[o9++] = r6[i8];
  }
  _computeGlobalTransform(t9, e9, r6, o9, i8) {
    return u11[0] = t9, u11[1] = e9, u11[2] = r6, m2(o9, u11, i8, this._context.renderSpatialReference), i8;
  }
  _computeLocalTransform(e9, r6, o9) {
    return o3(o9), this._applyObjectScale(e9, r6, o9), o9;
  }
  _applyObjectScale(t9, r6, o9) {
    const i8 = D(t9, t9, r6, this._context.renderCoordsHelper.unitInMeters);
    1 === i8[0] && 1 === i8[1] && 1 === i8[2] || f(o9, o9, i8);
  }
};
var u11 = n3();
var _2 = e4();
var x = e4();

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/symbolization/TestSymbol.js
var i7 = class {
  constructor(e9) {
    this._context = e9, this.materialId = null, this._loaded = false, this._loadingPromise = null;
  }
  get loaded() {
    return this._loaded;
  }
  load() {
    return null == this._loadingPromise && (this._loadingPromise = this._load()), this._loadingPromise;
  }
  async _load() {
    const e9 = this._context.renderCommandContext.createEncoder();
    this.materialId = e9.createMaterial("hud"), e9.createDirectRenderer(this.materialId), await e9.dispatch(), this._loaded = true;
  }
  async createAddCommand(i8) {
    const s11 = this._context.renderCommandContext.createEncoder();
    if (null == this.materialId) throw new Error("expected material not to be null");
    const { featureCount: l5, id: d4 } = i8;
    if (0 === l5) return s11;
    const m8 = i6(i8, this._context), c7 = c6(i8, this._context), h7 = new Float64Array([0, 0, 1]), w3 = new Float64Array([255, 255, 255, 255]), u12 = new Float64Array([24, 24]), A2 = new Float64Array([0, 0, 0, 1]), y = new Float64Array([0, 0]), _3 = new Float64Array([0]), f7 = new Uint32Array(l5);
    for (let e9 = 0; e9 < l5; ++e9) f7[e9] = e9;
    const x2 = new Uint32Array(l5);
    for (let e9 = 0; e9 < l5; ++e9) x2[e9] = 0;
    const C = new t4(m8, f7, 3, true), I = new t4(h7, x2, 3, true), b6 = new t4(y, x2, 2, true), g5 = new t4(w3, x2, 4, true), p4 = new t4(_3, x2, 1, true), E2 = new t4(u12, x2, 2, true), F = new t4(A2, x2, 4, true), O2 = [[e3.POSITION, C], [e3.NORMAL, I], [e3.UV0, b6], [e3.COLOR, g5], [e3.ROTATION, p4], [e3.SIZE, E2], [e3.CENTEROFFSETANDDISTANCE, F]], R3 = { attributes: e8(O2), objectAndLayerIdColor: void 0, transformation: e4(), materialId: this.materialId };
    return s11.addDirectRendererGeometry(d4, R3, c7), s11;
  }
  async createRemoveCommand(e9) {
    const t9 = this._context.renderCommandContext.createEncoder();
    return t9.removeDirectRendererGeometry(e9.id), t9;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/symbolization/UniqueValueFeatureRenderer.js
var r5 = class {
  constructor(t9) {
    this._symbols = new Array(), this._featureDataPartitioning = /* @__PURE__ */ new Map(), this._context = t9;
  }
  async load() {
    this._symbols[0] = new i7(this._context), this._symbols[1] = new f6(this._context);
  }
  async createAddCommand(e9) {
    const n11 = this._partition(e9), o9 = await Promise.all(n11.map(async ({ index: t9, features: e10 }) => {
      const n12 = await this._provisionSymbol(t9);
      return await (n12 == null ? void 0 : n12.createAddCommand(e10));
    })), r6 = this._context.renderCommandContext.createEncoder();
    for (const t9 of o9) null != t9 && r6.append(t9);
    return new e7(r6, [() => {
      this._featureDataPartitioning.set(e9, n11);
    }]);
  }
  async createRemoveCommand(e9) {
    const { _featureDataPartitioning: n11 } = this, o9 = n11.get(e9), r6 = this._context.renderCommandContext.createEncoder();
    if (null == o9) return new e7(this._context.renderCommandContext.createEncoder(), []);
    const a13 = await Promise.all(o9.map(async ({ index: t9, features: e10 }) => {
      const n12 = this._getLoadedSymbol(t9);
      return await (n12 == null ? void 0 : n12.createRemoveCommand(e10));
    }));
    for (const t9 of a13) null != t9 && r6.append(t9);
    return new e7(r6, [() => {
      n11.delete(e9);
    }]);
  }
  async _provisionSymbol(t9) {
    if (null == t9) return null;
    const e9 = this._symbols[t9];
    return e9 ? (e9.loaded || await e9.load(), e9) : null;
  }
  _getLoadedSymbol(t9) {
    if (null == t9) return null;
    const e9 = this._symbols[t9];
    return null != e9 && e9.loaded ? e9 : null;
  }
  _partition(t9) {
    const n11 = n10(t9, this._context);
    if (null == n11) throw new Error("unable to fetch objectIds");
    const { featureCount: o9 } = t9, r6 = [[], []];
    for (let e9 = 0; e9 < o9; ++e9) {
      r6[n11[e9] % 2].push(e9);
    }
    return r6.map((e9, n12) => new a12(n12, t9.subset(new Uint32Array(e9)))).filter((t10) => t10.features.featureCount > 0);
  }
};
var a12 = class {
  constructor(t9, e9) {
    this.index = t9, this.features = e9;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/pipeline/Feature3DPipelineWorker.js
var j = class extends i.EventedAccessor {
  constructor() {
    super(...arguments), this.remoteClient = null, this._featureDataStore = new t7(), this._featureStore = new d3(), this._tileManager = null, this._renderer = null, this._fetcher = null, this._queryEngine = null, this._defaultQueryJSON = null;
  }
  get updating() {
    return this._tileManager.updating;
  }
  destroy() {
    var _a;
    this._featureStore.clear(), (_a = this._tileManager) == null ? void 0 : _a.destroy();
  }
  async setup({ viewSpatialReference: e9, renderSpatialReference: r6, viewingMode: t9, baseQuery: n11, url: o9, objectIdField: f7, capabilities: h7, fieldsIndex: y, timeInfo: j2, fullExtent: w3 }) {
    const x2 = g2.fromJSON(e9), v2 = g2.fromJSON(r6);
    this._fetcher = new c4(x2, b3.fromJSON(n11), o9, f7, h7), this._queryEngine = new L({ hasZ: true, hasM: false, geometryType: "esriGeometryPoint", objectIdField: f7, fieldsIndex: y, availableFields: [f7], spatialReference: e9, featureStore: this._featureStore, timeInfo: j2 }), this._renderer = new r5({ viewSpatialReference: x2, renderSpatialReference: v2, renderCoordsHelper: B.create(t9, v2), renderCommandContext: new t8({ viewingMode: t9, dispatchRenderCommandsCallback: (e10, r7) => this.remoteClient.invoke("dispatchRenderCommands", e10, { transferList: r7 }) }) }), this._defaultQueryJSON = new b3({ outSpatialReference: x2 }).toJSON();
    let R3 = null;
    if (null != w3) {
      const e10 = w.fromJSON(w3);
      await Q(e10.spatialReference, x2), R3 = O(e10, x2);
    }
    return this._tileManager = new u7({ loadTile: (e10, r7) => this._fetcher.fetch(e10, r7), createAddTileCommand: (e10, r7) => this._createAddTileCommand(e10, r7), createRemoveTileCommand: (e10) => this._createRemoveTileCommand(e10), extent: R3 }), this.addHandles(d(() => this.updating, (e10) => {
      this.emit("notify-updating", { updating: e10 });
    }), P), await this._renderer.load(), Q2;
  }
  async executeQuery(e9, r6) {
    return { result: await this._queryEngine.executeQuery(this._ensureQuery(e9), r6) };
  }
  async executeQueryForIds(e9, r6) {
    const t9 = await this._queryEngine.executeQueryForIdSet(this._ensureQuery(e9), r6);
    return { result: Array.from(t9) };
  }
  async executeQueryForCount(e9, r6) {
    return { result: await this._queryEngine.executeQueryForCount(this._ensureQuery(e9), r6) };
  }
  async executeQueryForExtent(e9, r6) {
    return { result: await this._queryEngine.executeQueryForExtent(this._ensureQuery(e9), r6) };
  }
  async executeQueryForLatestObservations(e9, r6) {
    return { result: await this._queryEngine.executeQueryForLatestObservations(this._ensureQuery(e9), r6) };
  }
  async onTileTreeChange(e9) {
    return await this._tileManager.onTileTreeChange(e9), Q2;
  }
  async _createAddTileCommand(e9, r6) {
    const a13 = new e6(e9), i8 = await this._renderer.createAddCommand(a13);
    return s2(r6), i8.appendPipelineStateCommand(() => {
      this._featureDataStore.add(a13), this._featureStore.addTile(e9);
    }), i8;
  }
  async _createRemoveTileCommand(e9) {
    const r6 = this._featureStore, t9 = this._featureDataStore, a13 = this._renderer, i8 = t9.get(e9);
    if (null == i8) return null;
    const n11 = await a13.createRemoveCommand(i8);
    return n11.appendPipelineStateCommand(() => {
      t9.remove(e9), r6.removeTile(e9);
    }), n11;
  }
  _ensureQuery(e9) {
    return e9 ?? this._defaultQueryJSON;
  }
};
r([m()], j.prototype, "updating", null), j = r([a("esri.views.3d.layers.graphics.pipeline.Feature3DPipelineWorker")], j);
var w2 = j;
var Q2 = { result: void 0 };
export {
  w2 as default
};
//# sourceMappingURL=Feature3DPipelineWorker-ZC7QASLE.js.map
