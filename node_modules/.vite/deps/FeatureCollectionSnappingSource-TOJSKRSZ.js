import {
  i as i2,
  o
} from "./chunk-VRPQZVYZ.js";
import "./chunk-FNR27W4O.js";
import "./chunk-GIVDDPSR.js";
import "./chunk-V34X57N3.js";
import {
  t
} from "./chunk-4NO34UCA.js";
import "./chunk-OSI4PMXO.js";
import "./chunk-TFOTFKYE.js";
import {
  y as y2
} from "./chunk-3T6XYN2R.js";
import "./chunk-6IYG6BTI.js";
import "./chunk-TWM4KR2X.js";
import {
  y
} from "./chunk-LULXSZFE.js";
import "./chunk-ZGGC3KHK.js";
import "./chunk-I7JIAECC.js";
import "./chunk-ZXD5CGBL.js";
import "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import {
  i,
  n,
  r as r3
} from "./chunk-WID5EUWY.js";
import "./chunk-QSDQ7XKD.js";
import "./chunk-HUXEKERJ.js";
import "./chunk-PJIFP7OJ.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-JOQ2ZFQV.js";
import "./chunk-LILYILCM.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-SPVEONZ2.js";
import {
  r as r2
} from "./chunk-RAVPBO4Z.js";
import "./chunk-D3P3E2RE.js";
import {
  P,
  d,
  v
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-CAN2PXNV.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  g,
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  h,
  s
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/FeatureCollectionSnappingSource.js
var f = class extends g {
  get availability() {
    return 1;
  }
  get _snappingElevationAligner() {
    const { view: e } = this, { layer: t2 } = this.layerSource, i3 = null != e && "3d" === e.type;
    if (!i3 || "subtype-group" === t2.type) return i();
    const r4 = async (i4, r5) => (await h(e.whenLayerView(t2), r5)).elevationAlignPointsInFeatures(i4, r5);
    return i(i3, { elevationInfo: t2.elevationInfo, alignPointsInFeatures: r4 });
  }
  get _snappingElevationFilter() {
    const { view: e } = this, t2 = null != e && "3d" === e.type && "subtype-group" !== this.layerSource.layer.type;
    return r3(t2);
  }
  get _symbologySnappingFetcher() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    return null != e && "3d" === e.type && "subtype-group" !== t2.type ? n(this._symbologySnappingSupported, async (i3, n2) => {
      const o2 = await e.whenLayerView(t2);
      return s(n2), o2.queryForSymbologySnapping({ candidates: i3, spatialReference: e.spatialReference }, n2);
    }) : n();
  }
  get _layerView() {
    const { view: e } = this;
    if (null == e) return null;
    const { layer: t2 } = this.layerSource;
    return e.allLayerViews.find((e2) => e2.layer === t2);
  }
  get _layerView3D() {
    const { view: e } = this;
    return null == e || "2d" === e.type ? null : this._layerView;
  }
  get _symbologySnappingSupported() {
    return null != this._layerView3D && this._layerView3D.symbologySnappingSupported;
  }
  initialize() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    null != e && "3d" === e.type && "subtype-group" !== t2.type && this.addHandles([e.elevationProvider.on("elevation-change", ({ context: e2 }) => {
      const { elevationInfo: i3 } = t2;
      y(e2, i3) && this._snappingElevationAligner.notifyElevationSourceChange();
    }), d(() => t2.elevationInfo, () => this._snappingElevationAligner.notifyElevationSourceChange(), P), d(() => {
      var _a;
      return null != this._layerView3D ? (_a = this._layerView3D.layer) == null ? void 0 : _a.renderer : null;
    }, () => this._symbologySnappingFetcher.notifySymbologyChange(), P), v(() => {
      var _a;
      return (_a = this._layerView3D) == null ? void 0 : _a.layer;
    }, ["edits", "apply-edits", "graphic-update"], () => this._symbologySnappingFetcher.notifySymbologyChange())]);
  }
  constructor(e) {
    super(e), this.view = null, this.updating = false, this._memoizedMakeGetGroundElevation = t(i2);
  }
  refresh() {
  }
  async fetchCandidates(e, t2) {
    var _a, _b;
    const { layer: i3 } = this.layerSource, n2 = i3.source;
    if (!(n2 == null ? void 0 : n2.querySnapping)) return [];
    const o2 = i3.createQuery();
    this._layerView && "effectiveDisplayFilter" in this._layerView && (o2.where = r2(o2.where, (_a = this._layerView.effectiveDisplayFilter) == null ? void 0 : _a.where));
    const a2 = y2(e, ((_b = this.view) == null ? void 0 : _b.type) ?? "2d", o2), s2 = await n2.querySnapping(a2, { signal: t2 });
    s(t2);
    const p = e.coordinateHelper.spatialReference, y3 = await this._snappingElevationAligner.alignCandidates(s2.candidates, p, t2);
    s(t2);
    const c = await this._symbologySnappingFetcher.fetch(y3, t2);
    s(t2);
    const h2 = 0 === c.length ? y3 : [...y3, ...c], m2 = this._snappingElevationFilter.filter(a2, h2), d2 = this._memoizedMakeGetGroundElevation(this.view, p);
    return m2.map((e2) => o(e2, d2));
  }
};
r([m({ constructOnly: true })], f.prototype, "layerSource", void 0), r([m({ constructOnly: true })], f.prototype, "view", void 0), r([m()], f.prototype, "_snappingElevationAligner", null), r([m()], f.prototype, "_snappingElevationFilter", null), r([m()], f.prototype, "_symbologySnappingFetcher", null), r([m()], f.prototype, "_layerView", null), r([m()], f.prototype, "_layerView3D", null), r([m()], f.prototype, "_symbologySnappingSupported", null), f = r([a("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")], f);
export {
  f as FeatureCollectionSnappingSource
};
//# sourceMappingURL=FeatureCollectionSnappingSource-TOJSKRSZ.js.map
