import {
  F as F3,
  P as P4,
  a2 as a8,
  a3 as a9,
  d as d9,
  e as e17,
  e3 as e18,
  l as l8,
  l3 as l9,
  m as m6,
  m2 as m7,
  p as p7,
  p2 as p8,
  r as r6,
  r2 as r7,
  r3 as r8,
  r4 as r9,
  t3 as t7,
  y as y4
} from "./chunk-52Q4IYT4.js";
import {
  C as C4,
  R as R3,
  _ as _2,
  a2 as a6,
  a4 as a7,
  b as b9,
  c as c5,
  d as d7,
  d2 as d8,
  e as e16,
  m as m5,
  o as o10,
  s as s10
} from "./chunk-SFMT6MPK.js";
import {
  b as b10
} from "./chunk-6EXZ5REH.js";
import "./chunk-4AD7WZIV.js";
import "./chunk-OB6J6YZ4.js";
import {
  y as y3
} from "./chunk-ZMZA5FVA.js";
import {
  a as a5
} from "./chunk-HS2WTNLA.js";
import "./chunk-PFISZABC.js";
import {
  u as u9
} from "./chunk-IVPVPFYU.js";
import {
  s as s9
} from "./chunk-LULXSZFE.js";
import "./chunk-KMTBAOD5.js";
import {
  S,
  T as T2,
  b as b6
} from "./chunk-4KZDR5QC.js";
import "./chunk-2NO2M4WL.js";
import {
  c as c4
} from "./chunk-AD3QCYSE.js";
import "./chunk-R6B3KWCZ.js";
import {
  e as e12
} from "./chunk-3Y2XWHXG.js";
import "./chunk-OJP6GZK7.js";
import {
  A as A4,
  O as O3,
  b2 as b5,
  f4 as f3,
  p2 as p6
} from "./chunk-ARBGNZ5J.js";
import {
  a as a3
} from "./chunk-OBY6T2CW.js";
import {
  i as i6
} from "./chunk-SCA7QFZT.js";
import "./chunk-IDAFLWQ6.js";
import "./chunk-QDSJY67F.js";
import "./chunk-5NM52FSC.js";
import {
  e as e15
} from "./chunk-EV3C7SZT.js";
import "./chunk-OV44J3A7.js";
import "./chunk-TLQ257RX.js";
import "./chunk-DKMSNAX7.js";
import "./chunk-IVUJZZWI.js";
import "./chunk-KLCCKTMY.js";
import "./chunk-O3RCWUGN.js";
import {
  l as l6,
  t as t6
} from "./chunk-WRGRINPJ.js";
import "./chunk-R33GG7W2.js";
import "./chunk-BXGUHXQX.js";
import "./chunk-CS6KRDFU.js";
import "./chunk-GPG44W5H.js";
import {
  e as e14
} from "./chunk-VGAGCEX3.js";
import "./chunk-UA3V7B5J.js";
import "./chunk-5MBR7YI6.js";
import "./chunk-WA26GNQ4.js";
import {
  B as B2,
  g as g5,
  p as p5,
  r as r5
} from "./chunk-P5AGQYYC.js";
import {
  t as t5
} from "./chunk-223G2GN7.js";
import "./chunk-AW5WQH2J.js";
import "./chunk-NTLDV7GO.js";
import "./chunk-656DVQ4F.js";
import "./chunk-6VADNTLC.js";
import "./chunk-NM5Y74WL.js";
import "./chunk-U2P5JTEN.js";
import "./chunk-MSPEL4X6.js";
import "./chunk-35YSR2SI.js";
import "./chunk-DLHCJHCP.js";
import {
  e as e13,
  n2 as n8,
  o2 as o5
} from "./chunk-KBTHUZME.js";
import "./chunk-DWU33BWI.js";
import "./chunk-Y6THB4GE.js";
import {
  o as o6
} from "./chunk-W2OFQBYT.js";
import "./chunk-3LQTECQ4.js";
import "./chunk-LTEACZYT.js";
import "./chunk-IBHVRKIT.js";
import "./chunk-QIPDGN53.js";
import "./chunk-SNU6D4LT.js";
import "./chunk-N3R7UAKL.js";
import "./chunk-C2LO2UDO.js";
import "./chunk-276B3RLG.js";
import "./chunk-UGOVBDXX.js";
import "./chunk-QQGGEN5E.js";
import "./chunk-46GTJXDE.js";
import "./chunk-T5NYJWDC.js";
import "./chunk-QTPKIRO2.js";
import "./chunk-S2GEPA3W.js";
import "./chunk-3RHYA2CC.js";
import "./chunk-6WRMI32T.js";
import "./chunk-7FXRLNEH.js";
import "./chunk-CXHZI2CJ.js";
import {
  j as j3
} from "./chunk-RSBV5MGA.js";
import {
  b as b4,
  v as v3
} from "./chunk-QEAQVAMR.js";
import "./chunk-GZUQTA6H.js";
import {
  i as i5
} from "./chunk-MAX4GY2G.js";
import {
  n as n7
} from "./chunk-OITDZHA4.js";
import {
  e as e11
} from "./chunk-ZGGC3KHK.js";
import "./chunk-UM5QMFZV.js";
import "./chunk-MD2QBQPV.js";
import "./chunk-CBFRSYD6.js";
import "./chunk-2CY5SLAC.js";
import "./chunk-LQHBJ3TA.js";
import "./chunk-MKVF6I7G.js";
import {
  u as u6
} from "./chunk-457CK7GN.js";
import "./chunk-EVDBYOW7.js";
import "./chunk-QQOUESXA.js";
import "./chunk-EQ5WRTBD.js";
import "./chunk-6QXEI4OT.js";
import "./chunk-55SEMSMA.js";
import "./chunk-BUZ7I3MJ.js";
import {
  k
} from "./chunk-I7JIAECC.js";
import "./chunk-ZXD5CGBL.js";
import {
  R as R2,
  b as b3,
  v as v2,
  z
} from "./chunk-PXIP6WLU.js";
import "./chunk-V4U366R3.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-R2ZUOHHV.js";
import {
  t as t4
} from "./chunk-EXHR7CRN.js";
import "./chunk-HX6OAJGI.js";
import {
  L as L4,
  M as M2,
  O as O2,
  P as P3,
  V as V2,
  h as h4
} from "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import {
  H as H2
} from "./chunk-BG4BZEWI.js";
import "./chunk-HE2KJFY5.js";
import "./chunk-MFRTZACF.js";
import "./chunk-374VFTLO.js";
import {
  E as E2,
  e as e9
} from "./chunk-HYT6FDCG.js";
import "./chunk-VGMYHNBL.js";
import {
  i as i4
} from "./chunk-MRUZJ4BJ.js";
import "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import {
  m as m3
} from "./chunk-KLBFJ6WQ.js";
import {
  e as e10
} from "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-QAWD6UDA.js";
import {
  e as e8
} from "./chunk-N6TERPCK.js";
import {
  st
} from "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import {
  s as s5
} from "./chunk-3HA4XA2C.js";
import {
  e as e7
} from "./chunk-H2OC77GP.js";
import {
  e as e6
} from "./chunk-RDHJUEBL.js";
import {
  s as s7
} from "./chunk-3WB47P7Q.js";
import "./chunk-D7L2BYRU.js";
import {
  a as a4,
  g as g7
} from "./chunk-CLXICHSQ.js";
import {
  o as o9
} from "./chunk-HUXEKERJ.js";
import {
  c as c3
} from "./chunk-5BSH2ZN2.js";
import "./chunk-HQ2GCCLQ.js";
import {
  t as t3
} from "./chunk-SURICA27.js";
import "./chunk-PBHST2SF.js";
import {
  l as l5
} from "./chunk-6WERKJTM.js";
import {
  O,
  R
} from "./chunk-QNYMCEB7.js";
import {
  n as n6
} from "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import {
  l as l4
} from "./chunk-4ACM2XXN.js";
import {
  A as A3,
  E,
  K,
  P as P2,
  c as c2,
  g as g4,
  o as o4,
  p as p4,
  s as s8,
  u as u5
} from "./chunk-ON7GWFUW.js";
import {
  h as h3
} from "./chunk-VPRLLNNO.js";
import {
  C as C3,
  F as F2,
  g as g3,
  i as i3,
  o as o3
} from "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-SB6LU3VH.js";
import {
  A as A5
} from "./chunk-QAP2FVP7.js";
import "./chunk-5JWPKXQI.js";
import {
  d as d5,
  y as y2
} from "./chunk-XAZEJYKE.js";
import "./chunk-RP6IGXYU.js";
import {
  n as n5,
  r as r4,
  s as s6
} from "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import {
  e as e5
} from "./chunk-OMNXYZNG.js";
import "./chunk-WO43UGNC.js";
import {
  b as b2
} from "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import {
  L as L3,
  nn,
  t as t2
} from "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import {
  o as o2
} from "./chunk-EGSJQZXU.js";
import {
  c
} from "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-QW7P5D76.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import {
  d as d6,
  g as g6,
  u as u8
} from "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import {
  n as n4
} from "./chunk-JOQ2ZFQV.js";
import {
  f as f2
} from "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import {
  h as h2
} from "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import {
  b as b8
} from "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import {
  b2 as b7,
  l as l7,
  o as o7,
  u as u7
} from "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import {
  m3 as m4
} from "./chunk-2SOWSOAE.js";
import {
  B,
  C as C2,
  L as L2,
  M,
  T,
  d as d4,
  l as l3,
  p as p3,
  q,
  u as u3,
  w as w4
} from "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import {
  o as o8
} from "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import {
  i as i2
} from "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import {
  n as n3
} from "./chunk-D3P3E2RE.js";
import {
  A as A2,
  C,
  P,
  d as d2,
  p,
  v,
  w as w2
} from "./chunk-UKY33OJN.js";
import {
  _,
  a as a2
} from "./chunk-HAWCNM3C.js";
import {
  V
} from "./chunk-BQYXRSVC.js";
import {
  i
} from "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import {
  u as u4
} from "./chunk-FZPO5AYT.js";
import {
  h
} from "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import {
  j as j2
} from "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import {
  H,
  d as d3,
  e as e4,
  l as l2,
  m as m2,
  p as p2,
  u as u2,
  x
} from "./chunk-OXPM753Y.js";
import {
  w as w3
} from "./chunk-N4U5VIP2.js";
import {
  j2 as j,
  y
} from "./chunk-IVS2JCO6.js";
import {
  g as g2
} from "./chunk-4GOW35CM.js";
import {
  $,
  s as s3,
  s2 as s4
} from "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import {
  o
} from "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  g,
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a,
  e as e3
} from "./chunk-BM4B3CH5.js";
import {
  A
} from "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  L,
  b,
  d,
  e,
  e2,
  l,
  r as r2,
  s as s2,
  u,
  w
} from "./chunk-SMH2GUF6.js";
import {
  r as r3
} from "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import {
  t
} from "./chunk-7LCEUMDD.js";
import {
  f,
  n2
} from "./chunk-6II7WQ2F.js";
import {
  F,
  G,
  N,
  has,
  n
} from "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/3d/layers/LayerView3D.js
var l10 = (l16) => {
  let n10 = class extends l16 {
    constructor() {
      super(...arguments), this.slicePlaneEnabled = false, this.supportsHeightUnitConversion = false;
    }
    postscript() {
      super.postscript(), g7(this.layer) && this.addResolvingPromise(this._validateHeightModelInfo());
    }
    async _validateHeightModelInfo() {
      const o13 = new AbortController(), r15 = o13.signal;
      this.addHandles(e2(() => o13.abort())), await w2(() => {
        var _a;
        return (_a = this.view.defaultsFromMap) == null ? void 0 : _a.heightModelInfoReady;
      }, r15), s2(r15);
      const i14 = a4(this.layer, this.view.heightModelInfo, this.supportsHeightUnitConversion);
      if (i14) throw i14;
    }
  };
  return r([m()], n10.prototype, "view", void 0), r([m()], n10.prototype, "slicePlaneEnabled", void 0), n10 = r([a("esri.views.3d.layers.LayerView3D")], n10), n10;
};

// node_modules/@arcgis/core/views/3d/layers/graphics/elevationAlignPointsInFeatures.js
async function l11(l16, m10, d14, j5, u19) {
  const { elevationProvider: v8, renderCoordsHelper: g10 } = l16, { elevationInfo: I2 } = m10, { pointsInFeatures: x6, spatialReference: y8 } = j5, h10 = g2.fromJSON(y8), w6 = d8(I2, true), R4 = await a7(w6, h10, u19);
  s2(u19);
  const S4 = [], b15 = /* @__PURE__ */ new Set(), z2 = /* @__PURE__ */ new Set(), E4 = new o10(), P6 = e11(0, 0, 0, g2.WGS84), U3 = new R3(), C6 = n3();
  P6.spatialReference = h10;
  const F5 = l16.elevationProvider.spatialReference ?? l16.spatialReference;
  for (const { objectId: e25, points: o13 } of x6) {
    const t14 = d14(e25);
    if (null == t14) {
      for (const e26 of o13) S4.push(e26.z ?? 0);
      b15.add(e25);
      continue;
    }
    t14.isDraped && z2.add(e25);
    const i14 = t14.graphic.geometry;
    E4.setFromElevationInfo(s9(i14, I2)), E4.updateFeatureExpressionInfoContext(R4, t14.graphic, m10);
    for (const { x: e26, y: n10, z: a14 } of o13) P6.x = e26, P6.y = n10, P6.z = a14 ?? 0, await i4(P6, C6, F5, 0, { signal: u19 }), c5(C6, v8, E4, g10, U3), S4.push(U3.z);
  }
  return { elevations: S4, drapedObjectIds: z2, failedObjectIds: b15 };
}

// node_modules/@arcgis/core/renderers/support/rendererConversion.js
function s11(r15) {
  return null == r15 || "simple" === r15.type || "unique-value" === r15.type || "class-breaks" === r15.type || "dictionary" === r15.type || "heatmap" === r15.type;
}
function t8(r15, n10) {
  if (null == r15) return null;
  if (!s11(r15)) return new s("renderer-conversion-3d:unsupported-renderer", `Unsupported renderer of type '${r15.type || r15.declaredClass}'`, { renderer: r15 });
  switch (r15.type) {
    case "simple":
      return a10(r15, n10);
    case "unique-value":
      return u10(r15, n10);
    case "class-breaks":
      return i7(r15, n10);
    case "dictionary":
    case "heatmap":
      return null;
  }
  return null;
}
function l12(r15, n10) {
  if (!n10) return null;
  if (Array.isArray(n10) || (n10 = [n10]), n10.length > 0) {
    const o13 = n10.map((r16) => r16.details.symbol.type || r16.details.symbol.declaredClass).filter((r16) => !!r16);
    o13.sort();
    const s18 = new Array();
    return o13.forEach((r16, e25) => {
      0 !== e25 && r16 === o13[e25 - 1] || s18.push(r16);
    }), new s("renderer-conversion-3d:unsupported-symbols", `Renderer contains symbols (${s18.join(", ")}) which are not supported in 3D`, { renderer: r15, symbolErrors: n10 });
  }
  return null;
}
function a10(r15, e25) {
  const s18 = { ...g6, ...e25, cimFallbackEnabled: true };
  return l12(r15, u8(r15.symbol, s18).error);
}
function u10(e25, s18) {
  var _a;
  const t14 = { ...g6, ...s18, cimFallbackEnabled: true }, a14 = (_a = e25.uniqueValueInfos) == null ? void 0 : _a.map((r15) => u8(r15.symbol, t14).error).filter(G), u19 = u8(e25.defaultSymbol, t14);
  return u19.error && (a14 == null ? void 0 : a14.unshift(u19.error)), l12(e25, a14);
}
function i7(e25, s18) {
  const t14 = { ...g6, ...s18, cimFallbackEnabled: true }, a14 = e25.classBreakInfos.map((r15) => u8(r15.symbol, t14).error).filter(G), u19 = u8(e25.defaultSymbol, t14);
  return u19.error && a14.unshift(u19.error), l12(e25, a14);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/DisplayFeatureLimit.js
var e19 = class {
  constructor(e25, m10, t14) {
    this.maximumTotalNumberOfVertices = e25, this.maximumNumberOfFeatures = m10, this.averageSymbolComplexity = t14;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/ElevationQuery.js
var l13 = class {
  constructor(e25, t14) {
    this.spatialReference = e25, this._view = t14;
  }
  getElevation(e25, t14, r15) {
    return this._view.elevationProvider.getElevation(e25, t14, 0, this.spatialReference, r15);
  }
  async queryElevation(e25, t14, r15, s18, i14) {
    return this._view.elevationProvider.queryElevation(e25, t14, 0, this.spatialReference, i14, r15, s18);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/enums.js
var L5;
var A6;
!function(L8) {
  L8[L8.USER = 1] = "USER", L8[L8.SCALE_RANGE = 2] = "SCALE_RANGE", L8[L8.FILTER = 4] = "FILTER", L8[L8.DECONFLICTION = 8] = "DECONFLICTION", L8[L8.ALL_GRAPHIC = 15] = "ALL_GRAPHIC", L8[L8.ALL_LABEL = 255] = "ALL_LABEL";
}(L5 || (L5 = {})), function(L8) {
  L8[L8.GRAPHIC = 1] = "GRAPHIC", L8[L8.LABEL = 16] = "LABEL";
}(A6 || (A6 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFeatureStore.js
var d10 = u3();
var l14 = class extends g {
  constructor(t14) {
    super(t14), this.events = new i(), this.hasZ = null, this.hasM = null, this.objectIdField = null, this.featureAdapter = { getAttribute: (t15, e25) => "graphic" in t15 ? t15.graphic.attributes[e25] : e8.getAttribute(t15, e25), getAttributes: (t15) => "graphic" in t15 ? t15.graphic.attributes : e8.getAttributes(t15), getObjectId: (t15) => "graphic" in t15 ? R2(t15.graphic, this.objectIdField) ?? void 0 : e8.getObjectId(t15), getGeometry: (t15) => "graphic" in t15 ? t15.getAsOptimizedGeometry(this.hasZ, this.hasM) : e8.getGeometry(t15), getCentroid: (t15, e25) => {
      if ("graphic" in t15) {
        let r15 = null;
        null != t15.centroid ? r15 = t15.centroid : "point" === t15.graphic.geometry.type && nn(t15.graphic.geometry, u13, this.viewSpatialReference) && (r15 = u13);
        const o13 = new Array(2 + (e25.hasZ ? 1 : 0) + (e25.hasM ? 1 : 0));
        return null == r15 ? (o13[0] = 0, o13[1] = 0, o13[2] = 0, o13[3] = 0) : (o13[0] = r15.x, o13[1] = r15.y, e25.hasZ && (o13[2] = r15.hasZ ? r15.z : 0), e25.hasM && (o13[e25.hasZ ? 3 : 2] = r15.hasM ? r15.m : 0)), new e7([], o13);
      }
      return e8.getCentroid(t15, e25);
    }, cloneWithGeometry: (t15, e25) => "graphic" in t15 ? new s5(e25, this.featureAdapter.getAttributes(t15), null, this.featureAdapter.getObjectId(t15)) : e8.cloneWithGeometry(t15, e25) };
  }
  forEachInBounds(t14, e25) {
    this.getSpatialIndex().forEachInBounds(t14, e25);
  }
  forEachBounds(t14, e25) {
    const r15 = this.getSpatialIndex();
    for (const o13 of t14) {
      const t15 = this.featureAdapter.getObjectId(o13);
      null != r15.getBounds(t15, d10) && e25(d10);
    }
  }
};
r([m({ constructOnly: true })], l14.prototype, "getSpatialIndex", void 0), r([m({ constructOnly: true })], l14.prototype, "forEach", void 0), r([m({ constructOnly: true })], l14.prototype, "hasZ", void 0), r([m({ constructOnly: true })], l14.prototype, "hasM", void 0), r([m({ constructOnly: true })], l14.prototype, "objectIdField", void 0), r([m({ constructOnly: true })], l14.prototype, "viewSpatialReference", void 0), r([m({ constructOnly: true })], l14.prototype, "featureSpatialReference", void 0), l14 = r([a("esri.views.3d.layers.graphics.Graphics3DFeatureStore")], l14);
var u13 = { type: "point", x: 0, y: 0, hasZ: false, hasM: false, spatialReference: null };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DGraphicCreationContext.js
var r10 = class {
  constructor(r15, s18, t14) {
    this.graphic = r15, this.renderingInfo = s18, this.layer = t14;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolCreationContext.js
var s12 = class {
  constructor(e25, s18) {
    this.scheduler = e25, this.schedule = s18, this.sharedResources = null, this.streamDataRequester = null, this.elevationProvider = null, this.renderer = null, this.stage = null, this.clippingExtent = null, this.renderCoordsHelper = null, this.overlaySR = null, this.layer = null, this.drapeSourceRenderer = null, this.graphicsCoreOwner = null, this.localOriginFactory = null, this.featureExpressionInfoContext = null, this.screenSizePerspectiveEnabled = true, this.slicePlaneEnabled = false, this.physicalBasedRenderingEnabled = false, this.skipHighSymbolLods = false, this.isAsync = false;
  }
  get spherical() {
    return this.stage.view.state.viewingMode === l5.Global;
  }
  get doublePrecisionRequiresObfuscation() {
    return this.stage.renderView.renderingContext.driverTest.doublePrecisionRequiresObfuscation.result;
  }
};
var i8 = class {
  constructor() {
    this.renderPriority = 0, this.renderPriorityStep = 1, this.ignoreDrivers = false;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineCalloutTechnique.js
var p9 = class extends l6 {
  constructor(r15, o13) {
    super(r15, o13, new t6(b10, () => import("./LineCallout.glsl-GOCNIUNK.js")));
  }
  initializePipeline(e25) {
    const { hudDepth: r15, terrainDepthTest: t14 } = e25, p13 = { func: t14 ? O.ALWAYS : O.LESS };
    return B2(r15 ? { depthTest: p13, depthWrite: p5 } : { blending: r5(R.ONE, R.SRC_ALPHA, R.ONE_MINUS_SRC_ALPHA, R.ONE_MINUS_SRC_ALPHA), depthTest: p13, colorWrite: g5 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineCalloutTechniqueConfiguration.js
var i9 = class extends a3 {
  constructor(e25) {
    super(), this.spherical = e25, this.screenCenterOffsetUnitsEnabled = false, this.occlusionTestEnabled = true, this.hasVerticalOffset = false, this.hasScreenSizePerspective = false, this.hudDepth = false, this.hudDepthAlignStart = false, this.terrainDepthTest = false, this.draped = false;
  }
};
r([i6()], i9.prototype, "screenCenterOffsetUnitsEnabled", void 0), r([i6()], i9.prototype, "occlusionTestEnabled", void 0), r([i6()], i9.prototype, "hasVerticalOffset", void 0), r([i6()], i9.prototype, "hasScreenSizePerspective", void 0), r([i6()], i9.prototype, "hudDepth", void 0), r([i6()], i9.prototype, "hudDepthAlignStart", void 0), r([i6()], i9.prototype, "terrainDepthTest", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/LineCalloutMaterial.js
var d11 = class extends n8 {
  constructor(e25, t14) {
    super(e25, T3), this.produces = /* @__PURE__ */ new Map([[A4.LINE_CALLOUTS, (e26) => u6(e26)], [A4.LINE_CALLOUTS_HUD_DEPTH, (e26) => u6(e26)]]), this._configuration = new i9(t14), this._uniqueMaterialIdentifier = O4(this.parameters);
  }
  passParameters() {
    return this.parameters;
  }
  getConfiguration(e25, t14) {
    const r15 = t14.slot === A4.LINE_CALLOUTS_HUD_DEPTH;
    return this._configuration.occlusionTestEnabled = this.parameters.occlusionTest, this._configuration.hasVerticalOffset = null != this.parameters.verticalOffset, this._configuration.hasScreenSizePerspective = null != this.parameters.screenSizePerspective, this._configuration.hudDepth = r15, this._configuration.hudDepthAlignStart = !!this.parameters.hudDepthAlignStart, this._configuration.screenCenterOffsetUnitsEnabled = "screen" === this.parameters.centerOffsetUnits, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.terrainDepthTest = t14.terrainDepthTest, this._configuration;
  }
  get visible() {
    var _a;
    return this.parameters.color[3] >= o6 || (((_a = this.parameters.borderColor) == null ? void 0 : _a[3]) ?? 0) >= o6;
  }
  intersect() {
  }
  createGLMaterial(e25) {
    return new S2(e25);
  }
  createBufferWriter() {
    return new b11();
  }
  validateParameters(e25) {
    this._uniqueMaterialIdentifier = O4(e25);
  }
  get uniqueMaterialIdentifier() {
    return this._uniqueMaterialIdentifier;
  }
};
function O4({ renderOccluded: t14, isDecoration: r15, horizontalScreenOffset: i14, color: s18, size: n10, occlusionTest: o13, shaderPolygonOffset: a14, hudDepthAlignStart: c9, centerOffsetUnits: l16, hasSlicePlane: f4, screenSizePerspective: h10, verticalOffset: u19, borderColor: p13 }) {
  return f`${t14}:${r15}:${i14}:[${s18}]:${n10}:${o13}:${a14}:${c9}:${l16}:${f4}:${null != h10}:{${u19.screenLength}:${u19.minWorldLength}:${u19.maxWorldLength}}:[${p13}]`;
}
var S2 = class extends e14 {
  beginSlot(e25) {
    return this.getTechnique(p9, e25);
  }
};
var T3 = class extends o5 {
  constructor() {
    super(...arguments), this.horizontalScreenOffset = 0, this.color = r4(0, 0, 0, 1), this.size = 1, this.occlusionTest = false, this.shaderPolygonOffset = 1e-5, this.hudDepthAlignStart = false, this.centerOffsetUnits = "world", this.hasSlicePlane = false;
  }
};
var L6 = H2().vec3f(e9.POSITION).vec3f(e9.NORMAL).vec2f(e9.UV0).vec4f(e9.CENTEROFFSETANDDISTANCE);
var _3 = [t3(0, 0), t3(1, 0), t3(0, 1), t3(1, 0), t3(1, 1), t3(0, 1)];
var b11 = class {
  constructor() {
    this.vertexBufferLayout = L6;
  }
  elementCount(e25) {
    return 6 * e25.get(e9.POSITION).indices.length;
  }
  write(e25, t14, r15, i14, s18, n10) {
    b5(r15.get(e9.POSITION), e25, s18.position, n10, 6), O3(r15.get(e9.NORMAL), t14, s18.normal, n10, 6), p6(r15.get(e9.CENTEROFFSETANDDISTANCE), s18.centerOffsetAndDistance, n10, 6);
    for (let o13 = 0; o13 < _3.length; ++o13) s18.uv0.setVec(n10 + o13, _3[o13]);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLineCalloutSymbolLayer.js
var U = class _U extends y4 {
  constructor(e25, t14) {
    super(e25, null, t14, A7), this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: false }, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    this._materials[0] = new d11(this._materialParameters, this._context.spherical), this._context.stage.add(this._materials[0]);
  }
  destroy() {
    super.destroy(), this._context.stage.remove(this._materials[0]), this._materials.length = 0;
  }
  _perInstanceMaterialParameters(e25) {
    const t14 = this._materialParameters;
    return t14.horizontalScreenOffset = e25.horizontalScreenOffset ?? 0, t14.centerOffsetUnits = e25.centerOffsetUnits || "world", t14;
  }
  get _materialParameters() {
    var _a;
    const r15 = new T3(), n10 = this.symbol, s18 = n10.callout;
    if (s18.color) {
      const t14 = h.toUnitRGBA(s18.color);
      t14[3] *= this._getLayerOpacity(), r15.color = t14;
    } else r15.color = s6;
    if (r15.size = u4(s18.size || 0), n10.verticalOffset) {
      const { screenLength: e25, minWorldLength: i14, maxWorldLength: s19 } = n10.verticalOffset;
      r15.verticalOffset = { screenLength: u4(e25), minWorldLength: i14 || 0, maxWorldLength: null != s19 ? s19 : 1 / 0 };
    }
    r15.borderColor = null != ((_a = s18.border) == null ? void 0 : _a.color) ? h.toUnitRGBA(s18.border.color) : null;
    const o13 = "object" === n10.symbolLayers.at(0).type, a14 = "label-3d" === n10.type;
    return r15.occlusionTest = !o13 && !has("enable-feature:non-occluded-hud"), o13 && (r15.shaderPolygonOffset = 0), r15.hudDepthAlignStart = a14, r15.hasSlicePlane = this._context.slicePlaneEnabled, r15.screenSizePerspective = this._context.screenSizePerspectiveEnabled ? this._context.sharedResources.screenSizePerspectiveSettings : null, r15;
  }
  _defaultElevationInfoNoZ() {
    return S3;
  }
  createGraphics3DGraphic(e25) {
    const t14 = e25.renderingInfo, r15 = e25.graphic, i14 = this.setGraphicElevationContext(r15, new o10(), t14.elevationOffset || 0), n10 = t14.symbol, s18 = "on-the-ground" === this._elevationContext.mode && ("cim" === n10.type || !n10.symbolLayers.some((e26) => "object" === e26.type || "text" === e26.type));
    if ("label-3d" !== n10.type && s18) return null;
    if ("point-3d" === n10.type && n10.symbolLayers.every((e26) => "text" === e26.type && !l7(e26))) return null;
    const a14 = b6(r15.geometry);
    return null == a14 ? null : this._createAs3DShape(a14, i14, t14, r15.uid);
  }
  layerOpacityChanged() {
    var _a;
    (_a = this._materials[0]) == null ? void 0 : _a.setParameters(this._materialParameters);
  }
  layerElevationInfoChanged(e25, t14, r15) {
    const i14 = this._elevationContext.mode, n10 = m5(_U.elevationModeChangeTypes, r15, i14);
    return n10 !== b9.UPDATE || e25.forEach((e26) => {
      const r16 = t14(e26);
      null != r16 && this.updateGraphicElevationContext(e26.graphic, r16);
    }), n10;
  }
  slicePlaneEnabledChanged() {
    var _a;
    return (_a = this._materials[0]) == null ? void 0 : _a.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  setGraphicElevationContext(e25, t14, r15 = 0) {
    return super.setGraphicElevationContext(e25, t14), t14.addOffsetRenderUnits(r15), t14;
  }
  updateGraphicElevationContext(e25, t14) {
    const { elevationContext: r15, metadata: i14 } = t14;
    this.setGraphicElevationContext(e25, r15, (i14 == null ? void 0 : i14.elevationOffset) ?? 0), t14.needsElevationUpdates = d7(r15.mode);
  }
  computeComplexity() {
    return new e17({ verticesPerFeature: 6 });
  }
  _getOrCreateMaterial(e25) {
    var _a;
    const t14 = this._perInstanceMaterialParameters(e25), r15 = O4(t14);
    if (r15 === ((_a = this._materials[0]) == null ? void 0 : _a.uniqueMaterialIdentifier)) return { material: this._materials[0], isUnique: false };
    if (null != e25.materialCollection) {
      let i14 = e25.materialCollection.get(r15);
      return null == i14 && (i14 = new d11(t14, this._context.spherical), e25.materialCollection.add(r15, i14)), { material: i14, isUnique: false };
    }
    return { material: new d11(t14, this._context.spherical), isUnique: true };
  }
  _createAs3DShape(e25, t14, r15, i14) {
    const n10 = this._context.layer.uid, s18 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: i14, layerUid: n10 }), o13 = this._getOrCreateMaterial(r15), l16 = new f3(o13.material, w5(r15), null, e13.Point, s18), c9 = a9(this._context, e25, l16, t14, i14);
    if (null == c9) return null;
    const h10 = new p8(this, c9.object, [l16], o13.isUnique ? [o13.material] : null, null, p7, t14);
    return h10.metadata = new t7(r15.elevationOffset), h10.alignedSampledElevation = c9.sampledElevation, h10.needsElevationUpdates = d7(t14.mode), m7(h10, e25, this._context.elevationProvider), h10;
  }
};
function w5(e25) {
  const { translation: t14, centerOffset: r15 } = e25, i14 = new t4(t14 ? [t14[0], t14[1], t14[2]] : [0, 0, 0], G2, 3, true), n10 = new t4(r15 ? [r15[0], r15[1], r15[2], r15[3]] : [0, 0, 0, 1], G2, 4, true);
  return [[e9.POSITION, i14], [e9.NORMAL, new t4([0, 0, 1], G2, 3, true)], [e9.CENTEROFFSETANDDISTANCE, n10]];
}
U.elevationModeChangeTypes = { definedChanged: b9.UPDATE, staysOnTheGround: b9.UPDATE, onTheGroundChanged: b9.RECREATE };
var G2 = [0];
var S3 = { mode: "relative-to-ground", offset: 0 };
var A7 = { ignoreDrivers: true, renderPriority: 0, renderPriorityStep: 1 };
var D = class extends r6 {
  constructor(e25, t14, i14 = n3(), s18 = n5(), o13 = 0, a14 = "world", l16 = 0, c9 = null) {
    super(e25, t14), this.translation = i14, this.centerOffset = s18, this.horizontalScreenOffset = o13, this.centerOffsetUnits = a14, this.elevationOffset = l16, this.materialCollection = c9;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DCalloutSymbolLayerFactory.js
var t9 = () => n2.getLogger("esri.views.3d.layers.graphics.Graphics3DCalloutSymbolLayerFactory");
function e20(o13, l16) {
  if (!o7(o13)) return t9().error("Graphics3DCalloutSymbolLayerFactory#make", `symbol of type '${o13.type}' does not support callouts`), null;
  if (!o13.callout) return null;
  const e25 = a11[o13.callout.type];
  return e25 ? new e25(o13, l16) : (t9().error("Graphics3DCalloutSymbolLayerFactory#make", `unknown or unsupported callout type ${o13.callout.type}`), null);
}
var a11 = { line: U };

// node_modules/@arcgis/core/geometry/projection/projectBoundingRect.js
function i10(r15, i14, s18, f4) {
  return null != r15 && (s3(i14, f4) ? (e4(s18, r15), true) : (p10[0] = r15[0], p10[1] = r15[1], p10[2] = 0, !!o2(p10, i14, 0, p10, f4, 0) && (s18[0] = p10[0], s18[1] = p10[1], p10[0] = r15[2], p10[1] = r15[3], p10[2] = 0, !!o2(p10, i14, 0, p10, f4, 0) && (s18[2] = p10[0], s18[3] = p10[1], true))));
}
var p10 = n3();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DGraphic.js
var x2 = new e3(Array, (e25) => d4(e25, L2), null, 10, 5);
var v4 = u2();
var A8 = class {
  get labelLayers() {
    return this._labelLayers || N;
  }
  get extent() {
    return this._extent;
  }
  get isElevationSource() {
    return this.layers.some((e25) => e25 == null ? void 0 : e25.isElevationSource);
  }
  constructor(e25, t14, i14, r15, s18) {
    this.graphic = e25, this.graphics3DSymbol = t14, this.layers = i14, this._visibleFlags = L5.ALL_LABEL, this.deconflictionPriority = 0, ++t14.referenced, this._featureExpressionFeature = s18 ? s10(s18, e25, r15) : null;
  }
  initialize(e25) {
    this._layer = e25, this._forEachSymbolLayerGraphic((t14) => {
      t14.initialize(e25), t14.setVisibility(this.isVisible());
    });
  }
  destroy() {
    this._forEachSymbolLayerGraphic((e25) => e25.destroy()), this._calloutLayer = null, --this.graphics3DSymbol.referenced, this.graphics3DSymbol = null;
  }
  get destroyed() {
    return null == this.layers;
  }
  clearLabelGraphics() {
    this._forEachLabelGraphic((e25) => e25.destroy()), this._labelLayers = null;
  }
  addLabelGraphic(e25, t14) {
    this._labelLayers || (this._labelLayers = new Array()), this._labelLayers.push(e25), e25.initialize(t14), e25.setVisibility(this.isVisible(A6.LABEL));
  }
  setCalloutGraphic(e25) {
    this._calloutLayer = e25, this._layer && (e25.initialize(this._layer), e25.setVisibility(this.isVisible()));
  }
  get calloutLayer() {
    return this._calloutLayer;
  }
  get isDraped() {
    let e25 = false;
    return this._forEachSymbolLayerGraphic((t14) => {
      "draped" === t14.type && (e25 = true);
    }), e25;
  }
  isVisible(e25 = A6.GRAPHIC, t14) {
    const i14 = t14 ? this._visibleFlags | t14 | A6.LABEL * t14 : this._visibleFlags;
    return e25 === A6.GRAPHIC ? (i14 & L5.ALL_GRAPHIC) === L5.ALL_GRAPHIC : (i14 & L5.ALL_LABEL) === L5.ALL_LABEL;
  }
  setVisibilityFlag(e25, t14, i14) {
    const r15 = this.isVisible(e25);
    i14 ? this._visibleFlags |= e25 * t14 : this._visibleFlags &= ~(e25 * t14);
    const s18 = this.isVisible(e25);
    if (r15 === s18) return false;
    if (e25 === A6.LABEL) this._forEachLabelGraphic((e26) => e26.setVisibility(s18));
    else {
      this._forEachSymbolLayerGraphic((e27) => e27.setVisibility(s18));
      const e26 = this.isVisible(A6.LABEL);
      this._forEachLabelGraphic((t15) => t15.setVisibility(e26));
    }
    return true;
  }
  getVisibilityFlag(e25, t14) {
    return !!(this._visibleFlags & e25 * t14);
  }
  computeExtent(e25) {
    if (!this._extent) {
      const t14 = this.graphic.geometry;
      if (null == t14) return false;
      this._extent = u2(), z(t14, this._extent);
      const i14 = t14.spatialReference;
      if (!s3(i14, e25) && !i10(this._extent, i14, this._extent, e25)) return this._extent = null, false;
    }
    return true;
  }
  getAsOptimizedGeometry(e25, t14) {
    return this._optimizedGeometry || (this._optimizedGeometry = this._convertGraphicToOptimizedGeometry(this.graphic, e25, t14)), this._optimizedGeometry;
  }
  _convertGraphicToOptimizedGeometry(e25, t14, i14) {
    let r15 = e25.geometry;
    return "mesh" !== r15.type && "extent" !== r15.type || (r15 = j2.fromExtent("mesh" === r15.type ? r15.extent : r15)), st(r15, t14, i14);
  }
  get usedMemory() {
    let e25 = e6(this.graphic.attributes);
    return this._forEachSymbolLayerGraphic((t14) => e25 += t14.graphics3DSymbolLayer.usedMemory), e25;
  }
  computeAttachmentOrigin() {
    const e25 = { render: { origin: n3(), num: 0 }, draped: { origin: n6(), num: 0 } };
    for (const t14 of this.layers) null != t14 && t14.computeAttachmentOrigin(e25);
    return e25.render.num > 1 && g4(e25.render.origin, e25.render.origin, 1 / e25.render.num), e25.draped.num > 1 && l4(e25.draped.origin, e25.draped.origin, 1 / e25.draped.num), e25;
  }
  async getProjectedBoundingBox(e25, i14, r15, s18, a14) {
    return a14 || (a14 = { boundingBox: null, requiresDrapedElevation: false, screenSpaceObjects: [] }), a14.boundingBox ? q(a14.boundingBox) : a14.boundingBox = q(), a14.requiresDrapedElevation = false, await a2(this.layers, async (t14) => {
      if (null == t14) return;
      const o13 = "draped" === t14.type ? i14 : e25, l16 = x2.acquire(), n10 = await t14.getProjectedBoundingBox(o13, r15, a14.screenSpaceObjects, s18, l16);
      isFinite(n10[2]) && isFinite(n10[5]) || (a14.requiresDrapedElevation = true), n10 && M(a14.boundingBox, l16), x2.release(l16);
    }), T(a14.boundingBox) || x(w4(a14.boundingBox, v4)) ? a14 : null;
  }
  needsElevationUpdates() {
    var _a;
    for (const e25 of this.layers) if (null != e25 && ("object3d" === e25.type || "lod-instance" === e25.type) && e25.needsElevationUpdates) return true;
    return ((_a = this._labelLayers) == null ? void 0 : _a.some((e25) => (e25 == null ? void 0 : e25.needsElevationUpdates) ?? false)) ?? false;
  }
  alignWithElevation(e25, t14, i14) {
    this._forEachRenderedGraphic((r15) => {
      "object3d" !== r15.type && "lod-instance" !== r15.type || r15.alignWithElevation(e25, t14, this._featureExpressionFeature, i14);
    });
  }
  alignWithAbsoluteElevation(e25, t14, i14) {
    this._forEachRenderedGraphic((r15) => {
      "object3d" === r15.type && r15.alignWithAbsoluteElevation(e25, t14, i14);
    });
  }
  addObjectStateSet(e25) {
    this._forEachSymbolLayerGraphic((t14) => t14.addObjectState(e25));
  }
  removeObjectState(e25) {
    this._forEachSymbolLayerGraphic((t14) => t14.removeObjectState(e25));
  }
  updateHighlights(e25) {
    this._forEachSymbolLayerGraphic((t14) => t14.updateHighlights(e25));
  }
  _forEachGraphicList(e25, t14) {
    e25 == null ? void 0 : e25.forEach((e26) => e26 && t14(e26));
  }
  _forEachSymbolLayerGraphic(e25) {
    this._forEachGraphicList(this.layers, e25), this._calloutLayer && e25(this._calloutLayer);
  }
  _forEachLabelGraphic(e25) {
    this._forEachGraphicList(this.labelLayers, e25);
  }
  _forEachRenderedGraphic(e25) {
    this._forEachSymbolLayerGraphic(e25), this._forEachLabelGraphic(e25);
  }
  get test() {
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/symbolMemory.js
var e21 = 2216;
var o11 = 4096;
function r11(r15) {
  return e21 + o11 * r15.symbolLayers.length + r15.complexity.memory.resourceBytes;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbol.js
var p11 = class extends r9 {
  set symbol(e25) {
    this._symbol = e25, e25.symbolLayers.forEach((t14, r15) => {
      const s18 = this.symbolLayers[r15];
      null != s18 && (s18.symbol = e25, s18.symbolLayer = t14);
    });
  }
  get symbol() {
    return this._symbol;
  }
  constructor(e25, t14, r15) {
    super(t14.schedule), this._symbol = e25, this._context = t14, this._backgroundLayers = r15, this._destroyed = false, this.symbolLayers = new Array(), this.referenced = 0, this._extentPadding = 0;
  }
  async doLoad(e25) {
    let o13 = this._symbol.symbolLayers;
    this._extentPadding = 0, this._backgroundLayers && (o13 = this._backgroundLayers.concat(o13));
    const a14 = o13.length;
    for (; this.symbolLayers.length < o13.length; ) this.symbolLayers.push(null);
    this.symbolLayers.length = o13.length;
    const i14 = [], { make: n10 } = await import("./Graphics3DSymbolLayerFactory-6I4XKVAC.js");
    for (let t14 = 0; t14 < a14; t14++) {
      const s18 = o13.at(t14);
      if (false === s18.enabled) continue;
      u14.renderPriority = 1 - (1 + t14) / a14, u14.renderPriorityStep = 1 / a14, u14.ignoreDrivers = s18.ignoreDrivers;
      const l16 = n10(this.symbol, s18, this._context, u14), y8 = w(e25, () => {
        this.symbolLayers[t14] = null, l16.destroy();
      });
      y8 && i14.push(y8), this.symbolLayers[t14] = l16;
    }
    if (await a2(this.symbolLayers, async (e26, t14) => {
      if (null != e26) try {
        await e26.load(), this._extentPadding += Math.max(this._extentPadding, e26.extentPadding);
      } catch {
        this.symbolLayers[t14] = null;
      }
    }), i14.forEach((e26) => e26.remove()), s2(e25), this.symbolLayers.length && !this.symbolLayers.some((e26) => !!e26)) throw new Error();
  }
  getSymbolLayerSize(e25) {
    const t14 = this.symbolLayers[e25];
    return null != t14 ? t14.getCachedSize() : null;
  }
  get extentPadding() {
    return this._extentPadding;
  }
  get symbologySnappingSupported() {
    return this.symbolLayers.some((e25) => e25 == null ? void 0 : e25.queryForSnapping);
  }
  updateFocus(e25, t14) {
    this.symbolLayers.forEach((r15) => r15 == null ? void 0 : r15.updateFocus(e25, t14));
  }
  createGraphics3DGraphic(e25, t14) {
    var _a, _b;
    const r15 = e25.graphic, s18 = this.symbolLayers.map((t15) => (t15 == null ? void 0 : t15.createGraphics3DGraphic(e25)) ?? null), o13 = this._context.arcade || ((_b = (_a = this._context.featureExpressionInfoContext) == null ? void 0 : _a.arcade) == null ? void 0 : _b.modules) || null;
    return new A8(r15, t14 || this, s18, e25.layer, o13);
  }
  get complexity() {
    return F3(this.symbolLayers.map((e25) => null != e25 ? e25.complexity : null));
  }
  globalPropertyChanged(e25, t14) {
    const r15 = this.symbolLayers.length;
    for (let s18 = 0; s18 < r15; s18++) {
      const r16 = this.symbolLayers[s18], o13 = (e26) => {
        const t15 = e26.layers[s18];
        return t15 instanceof p8 ? t15 : null;
      };
      if (null != r16 && !r16.globalPropertyChanged(e25, t14, o13)) return false;
    }
    return true;
  }
  applyRendererDiff(e25, t14) {
    return this.loadStatus !== l9.LOADED ? e18.RecreateSymbol : this.symbolLayers.reduce((r15, s18) => r15 !== e18.RecreateSymbol && null != s18 ? Math.min(r15, s18.applyRendererDiff(e25, t14)) : r15, e18.FastUpdate);
  }
  prepareSymbolPatch(e25) {
    if (this.loadStatus === l9.FAILED) return;
    if ("partial" !== e25.diff.type) return;
    const t14 = e25.diff.diff;
    if (!t14.symbolLayers || "partial" !== t14.symbolLayers.type) return;
    const r15 = t14.symbolLayers.diff;
    this.symbolLayers.forEach((t15, s18) => {
      if (null == t15) return;
      const o13 = r15[s18];
      if (o13) {
        const r16 = { diff: o13, graphics3DGraphicPatches: [], symbolLayerStatePatches: [] };
        t15.prepareSymbolLayerPatch(r16), e25.symbolStatePatches.push(...r16.symbolLayerStatePatches), r16.graphics3DGraphicPatches.length && e25.graphics3DGraphicPatches.push((e26, t16) => {
          const o14 = e26.layers[s18];
          null != o14 && r16.graphics3DGraphicPatches.forEach((e27) => e27(o14, t16));
        });
      }
    });
  }
  updateGeometry(e25, t14) {
    return this._updateGeometryOrTransform(e25, (e26, r15) => e26.updateGeometry(r15, t14));
  }
  updateTransform(e25, t14, r15, s18) {
    return this._updateGeometryOrTransform(e25, (e26, o13) => e26.updateTransform(o13, t14, r15, s18));
  }
  _updateGeometryOrTransform(e25, t14) {
    for (let r15 = 0; r15 < this.symbolLayers.length; r15++) {
      const s18 = this.symbolLayers[r15];
      if (null == s18) continue;
      const o13 = e25.layers[r15];
      if (!o13 || !t14(s18, o13)) return false;
    }
    return true;
  }
  onRemoveGraphic(e25) {
    for (let t14 = 0; t14 < this.symbolLayers.length; t14++) {
      const r15 = this.symbolLayers[t14];
      if (null == r15) continue;
      const s18 = e25.layers[t14];
      null != s18 && r15.onRemoveGraphic(s18);
    }
  }
  getFastUpdateStatus() {
    let e25 = false, t14 = false;
    for (const r15 of this.symbolLayers) if (null != r15) {
      if (r15.loadStatus === l9.LOADING) return a8.Loading;
      r15.isFastUpdatesEnabled() ? t14 = true : e25 = true;
    }
    return t14 ? e25 ? a8.Mixed : a8.Fast : e25 ? a8.Slow : a8.Undefined;
  }
  async queryForSnapping(t14, r15, o13, a14) {
    const i14 = this.symbolLayers.filter(G).filter((e25) => null != e25.queryForSnapping).map((e25) => e25.queryForSnapping(t14, r15, o13, a14)), n10 = await Promise.all(i14);
    return s2(a14), n10.flat();
  }
  destroy() {
    if (!this.destroyed) {
      super.destroy();
      for (const e25 of this.symbolLayers) null != e25 && e25.destroy();
      this.symbolLayers.length = 0, this._destroyed = true;
    }
  }
  get destroyed() {
    return this._destroyed;
  }
  get cachedMemory() {
    return r11(this);
  }
};
var u14 = new i8();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPointSymbol.js
var s13 = class extends p11 {
  constructor(r15, o13, t14) {
    super(r15, o13, t14), this._calloutSymbolLayer = null, this.symbol.hasVisibleCallout() && (this._calloutSymbolLayer = e20(this.symbol, o13));
  }
  async doLoad(o13) {
    var _a;
    const a14 = this._calloutSymbolLayer ? _(this._calloutSymbolLayer.load()) : null;
    try {
      await super.doLoad(o13), s2(o13);
    } catch (l16) {
      throw (_a = this._calloutSymbolLayer) == null ? void 0 : _a.abortLoad(), l16;
    }
    a14 && await a14;
  }
  destroy() {
    super.destroy(), this._calloutSymbolLayer = u(this._calloutSymbolLayer);
  }
  createGraphics3DGraphic(r15, o13) {
    const t14 = super.createGraphics3DGraphic(r15, o13);
    if (null != this._calloutSymbolLayer && null != t14) {
      const o14 = this._createCalloutGraphic(r15);
      o14 && t14.setCalloutGraphic(o14);
    }
    return t14;
  }
  globalPropertyChanged(r15, o13) {
    return !!super.globalPropertyChanged(r15, o13) && (!this._calloutSymbolLayer || this._calloutSymbolLayer.globalPropertyChanged(r15, o13, (r16) => r16.calloutLayer));
  }
  updateGeometry(r15, o13) {
    const t14 = super.updateGeometry(r15, o13);
    if (t14 && this._calloutSymbolLayer) {
      const t15 = r15.calloutLayer;
      if (t15) return this._calloutSymbolLayer.updateGeometry(t15, o13);
    }
    return t14;
  }
  _createCalloutGraphic(r15) {
    const o13 = r15.renderingInfo;
    return r15.renderingInfo = new D(o13.renderer, o13.symbol), this._calloutSymbolLayer.createGraphics3DGraphic(r15);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolFactory.js
function t10(t14, i14, n10) {
  return "point-3d" === t14.type ? new s13(t14, i14, n10) : new p11(t14, i14, n10);
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DWebStyleSymbol.js
var l15 = class extends r9 {
  constructor(t14, r15, s18) {
    super(r15), this.symbol = t14, this._convert = s18, this.symbologySnappingSupported = false, this.graphics3DSymbol = null, this.referenced = 0;
  }
  getSymbolLayerSize(t14) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.getSymbolLayerSize(t14) : null;
  }
  get symbolLayers() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.symbolLayers : [];
  }
  get extentPadding() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.extentPadding : 0;
  }
  async doLoad(r15) {
    const s18 = await this.symbol.fetchSymbol({ signal: r15, acceptedFormats: e15 });
    s18.id = this.symbol.id, this.graphics3DSymbol = this._convert(s18), null != this.graphics3DSymbol && await this.graphics3DSymbol.load();
  }
  createGraphics3DGraphic(t14) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.createGraphics3DGraphic(t14, this) : null;
  }
  get complexity() {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.complexity : P4;
  }
  globalPropertyChanged(t14, r15) {
    return null != this.graphics3DSymbol && this.graphics3DSymbol.globalPropertyChanged(t14, r15);
  }
  applyRendererDiff(t14, r15) {
    return null != this.graphics3DSymbol ? this.graphics3DSymbol.applyRendererDiff(t14, r15) : e18.RecreateSymbol;
  }
  prepareSymbolPatch(t14) {
    null != this.graphics3DSymbol && this.graphics3DSymbol.prepareSymbolPatch(t14);
  }
  updateGeometry(t14, r15) {
    return null != this.graphics3DSymbol && this.graphics3DSymbol.updateGeometry(t14, r15);
  }
  updateTransform(t14, r15, s18, e25) {
    var _a;
    return ((_a = this.graphics3DSymbol) == null ? void 0 : _a.updateTransform(t14, r15, s18, e25)) ?? false;
  }
  onRemoveGraphic() {
  }
  updateFocus(t14, r15) {
  }
  getFastUpdateStatus() {
    var _a;
    return ((_a = this.graphics3DSymbol) == null ? void 0 : _a.getFastUpdateStatus()) ?? a8.Loading;
  }
  destroy() {
    null != this.graphics3DSymbol && this.graphics3DSymbol.destroy(), this.graphics3DSymbol = void 0, super.destroy();
  }
  get destroyed() {
    return void 0 === this.graphics3DSymbol;
  }
  get cachedMemory() {
    return r11(this);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicsCorePerformanceInfo.js
var s14 = class {
  constructor(s18, i14, t14) {
    this.visible = s18, this.missing = i14, this.pending = t14;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicStateTracking.js
var s15 = class {
  constructor(t14) {
    var _a;
    this._graphicsCore = t14, this._idToState = /* @__PURE__ */ new Map(), this._states = /* @__PURE__ */ new Set();
    const i14 = (_a = t14.owner.layer) == null ? void 0 : _a.objectIdField;
    i14 ? (this._getGraphicId = (t15) => R2(t15, i14), this._getGraphics3DGraphicById = (t15) => this._graphicsCore.getGraphics3DGraphicByObjectId(t15)) : (this._getGraphicId = (t15) => t15.uid, this._getGraphics3DGraphicById = (t15) => this._graphicsCore.getGraphics3DGraphicById(t15));
  }
  destroy() {
    this._idToState.clear(), this._states.forEach((t14, i14) => this.remove(i14));
  }
  add(t14) {
    const e25 = e2(() => this.remove(t14));
    if (this._states.has(t14)) return e25;
    const s18 = this._getGraphicId(t14.graphic), a14 = this._getGraphics3DGraphicById(s18);
    this._states.has(t14) || this._states.add(t14);
    return this._ensureStateList(s18).push(t14), t14.displaying = null != a14 && a14.isVisible(), t14.isDraped = null != a14 && a14.isDraped, t14.tracking = true, null != a14 && t14.emit("changed"), e25;
  }
  remove(i14) {
    if (this._states.has(i14)) {
      if (this._idToState.size) {
        const e25 = this._getGraphicId(i14.graphic), s18 = this._idToState.get(e25);
        s18 && (F(s18, i14), 0 === s18.length && this._idToState.delete(e25));
      }
      this._states.delete(i14), i14.tracking = false, i14.displaying = false;
    }
  }
  addGraphic(t14) {
    this._forEachState(t14.graphic, (i14) => {
      i14.displaying = t14.isVisible(), i14.isDraped = t14.isDraped, i14.emit("changed");
    });
  }
  removeGraphic(t14) {
    this._forEachState(t14.graphic, (t15) => {
      t15.displaying = false, t15.isDraped = false;
    });
  }
  updateGraphicGeometry(t14) {
    this._forEachState(t14.graphic, (t15) => t15.emit("changed"));
  }
  updateGraphicVisibility(t14) {
    this._forEachState(t14.graphic, (i14) => i14.displaying = t14.isVisible());
  }
  updateGraphicError(t14, i14) {
    this._forEachState(t14, (t15) => t15.error = i14);
  }
  allGraphicsDeleted() {
    this._states.forEach((t14) => t14.displaying = false);
  }
  _ensureStateList(t14) {
    const i14 = this._idToState.get(t14);
    if (i14) return i14;
    const e25 = new Array();
    return this._idToState.set(t14, e25), e25;
  }
  _forEachState(t14, i14) {
    if (0 === this._states.size || 0 === this._idToState.size) return;
    const e25 = this._getGraphicId(t14), s18 = this._idToState.get(e25);
    null != s18 && s18.forEach(i14);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/SpatialIndex2D.js
var d12 = class extends g {
  constructor(t14) {
    super(t14), this._index = new s7(9, has("esri-csp-restrictions") ? (t15) => ({ minX: t15.extent[0], minY: t15.extent[1], maxX: t15.extent[2], maxY: t15.extent[3] }) : [".extent[0]", ".extent[1]", ".extent[2]", ".extent[3]"]), this._missing = /* @__PURE__ */ new Set(), this._boundsByFeature = /* @__PURE__ */ new Map(), this.spatialReference = null, this.hasZ = null, this.hasM = null, this.objectIdField = null, this.updating = false;
  }
  setup(t14) {
    this._addMany(t14);
  }
  destroy() {
    this._missing.clear(), this._index = u(this._index), this._boundsByFeature.clear(), this._boundsByFeature = null;
  }
  update() {
    this._missing.size > 0 && (this._addMany(Array.from(this._missing.values())), this.updating = false, this._missing.clear());
  }
  get updatingRemaining() {
    return this._missing.size;
  }
  queryGraphicUIDsInExtent(t14, e25, s18) {
    null != e25 && e25.equals(this.spatialReference) && (u15.minX = t14[0], u15.minY = t14[1], u15.maxX = t14[2], u15.maxY = t14[3], this.update(), this._index.search(u15, (t15) => s18(t15.graphic.uid)));
  }
  add(t14) {
    this._missing.add(t14), this.updating = true;
  }
  remove(t14) {
    if (this._missing.delete(t14)) return void (this.updating = this._missing.size > 0);
    if (!t14.extent) return;
    this._index.remove(t14);
    const e25 = R2(t14.graphic, this._get("objectIdField"));
    null != e25 && this._boundsByFeature.delete(e25);
  }
  _addMany(t14) {
    if (0 === t14.length) return;
    const e25 = this._get("objectIdField");
    for (const s18 of t14) {
      s18.computeExtent(this.spatialReference);
      const t15 = R2(s18.graphic, e25);
      null != t15 && this._boundsByFeature.set(t15, s18.extent);
    }
    this._index.load(t14);
  }
  clear() {
    this._index.clear(), this._missing.clear(), this._boundsByFeature.clear(), this.updating = false;
  }
  forEachInBounds(t14, e25) {
    u15.minX = t14[0], u15.minY = t14[1], u15.maxX = t14[2], u15.maxY = t14[3], this.update(), this._index.search(u15, (t15) => {
      e25(t15);
    });
  }
  getBounds(t14, e25) {
    this.update();
    const s18 = this._boundsByFeature.get(t14);
    return s18 ? B(e25, s18) : null;
  }
};
r([m({ constructOnly: true })], d12.prototype, "spatialReference", void 0), r([m({ constructOnly: true })], d12.prototype, "hasZ", void 0), r([m({ constructOnly: true })], d12.prototype, "hasM", void 0), r([m({ constructOnly: true })], d12.prototype, "objectIdField", void 0), r([m()], d12.prototype, "updating", void 0), r([m({ readOnly: true })], d12.prototype, "updatingRemaining", null), d12 = r([a("esri.views.3d.layers.graphics.SpatialIndex2D")], d12);
var u15 = { minX: 0, minY: 0, maxX: 0, maxY: 0 };

// node_modules/@arcgis/core/views/3d/support/ElevationUpdateEvent.js
var e22 = class {
  constructor(e25 = "scene") {
    this.context = e25, this.extent = H();
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/StageLayerElevationProvider.js
var _4 = 1;
var v5 = Symbol("layerHandles");
var y5 = class extends i.EventedMixin(g) {
  get spatialReference() {
    var _a;
    return (_a = this.view) == null ? void 0 : _a.spatialReference;
  }
  constructor(e25) {
    super(e25), this._elevationOffset = 0;
  }
  initialize() {
    this._renderCoordsHelper = this.view.renderCoordsHelper, this._intersectLayers = [this.stageLayer], this._intersector = T2(this.view.state.viewingMode), this._intersector.options.store = e12.MIN;
    const e25 = this._computeLayerExtent(this.spatialReference, this.stageLayer);
    this._zmin = e25[2], this._zmax = e25[5];
    const t14 = this.stageLayer.events;
    this.addHandles([t14.on(["layerObjectAdded", "layerObjectRemoved", "geometryAdded", "geometryRemoved"], ({ object: e26 }) => this._objectChanged(e26)), t14.on("attributesChanged", ({ attribute: e26, object: t15 }) => E2(e26) && this._objectChanged(t15)), t14.on(["transformationChanged", "shaderTransformationChanged"], (e26) => this._objectChanged(e26))], v5);
  }
  dispose() {
    this.removeHandles(v5);
  }
  elevationInfoChanged() {
    const e25 = null != this.layer ? this.layer.elevationInfo : null;
    if (null != e25 && "on-the-ground" !== e25.mode) {
      const t14 = $(this.layer.spatialReference), r15 = n4(e25.unit ?? "meters");
      this._elevationOffset = (e25.offset ?? 0) * r15 / t14;
    } else this._elevationOffset = 0;
  }
  getElevation(e25, t14, r15, s18) {
    if (x3[0] = e25, x3[1] = t14, x3[2] = r15, !this._renderCoordsHelper.toRenderCoords(x3, s18, x3)) return n2.getLogger(this).error("could not project point for elevation alignment"), null;
    const i14 = this._elevationOffset, n10 = this._zmin + i14, a14 = this._zmax + i14;
    this._renderCoordsHelper.setAltitude(C5, a14, x3), this._renderCoordsHelper.setAltitude(E3, n10, x3);
    const l16 = (e26) => !!e26.lastValidElevationBB;
    return this._intersector.reset(C5, E3, null), this._intersector.intersect(this._intersectLayers, null, _4, null, l16), this._intersector.results.min.getIntersectionPoint(x3) ? this._renderCoordsHelper.getAltitude(x3) : null;
  }
  _objectChanged(e25) {
    const t14 = this.spatialReference;
    if (!e25.lastValidElevationBB || !t14) return;
    q(j4);
    const r15 = e25.lastValidElevationBB;
    r15.isEmpty() || this._expandExtent(t14, r15.min, r15.max, j4);
    const { min: o13, max: s18 } = e25.boundingVolumeWorldSpace;
    this._expandExtent(t14, o13, s18, j4), w4(j4, b12.extent), this._zmin = Math.min(this._zmin, j4[2]), this._zmax = Math.max(this._zmax, j4[5]), b12.spatialReference = t14, this.emit("elevation-change", b12), s8(r15.min, o13), s8(r15.max, s18);
  }
  _computeLayerExtent(e25, t14) {
    return q(j4), null != e25 && t14.objects.forAll((t15) => this._expandExtent(e25, t15.boundingVolumeWorldSpace.min, t15.boundingVolumeWorldSpace.max, j4)), j4;
  }
  _expandExtent(e25, t14, r15, o13) {
    for (let s18 = 0; s18 < 8; ++s18) x3[0] = 1 & s18 ? t14[0] : r15[0], x3[1] = 2 & s18 ? t14[1] : r15[1], x3[2] = 4 & s18 ? t14[2] : r15[2], this._renderCoordsHelper.fromRenderCoords(x3, x3, e25), l3(o13, x3);
    return o13;
  }
};
r([m({ constructOnly: true })], y5.prototype, "layer", void 0), r([m({ constructOnly: true })], y5.prototype, "stageLayer", void 0), r([m({ constructOnly: true })], y5.prototype, "view", void 0), r([m()], y5.prototype, "spatialReference", null), y5 = r([a("esri.views.3d.layers.support.StageLayerElevationProvider")], y5);
var j4 = q();
var b12 = new e22();
var x3 = n3();
var C5 = n3();
var E3 = n3();

// node_modules/@arcgis/core/views/3d/support/extentUtils.js
function u16(l16, m10, u19) {
  if (null == l16 || null == u19) return false;
  let i14 = true;
  return e23[0] = null != l16.xmin ? l16.xmin : 0, e23[1] = null != l16.ymin ? l16.ymin : 0, e23[2] = null != l16.zmin ? l16.zmin : 0, i14 = i14 && o2(e23, l16.spatialReference, 0, e23, u19, 0), m10[0] = e23[0], m10[1] = e23[1], e23[0] = null != l16.xmax ? l16.xmax : 0, e23[1] = null != l16.ymax ? l16.ymax : 0, e23[2] = null != l16.zmax ? l16.zmax : 0, i14 = i14 && o2(e23, l16.spatialReference, 0, e23, u19, 0), m10[2] = e23[0], m10[3] = e23[1], null == l16.xmin && (m10[0] = -1 / 0), null == l16.ymin && (m10[1] = -1 / 0), null == l16.xmax && (m10[2] = 1 / 0), null == l16.ymax && (m10[3] = 1 / 0), i14;
}
var e23 = n3();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DCore.js
var Te;
var ze = n3();
var ke = u3();
var We = Te = class extends g {
  get _viewSpatialReference() {
    return this.owner.view.spatialReference;
  }
  get spatialIndex() {
    var _a;
    return this._spatialIndex || (this._spatialIndex = new d12({ objectIdField: (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, spatialReference: this._viewSpatialReference, hasZ: !!this.hasZ, hasM: !!this.hasM }), this._spatialIndex.setup(Array.from(this.graphics3DGraphics.values()))), this._spatialIndex.update(), this._spatialIndex;
  }
  get deconflictor() {
    return this._deconflictor;
  }
  get labeler() {
    return this._labeler;
  }
  get numberOfGraphics() {
    return this._numberOfGraphics;
  }
  get effectiveUpdatePolicy() {
    return null != this.currentRenderer && "dictionary" === this.currentRenderer.type ? C4.ASYNC : this._forcedUpdatePolicy ?? this.preferredUpdatePolicy;
  }
  get featureStore() {
    return this._featureStore;
  }
  get initializePromise() {
    return this._initializePromise;
  }
  get scaleVisibility() {
    return this._scaleVisibility;
  }
  get elevationAlignment() {
    return this._elevationAlignment;
  }
  get objectStates() {
    return this._objectStates;
  }
  get filterVisibility() {
    return this._filterVisibility;
  }
  get updating() {
    var _a, _b, _c;
    return !!(this.dataUpdating || ((_a = this._elevationAlignment) == null ? void 0 : _a.updating) || ((_b = this._scaleVisibility) == null ? void 0 : _b.updating) || ((_c = this._filterVisibility) == null ? void 0 : _c.updating) || this._rendererChangeAbortController || this._elevationInfoChangeAbortController || this._frameTaskHandle.updating || this.running);
  }
  get dataUpdating() {
    var _a;
    return !!(this._graphicsWaitingForSymbol.size > 0 || this._pendingUpdates.size > 0 || ((_a = this._spatialIndex) == null ? void 0 : _a.updating) || this._updatingPendingLoadedGraphicsChange || this._dataUpdateQueue.running || this._loadingSymbols > 0);
  }
  get running() {
    var _a;
    return this._pendingUpdates.size > 0 || !!((_a = this._spatialIndex) == null ? void 0 : _a.updating) || this._dataUpdateQueue.running || this._updateQueue.running;
  }
  get suspendedOrOutsideOfView() {
    var _a;
    return this.owner.suspended || !!((_a = this.owner.suspendInfo) == null ? void 0 : _a.outsideOfView);
  }
  get updatingRemaining() {
    var _a, _b;
    return this.updating ? this._pendingUpdates.size + 0.1 * (((_a = this._spatialIndex) == null ? void 0 : _a.updatingRemaining) || 0) + 0.1 * (((_b = this._elevationAlignment) == null ? void 0 : _b.updatingRemaining) || 0) : 0;
  }
  get displayFeatureLimit() {
    const e25 = this.owner && this.owner.view && this.owner.view.qualitySettings, t14 = (e25 == null ? void 0 : e25.graphics3D.minTotalNumberOfFeatures) ?? 0, i14 = (e25 == null ? void 0 : e25.graphics3D.maxTotalNumberOfFeatures) ?? 0, r15 = (e25 == null ? void 0 : e25.graphics3D.maxNumberOfDrawCalls) ?? 0, s18 = (e25 == null ? void 0 : e25.graphics3D.maxTotalNumberOfVertices) ?? 0, a14 = this.averageSymbolComplexity, n10 = Math.max(1, (a14 == null ? void 0 : a14.verticesPerFeature) ?? 1), o13 = a14 && a14.drawCallsPerFeature > 0 && r15 > 0 ? r15 / a14.drawCallsPerFeature : i14, l16 = Math.ceil(s18 / n10), h10 = Math.max(t14, Math.min(i14, l16, o13)), d14 = this._get("displayFeatureLimit");
    return d14 && d14.maximumTotalNumberOfVertices === s18 && d14.averageSymbolComplexity === a14 && d14.maximumNumberOfFeatures === h10 ? d14 : new e19(s18, h10, a14);
  }
  get averageSymbolComplexity() {
    const e25 = d9(this._symbolComplexities), t14 = this._get("averageSymbolComplexity");
    return 0 === e25.numComplexities || null != t14 && (e25.estimated && (t14.verticesPerFeature >= e25.verticesPerFeature || t14.verticesPerCoordinate >= e25.verticesPerCoordinate || t14.drawCallsPerFeature >= e25.drawCallsPerFeature) || t14.verticesPerFeature === e25.verticesPerFeature && t14.verticesPerCoordinate === e25.verticesPerCoordinate && t14.drawCallsPerFeature === e25.drawCallsPerFeature) ? t14 : e25;
  }
  get usedMemory() {
    var _a;
    const e25 = this.labelsEnabled ? (((_a = this.averageSymbolComplexity) == null ? void 0 : _a.memory.bytesPerFeatureLabel) ?? 0) * this._numberOfGraphics : 0, t14 = this._getSymbolComplexitiesUsed().reduce((e26, t15) => e26 + t15.memory.resourceBytes, 0);
    if (null == this._symbolMaterials) {
      this._symbolMaterials = [];
      for (const e26 of this._symbols.values()) if (null != e26) {
        for (const t15 of e26.symbolLayers) if (t15) for (const e27 of t15.materials) e27 && this._symbolMaterials.push(e27);
      }
    }
    const i14 = this.owner.view._stage.renderer, r15 = this.owner.view.basemapTerrain.overlayManager.renderer, s18 = this._symbolMaterials.reduce((e26, t15) => {
      var _a2;
      return e26 + (((_a2 = i14.getMaterialRenderer(t15) || r15.getMaterialRenderer(t15)) == null ? void 0 : _a2.usedMemory) ?? 0);
    }, 0);
    return this._usedMemory + e25 + t14 + s18;
  }
  get usedMemoryPerGraphic() {
    if (this._usedMemory && this._numberOfGraphics) {
      const e25 = this._numberOfGraphics / (this._numberOfGraphics + Math.max(this._pendingAdds, this._pendingRemoves));
      return this._usedMemory / this._numberOfGraphics * e25;
    }
    if (null != this.averageSymbolComplexity) {
      const e25 = this.labelsEnabled ? this.averageSymbolComplexity.memory.bytesPerFeatureLabel : 0;
      return this.averageSymbolComplexity.memory.bytesPerFeature + e25;
    }
    return 0;
  }
  get unprocessedMemoryEstimate() {
    return (this._pendingAdds - this._pendingRemoves) * this.usedMemoryPerGraphic;
  }
  get _symbolComplexities() {
    return this.currentRenderer ? this._getSymbolComplexitiesUsedOrRenderer(this.currentRenderer) : this._getSymbolComplexitiesUsed();
  }
  get visible() {
    return this._visible;
  }
  _getConvertedSymbol(e25) {
    var _a;
    const t14 = e25;
    if ("web-style" === t14.type) return t14.clone();
    const i14 = this._symbolConversionCache.get(t14.id);
    if (null != i14) return i14;
    const r15 = u8(t14, { geometryType: ((_a = this.layer) == null ? void 0 : _a.geometryType) ?? void 0, retainId: true, hasLabelingContext: this._hasLabelingContext(t14), cimFallbackEnabled: true }), s18 = r15.symbol || null;
    return null == s18 && r15.error && n2.getLogger(this).error(r15.error.message), this._symbolConversionCache.set(t14.id, s18), s18;
  }
  _getSymbolComplexitiesUsedOrRenderer(e25) {
    if (null == e25) return [];
    const t14 = e25.symbols, i14 = "backgroundFillSymbol" in e25 ? e25.backgroundFillSymbol : null;
    if (!i14 && !t14.length) return [];
    const r15 = [], s18 = this._getSymbolComplexityUsedOrRenderer(i14);
    null != s18 && r15.push(s18);
    for (const a14 of t14) {
      const e26 = this._getSymbolComplexityUsedOrRenderer(a14);
      null != e26 && r15.push(e26);
    }
    return r15;
  }
  _getSymbolComplexityUsedOrRenderer(e25) {
    if (null == e25) return null;
    const t14 = this._symbols.get(e25.id);
    if (null != t14) return t14.complexity;
    const i14 = this._getConvertedSymbol(e25);
    return null != i14 ? m6(i14) : null;
  }
  _getSymbolComplexitiesUsed() {
    const e25 = [];
    return this._symbols.forEach((t14) => {
      null != t14 && e25.push(t14.complexity);
    }), e25;
  }
  get _objectIdField() {
    return this.layer.objectIdField;
  }
  constructor(e25) {
    super(e25), this._propertiesPool = new o9({ computedExtent: w3 }, this), this.computedExtent = null, this.currentRenderer = null, this.rendererHasGeometryOperations = false, this._graphicStateTracking = null, this.graphics3DGraphics = /* @__PURE__ */ new Map(), this.stageLayer = null, this.stage = null, this._graphicsDrapedUids = /* @__PURE__ */ new Set(), this._graphicsBySymbol = /* @__PURE__ */ new Map(), this._symbolConversionCache = /* @__PURE__ */ new Map(), this._symbols = /* @__PURE__ */ new Map(), this._graphicsWithoutSymbol = /* @__PURE__ */ new Map(), this._graphicsWaitingForSymbol = /* @__PURE__ */ new Map(), this._graphicsUpdateId = 0, this._frameTaskHandle = F2, this._dataUpdateQueue = new i3(), this._updateQueue = new i3(), this._suspendSymbolCleanup = false, this._arcadeOnDemand = null, this._rendererChangeAbortController = null, this._elevationInfoChangeAbortController = null, this._initializeAbortController = null, this._elevationAlignment = null, this._scaleVisibility = null, this._filterVisibility = null, this._spatialIndex = null, this.extentPadding = 0, this._updatingPendingLoadedGraphicsChange = null, this._featureStore = null, this._deconflictor = null, this._labeler = null, this._objectStates = null, this._viewElevationProvider = null, this._stageLayerElevationProvider = null, this._sharedSymbolResourcesOwnerHandle = null, this._whenGraphics3DGraphicRequests = {}, this._pendingUpdates = /* @__PURE__ */ new Map(), this._numberOfGraphics = 0, this._numberOfGraphicsProvidingElevation = 0, this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this._loadingSymbols = 0, this._pendingUpdatesPool = new r3({ allocator: (e26) => e26 || new Ne(), deallocator: (e26) => (e26.clear(), e26) }), this._symbolWarningLogged = false, this._geometryWarningLogged = false, this._objectIdInvisibleSet = /* @__PURE__ */ new Set(), this._whenSymbolRemoved = new r3(), this.preferredUpdatePolicy = C4.SYNC, this._forcedUpdatePolicy = null, this.elevationFeatureExpressionEnabled = true, this.owner = null, this.layer = null, this.graphicSymbolSupported = true, this.getRenderingInfoWithoutRenderer = false, this.setUidToIdOnAdd = true, this.hasZ = null, this.hasM = null, this._usedMemory = 0, this._visible = false, this._startCreateGraphics = false, this._unusedSymbolsCache = e25.owner.view.resourceController.memoryController.newCache("graphics-3d-unused-symbols", (e26) => e26.destroy()), this.symbolCreationContext = new s12(e25.owner.view.resourceController.scheduler, (e26, t14) => this._updateQueue.push(e26, t14));
  }
  initialize() {
    var _a, _b, _c, _d, _e, _f, _g;
    this._featureStore = new l14({ objectIdField: (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, hasZ: !!this.hasZ, hasM: !!this.hasM, viewSpatialReference: this._viewSpatialReference, featureSpatialReference: this.owner.featureSpatialReference, getSpatialIndex: () => this.spatialIndex, forEach: (e26) => this.graphics3DGraphics.forEach(e26) });
    const e25 = (e26, t15, i14) => this.spatialIndex.queryGraphicUIDsInExtent(e26, t15, i14), { componentFactories: t14 } = this;
    this._elevationAlignment = (_b = t14.elevationAlignment) == null ? void 0 : _b.call(t14, this, e25), this._scaleVisibility = (_c = t14.scaleVisibility) == null ? void 0 : _c.call(t14, this, e25), this._filterVisibility = (_d = t14.filterVisibility) == null ? void 0 : _d.call(t14, { featureStore: this._featureStore, getFeatureCount: () => this.graphics3DGraphics.size, updateFeatureVisibilities: (e26) => this.modifyGraphics3DGraphicVisibilities((t15) => t15.setVisibilityFlag(A6.GRAPHIC, L5.FILTER, e26(R2(t15.graphic, this._objectIdField)))), setAllFeaturesVisibility: (e26) => this.modifyGraphics3DGraphicVisibilities((t15) => t15.setVisibilityFlag(A6.GRAPHIC, L5.FILTER, e26)), clearFeaturesVisibility: () => this.modifyGraphics3DGraphicVisibilities((e26) => e26.setVisibilityFlag(A6.GRAPHIC, L5.FILTER, true)) }), this._deconflictor = (_e = t14.deconflictor) == null ? void 0 : _e.call(t14, this), this._labeler = (_f = t14.labeler) == null ? void 0 : _f.call(t14, this, this._scaleVisibility), this._objectStates = (_g = t14.objectStates) == null ? void 0 : _g.call(t14, this), this._initializeAbortController = new AbortController(), this.addHandles(p(() => this.owner.view.state.highlights, () => {
      const { highlightOrderMap: e26 } = this.owner.view.state;
      this.graphics3DGraphics.forEach((t15) => t15.updateHighlights(e26));
    })), this._initializePromise = this._initializeAsync();
  }
  async _initializeAsync() {
    var _a, _b, _c, _d;
    const e25 = (_a = this._initializeAbortController) == null ? void 0 : _a.signal, t14 = this.owner.view;
    this._viewElevationProvider = new l13(this._viewSpatialReference, t14), this._initializeStage(t14, this.layer.uid);
    const i14 = t14.sharedSymbolResources;
    this.symbolCreationContext.sharedResources = i14, this._sharedSymbolResourcesOwnerHandle = i14.addGraphicsOwner(this.owner), null != this.currentRenderer && (this.symbolCreationContext.renderer = this.currentRenderer), this.symbolCreationContext.stage = this.stage, this.symbolCreationContext.streamDataRequester = i14.streamDataRequester, this.symbolCreationContext.renderCoordsHelper = t14.renderCoordsHelper, this.symbolCreationContext.layer = this.layer, this.symbolCreationContext.graphicsCoreOwner = this.owner, this.symbolCreationContext.localOriginFactory = new _2(t14.renderSpatialReference), this.symbolCreationContext.elevationProvider = t14.elevationProvider, this.symbolCreationContext.notifyGraphicGeometryChanged = (e26) => this.notifyGraphicGeometryChanged(e26), this.symbolCreationContext.notifyGraphicVisibilityChanged = (e26) => this.notifyGraphicVisibilityChanged(e26);
    const r15 = d8(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    if (this.symbolCreationContext.featureExpressionInfoContext = await a7(r15, this._viewSpatialReference, e25, n2.getLogger(this)), s2(e25), this.symbolCreationContext.screenSizePerspectiveEnabled = t14.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this.symbolCreationContext.physicalBasedRenderingEnabled = !!((_b = this.owner.view.qualitySettings) == null ? void 0 : _b.physicallyBasedRenderingEnabled), this.symbolCreationContext.skipHighSymbolLods = !!((_d = (_c = this.owner.view.qualitySettings) == null ? void 0 : _c.graphics3D) == null ? void 0 : _d.skipHighSymbolLods), "drapeSourceType" in this.owner) {
      const { owner: e26 } = this;
      this.symbolCreationContext.drapeSourceRenderer = t14.basemapTerrain.overlayManager.registerGeometryDrapeSource(e26), this.addHandles(e2(() => t14.basemapTerrain.overlayManager.unregisterDrapeSource(e26)));
    }
    this.addHandles([d2(() => this.suspendedOrOutsideOfView, () => this._updateQueue.unshift(() => this._updateLayerVisibility(), null).catch(d)), d2(() => {
      var _a2, _b2;
      return [(_a2 = this.layer) == null ? void 0 : _a2.screenSizePerspectiveEnabled, (_b2 = this.owner.view) == null ? void 0 : _b2.screenSizePerspectiveEnabled];
    }, () => {
      var _a2;
      const e26 = t14.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled;
      e26 !== this.symbolCreationContext.screenSizePerspectiveEnabled && (this.symbolCreationContext.screenSizePerspectiveEnabled = e26, (_a2 = this._labeler) == null ? void 0 : _a2.reset(), this.recreateAllGraphicsAndSymbols());
    }), d2(() => this.owner.slicePlaneEnabled, (e26) => this._slicePlaneEnabledChange(!!e26)), d2(() => {
      var _a2;
      return (_a2 = this.owner.view.state) == null ? void 0 : _a2.rasterPixelRatio;
    }, () => this._pixelRatioChange()), d2(() => {
      var _a2;
      return !!((_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.physicallyBasedRenderingEnabled);
    }, (e26) => this._physicalBasedRenderingChange(e26)), d2(() => {
      var _a2, _b2;
      return !!((_b2 = (_a2 = this.owner.view.qualitySettings) == null ? void 0 : _a2.graphics3D) == null ? void 0 : _b2.skipHighSymbolLods);
    }, (e26) => this._skipHighSymbolLoDsChange(e26)), d2(() => this.owner.view.focusAreas.activePolygons, () => this._updateFocusedLabels()), d2(() => this.owner.view.focusAreas.style, () => this.recreateAllGraphicsAndSymbols()), p(() => {
      var _a2;
      return (_a2 = t14.basemapTerrain) == null ? void 0 : _a2.tilingScheme;
    }, (e26) => {
      if (e26.spatialReference.equals(this.symbolCreationContext.overlaySR) || null == t14.basemapTerrain.spatialReference || (this.symbolCreationContext.overlaySR = t14.basemapTerrain.spatialReference), this.hasHandles("loaded-graphics")) this.recreateAllGraphics();
      else {
        const e27 = () => {
          var _a2;
          return (_a2 = this.owner) == null ? void 0 : _a2.loadedGraphics;
        };
        this.addHandles([v(e27, "change", (e28) => {
          this._graphicsCollectionChanged(e28), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        }, { onListenerAdd: () => {
          this.recreateAllGraphics(), this._signalUpdatingDuringAsyncLoadedGraphicsChange();
        } })], "loaded-graphics");
      }
    }, { initial: true }), d2(() => this.effectiveUpdatePolicy, (e26) => {
      null != this.stageLayer && (this.stageLayer.updatePolicy = e26), this.symbolCreationContext.isAsync = this.effectiveUpdatePolicy === C4.ASYNC, e26 === C4.SYNC && this.runTask(C3);
    }, A2)]), this._frameTaskHandle = t14.resourceController.scheduler.registerTask(g3.GRAPHICS_CORE, this), this.layer && "featureReduction" in this.layer && this.addHandles(d2(() => this.layer.featureReduction, () => {
      var _a2;
      return (_a2 = this._deconflictor) == null ? void 0 : _a2.featureReductionChange();
    })), this.notifyChange("averageSymbolComplexity"), this.rendererChange(this.owner.renderer).catch(() => {
    }), this._initializeAbortController = null;
  }
  _abortInitialize() {
    this._initializeAbortController && (this._initializeAbortController.abort(), this._initializeAbortController = null);
  }
  _updateFocusedLabels() {
    this.forEachGraphics3DSymbol((e25, t14) => {
      e25.updateFocus((e26) => {
        this.recreateGraphics([e26.graphic]);
      }, t14);
    });
  }
  destroy() {
    this._unusedSymbolsCache.destroy(), this._abortInitialize(), this._rendererChangeAbortController = e(this._rendererChangeAbortController), this._abortElevationInfoChange(), this._frameTaskHandle.remove(), this._frameTaskHandle = F2, this._dataUpdateQueue.cancelAll(), this._updateQueue.cancelAll(), this._deconflictor = l(this._deconflictor), this._labeler = l(this._labeler), this._elevationAlignment = u(this._elevationAlignment), this._scaleVisibility = u(this._scaleVisibility), this._filterVisibility = u(this._filterVisibility), this._objectStates = u(this._objectStates), this.clear(), this._featureStore = u(this._featureStore), this._updatingPendingLoadedGraphicsChange = l(this._updatingPendingLoadedGraphicsChange), this._graphicStateTracking = u(this._graphicStateTracking), this.stage && (this.stageLayer = u(this.stageLayer), this.stage = null), this._set("owner", null);
    for (const e25 in this._whenGraphics3DGraphicRequests) this._whenGraphics3DGraphicRequests[e25].reject(new s("graphic:layer-destroyed", "Layer has been destroyed"));
    this._whenGraphics3DGraphicRequests = null, this._sharedSymbolResourcesOwnerHandle = l(this._sharedSymbolResourcesOwnerHandle), this._propertiesPool = u(this._propertiesPool), this._pendingUpdatesPool = null, this._symbolConversionCache.clear(), this._objectIdInvisibleSet.clear(), this._spatialIndex = u(this._spatialIndex);
  }
  clear() {
    var _a, _b;
    (_a = this._objectStates) == null ? void 0 : _a.allGraphicsDeleted(), null != this._graphicStateTracking && this._graphicStateTracking.allGraphicsDeleted(), this.graphics3DGraphics.forEach((e25) => e25.destroy()), (_b = this._spatialIndex) == null ? void 0 : _b.clear(), this.graphics3DGraphics.clear(), this._numberOfGraphics = 0, this._usedMemory = 0, this._updateLayerVisibility(), this._symbols.forEach(u), this._symbols.clear(), this._symbolMaterials = null, this._graphicsBySymbol.clear(), this._graphicsWithoutSymbol.clear(), this._graphicsWaitingForSymbol.clear(), this._pendingUpdates.clear(), this._pendingUpdatesPool.clear(), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false, this.notifyChange("dataUpdating"), this.notifyChange("running"), this.notifyChange("updatingRemaining"), this._featureStore.events.emit("changed");
  }
  _initializeStage(e25, t14) {
    this.stage = e25._stage, this.stageLayer = new a6(this.stage, { visible: !this.suspendedOrOutsideOfView, updatePolicy: this.effectiveUpdatePolicy }, t14);
    const i14 = this.stageLayer.events;
    i14.on("transformationChanged", (e26) => this.notifyGraphicGeometryChanged(e26.graphicUid)), i14.on("shaderTransformationChanged", (e26) => this.notifyGraphicGeometryChanged(e26.graphicUid)), i14.on("visibilityChanged", (e26) => this.notifyGraphicVisibilityChanged(e26.graphicUid)), i14.on("geometryAdded", (e26) => this.notifyGraphicGeometryChanged(e26.object.graphicUid)), i14.on("geometryRemoved", (e26) => this.notifyGraphicGeometryChanged(e26.object.graphicUid)), i14.on("attributesChanged", (e26) => E2(e26.attribute) && this.notifyGraphicGeometryChanged(e26.object.graphicUid));
  }
  notifyGraphicGeometryChanged(e25) {
    if (null == this._graphicStateTracking || null == e25) return;
    const t14 = this.graphics3DGraphics.get(e25);
    t14 && this._graphicStateTracking.updateGraphicGeometry(t14);
  }
  notifyGraphicVisibilityChanged(e25) {
    if (null == this._graphicStateTracking || null == e25) return;
    const t14 = this.graphics3DGraphics.get(e25);
    t14 && this._graphicStateTracking.updateGraphicVisibility(t14);
  }
  _updateLayerVisibility() {
    const e25 = this.displayFeatureLimit.maximumNumberOfFeatures, t14 = this._numberOfGraphics > e25 * Be, i14 = !this.suspendedOrOutsideOfView && !t14;
    i14 !== this._visible && (this._visible = i14, this._updateStageLayerVisibility());
  }
  _updateStageLayerVisibility() {
    const e25 = this._visible && (null == this.layer.opacity || this.layer.opacity >= o6);
    this.stageLayer.visible !== e25 && (this.stageLayer.visible = e25, e25 ? this.updateGraphicsVisibilities() : this._hideAllGraphics());
  }
  getGraphics3DGraphicById(e25) {
    return null != e25 ? this.graphics3DGraphics.get(e25) : void 0;
  }
  getGraphics3DGraphicByObjectId(e25) {
    var _a;
    return ((_a = this.owner.layer) == null ? void 0 : _a.objectIdField) ? this._findGraphics3DGraphicByObjectId(e25) : null;
  }
  _getGraphicObjectID(e25, t14 = ((_a) => (_a = this.owner.layer) == null ? void 0 : _a.objectIdField)()) {
    return R2(e25, t14);
  }
  get graphics3DGraphicsByObjectID() {
    var _a;
    const e25 = (_a = this.owner.layer) == null ? void 0 : _a.objectIdField;
    if (!e25) return;
    const t14 = /* @__PURE__ */ new Map();
    return this.graphics3DGraphics.forEach((i14) => {
      if (!i14) return;
      const r15 = i14.graphic, s18 = this._getGraphicObjectID(r15, e25);
      null != s18 && t14.set(s18, i14);
    }), t14;
  }
  get labelsEnabled() {
    var _a;
    return !!((_a = this._labeler) == null ? void 0 : _a.layerLabelsEnabled());
  }
  async updateLabelingInfo(e25) {
    var _a, _b;
    const t14 = (_a = this._deconflictor) == null ? void 0 : _a.labelingInfoChange(e25), i14 = (_b = this._labeler) == null ? void 0 : _b.labelingInfoChange(e25);
    await Promise.allSettled([t14, i14]);
  }
  updateVisibilityInfo() {
    var _a, _b;
    (_a = this._deconflictor) == null ? void 0 : _a.labelingInfoChange(), (_b = this._labeler) == null ? void 0 : _b.visibilityInfoChange();
  }
  get symbolUpdateType() {
    if (this._pendingUpdates.size > 0) return "unknown";
    let e25 = false, t14 = false;
    for (const [i14, r15] of this._symbols) if (null != r15) {
      switch (r15.getFastUpdateStatus()) {
        case a8.Loading:
          return "unknown";
        case a8.Fast:
          this._graphicsBySymbol.has(i14) && (t14 = true);
          break;
        case a8.Slow:
          this._graphicsBySymbol.has(i14) && (e25 = true);
          break;
        case a8.Mixed:
          this._graphicsBySymbol.has(i14) && (t14 = e25 = true);
        case a8.Undefined:
      }
    }
    return t14 ? e25 ? "mixed" : "fast" : e25 ? "slow" : "mixed";
  }
  runTask(e25) {
    if (this._dataUpdateQueue.runTask(e25), this._updateQueue.runTask(e25), this._applyPendingUpdates(e25), this.notifyChange("running"), this.running || this.notifyChange("dataUpdating"), this.notifyChange("updatingRemaining"), !e25.hasProgressed) return o3;
  }
  setObjectIdVisibility(e25, t14) {
    t14 ? this._objectIdInvisibleSet.delete(e25) : this._objectIdInvisibleSet.add(e25);
    const i14 = this._findGraphics3DGraphicByObjectId(e25);
    null != i14 && this._updateUserVisibility(i14);
  }
  _findGraphics3DGraphicByObjectId(e25) {
    return t(this.graphics3DGraphics, (t14) => this._getGraphicObjectID(t14.graphic) === e25);
  }
  _updateUserVisibility(e25) {
    if (null == e25) return false;
    const t14 = e25.graphic, i14 = this._getGraphicObjectID(t14), r15 = t14.visible && !this.owner.suspended && this.stageLayer.visible && (null == i14 || !this._objectIdInvisibleSet.has(i14));
    return e25.setVisibilityFlag(A6.GRAPHIC, L5.USER, r15);
  }
  _whenGraphics3DGraphic(e25) {
    const t14 = this.graphics3DGraphics.get(e25.uid);
    if (t14) return Promise.resolve(t14);
    const i14 = this._whenGraphics3DGraphicRequests[e25.uid];
    if (i14) return i14.promise;
    const r15 = L();
    return this._whenGraphics3DGraphicRequests[e25.uid] = r15, r15.promise;
  }
  async _boundsForGraphics3DGraphic(e25, t14) {
    const i14 = this._viewSpatialReference, r15 = this.owner.view.renderSpatialReference, s18 = this.owner.view.basemapTerrain.spatialReference, a14 = (e26, t15, s19) => o2(e26, r15, t15, e26, i14, t15, s19), n10 = (e26, t15, r16) => o2(e26, s18, t15, e26, i14, t15, r16), o13 = this._viewElevationProvider ? { service: this._viewElevationProvider, useViewElevation: null != t14 && !!t14.useViewElevation, minDemResolution: null != t14 ? t14.minDemResolution : null, minDemResolutionForPoints: this.owner.view.resolution } : null, l16 = await e25.getProjectedBoundingBox(a14, n10, o13, t14 == null ? void 0 : t14.signal);
    if (!l16) return null;
    const h10 = l16.boundingBox;
    if (l16.requiresDrapedElevation) {
      const e26 = this.symbolCreationContext.elevationProvider;
      if (e26) {
        p3(h10, ze);
        const t15 = e26.getElevation(ze[0], ze[1], 0, i14, "ground") ?? 0;
        h10[2] = Math.min(h10[2], t15), h10[5] = Math.max(h10[5], t15);
      }
    }
    return { boundingBox: h10, screenSpaceObjects: l16.screenSpaceObjects };
  }
  async whenGraphicBounds(e25, t14) {
    var _a;
    await w2(() => {
      var _a2;
      return (_a2 = this.owner) == null ? void 0 : _a2.loadedGraphics;
    });
    const i14 = (_a = this.owner.layer) == null ? void 0 : _a.objectIdField, s18 = this.owner.loadedGraphics.find((t15) => t15 === e25 || null != i14 && null != t15.attributes && e25.attributes && t15.attributes[i14] === e25.attributes[i14]);
    if (!s18) throw new s("internal:graphic-not-part-of-view", "Graphic is not part of this view");
    const a14 = await this._whenGraphics3DGraphic(s18);
    return this._boundsForGraphics3DGraphic(a14, t14);
  }
  computeAttachmentOrigin(e25, t14) {
    const i14 = this.graphics3DGraphics.get(e25.uid);
    if (!i14) return null;
    const r15 = i14.computeAttachmentOrigin();
    if (0 === r15.render.num && 0 === r15.draped.num) return null;
    o4(qe, 0, 0, 0);
    let s18 = 0;
    if (r15.render.num > 0) {
      if (!n7(r15.render.origin, this.symbolCreationContext.renderCoordsHelper.spatialReference, Ye, t14)) return null;
      u5(qe, qe, Ye), s18++;
    }
    if (r15.draped.num > 0) {
      const [e26, i15] = r15.draped.origin, a14 = this._viewElevationProvider.getElevation(e26, i15, "ground") ?? 0;
      if (o4(Ye, e26, i15, a14), !n7(Ye, this._viewElevationProvider.spatialReference, Ye, t14)) return null;
      u5(qe, qe, Ye), s18++;
    }
    return s18 > 1 && g4(qe, qe, 1 / s18), new j({ x: qe[0], y: qe[1], z: qe[2], spatialReference: t14 });
  }
  getSymbolLayerSize(e25, t14) {
    const i14 = this._symbols.get(e25.id);
    if (null == i14) throw new s("internal:symbol-not-part-of-view", "Symbol is not part of this view");
    const s18 = e25.symbolLayers.indexOf(t14);
    if (-1 === s18) throw new s("internal:missing-symbol-layer", "Symbol layer is not in symbol");
    const a14 = i14.getSymbolLayerSize(s18);
    if (null == a14) throw new s("internal:missing-size", "Symbol layer has no valid size");
    return a14;
  }
  _graphicsCollectionChanged(e25) {
    this._startCreateGraphics && (this.add(e25.added), this.remove(e25.removed));
  }
  graphicUpdateHandler(e25) {
    const t14 = e25.graphic.uid, i14 = this.graphics3DGraphics.get(t14);
    if (null != i14 || null != this._graphicsWithoutSymbol.get(t14)) switch (e25.property) {
      case "visible":
        this._graphicUpdateVisibleHandler(i14);
        break;
      case "geometry":
        this._graphicUpdateGeometryHandler(i14, e25);
        break;
      case "symbol":
        this._graphicUpdateSymbolHandler(i14, e25);
        break;
      case "attributes":
        break;
      case "origin-transform":
        this._graphicUpdateTransformHandler(i14, e25);
    }
  }
  _graphicUpdateGeometryHandler(e25, t14) {
    this._graphicUpdateGeometryOrTransformHandler(e25, t14, () => {
      var _a, _b;
      return !(null == t14.newValue || null == e25 || !e25.graphics3DSymbol.updateGeometry(e25, t14.newValue) || !(((_a = this._labeler) == null ? void 0 : _a.updateGraphicGeometry(e25)) ?? 1)) && ((_b = this._labeler) == null ? void 0 : _b.setDirty(), true);
    });
    const i14 = t14.graphic.geometry;
    null != i14 && this._expandComputedExtent(i14);
  }
  _graphicUpdateTransformHandler(e25, t14) {
    const i14 = t14.graphic.geometry;
    this._graphicUpdateGeometryOrTransformHandler(e25, t14, () => null != t14.newValue && null != e25 && null != i14 && e25.graphics3DSymbol.updateTransform(e25, i14.spatialReference, t14.newValue, t14.action));
  }
  _graphicUpdateGeometryOrTransformHandler(e25, t14, i14) {
    var _a;
    if (null != t14.graphic.geometry) if (null != e25) i14() || this._recreateGraphic(e25.graphic);
    else {
      const e26 = (_a = t14.graphic.symbol) == null ? void 0 : _a.id;
      if (e26) {
        const t15 = this._symbols.get(e26);
        if (null != t15 && t15.loadStatus === l9.LOADING) return;
      }
      this._recreateGraphic(t14.graphic);
    }
    else this._recreateGraphic(t14.graphic);
  }
  _graphicUpdateSymbolHandler(e25, t14) {
    const i14 = t14.graphic, r15 = null != e25 ? e25.graphics3DSymbol : null != t14.oldValue ? this._symbols.get(t14.oldValue.id) : null;
    if (null == r15 || null == t14.newValue) return void this._recreateGraphic(i14);
    const s18 = r15.symbol, a14 = this._getConvertedSymbol(t14.newValue);
    if (null != a14 && (a14.type !== s18.type || "web-style" === a14.type) || "web-style" === s18.type) return void this._recreateGraphic(i14);
    const n10 = this._graphicsBySymbol.get(s18.id);
    if (n10 && 1 !== n10.size) return void this._recreateGraphic(i14);
    const o13 = y2(s18, a14);
    if (null == o13) return void this._updateSymbolMapping(s18.id, a14);
    const l16 = { diff: o13, graphics3DGraphicPatches: [], symbolStatePatches: [] };
    if (r15.prepareSymbolPatch(l16), !d5(l16.diff)) return void this._recreateGraphic(i14);
    const h10 = this._getRenderingInfo(i14);
    if (null == h10) return void this._recreateGraphic(i14);
    const d14 = r15.extentPadding;
    for (const p13 of l16.symbolStatePatches) p13();
    if (d14 !== r15.extentPadding && this._recomputeExtentPadding(), null != e25) for (const p13 of l16.graphics3DGraphicPatches) p13(e25, h10);
    this._updateSymbolMapping(s18.id, a14);
  }
  _graphicUpdateVisibleHandler(e25) {
    var _a, _b;
    this._updateUserVisibility(e25) && ((_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty());
  }
  recreateGraphics(e25) {
    this._suspendSymbolCleanup = true, this.remove(e25), this.add(e25), this._suspendSymbolCleanup = false, this.effectiveUpdatePolicy === C4.SYNC && this._cleanupSymbols();
  }
  _recreateGraphic(e25) {
    this.recreateGraphics([e25]);
  }
  _beginGraphicUpdate(e25) {
    const t14 = this._graphicsUpdateId;
    return this._graphicsUpdateId++, this._graphicsWaitingForSymbol.set(e25.uid, t14), 1 === this._graphicsWaitingForSymbol.size && this.notifyChange("dataUpdating"), t14;
  }
  _endGraphicUpdate(e25, t14) {
    var _a;
    e25 && (t14 && ((_a = this._graphicStateTracking) == null ? void 0 : _a.updateGraphicError(e25, t14)), this._graphicsWaitingForSymbol.delete(e25.uid), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("dataUpdating")));
  }
  _recomputeExtentPadding() {
    let e25 = 0;
    this._symbols.forEach((t14) => {
      null != t14 && (e25 = Math.max(e25, t14.extentPadding));
    }), this._set("extentPadding", e25);
  }
  _expandComputedExtent(e25) {
    const t14 = ke, i14 = e25.spatialReference;
    v2(e25, t14);
    const r15 = this._viewSpatialReference, s18 = Te.tmpVec;
    if (s3(i14, r15) || t2(t14[0], t14[1], 0, i14, s18, r15) && (t14[0] = s18[0], t14[1] = s18[1], t2(t14[3], t14[4], 0, i14, s18, r15), t14[3] = s18[0], t14[4] = s18[1]), !(isFinite(t14[0]) && isFinite(t14[3]) && isFinite(t14[1]) && isFinite(t14[4]))) return;
    const a14 = this.computedExtent;
    let n10 = null;
    const o13 = isFinite(t14[2]) && isFinite(t14[5]), l16 = o13 && (null == (a14 == null ? void 0 : a14.zmin) || t14[2] < a14.zmin), h10 = o13 && (null == (a14 == null ? void 0 : a14.zmax) || t14[5] > a14.zmax);
    if (a14) {
      (t14[0] < a14.xmin || t14[1] < a14.ymin || t14[3] > a14.xmax || t14[4] > a14.ymax || l16 || h10) && (n10 = this._propertiesPool.get("computedExtent"), n10.xmin = Math.min(t14[0], a14.xmin), n10.ymin = Math.min(t14[1], a14.ymin), n10.xmax = Math.max(t14[3], a14.xmax), n10.ymax = Math.max(t14[4], a14.ymax), n10.spatialReference = r15);
    } else n10 = this._propertiesPool.get("computedExtent"), n10.xmin = t14[0], n10.ymin = t14[1], n10.xmax = t14[3], n10.ymax = t14[4], n10.spatialReference = r15;
    n10 && (l16 && (n10.zmin = t14[2]), h10 && (n10.zmax = t14[5]), this._set("computedExtent", n10));
  }
  _abortElevationInfoChange() {
    this._elevationInfoChangeAbortController && (this._elevationInfoChangeAbortController.abort(), this._elevationInfoChangeAbortController = null);
  }
  async elevationInfoChange() {
    var _a, _b;
    this._abortElevationInfoChange();
    const e25 = new AbortController();
    this._elevationInfoChangeAbortController = e25;
    const t14 = d8(this.layer.elevationInfo, this.elevationFeatureExpressionEnabled);
    this.symbolCreationContext.featureExpressionInfoContext = await a7(t14, this._viewSpatialReference, e25.signal, n2.getLogger(this)), s2(e25.signal), this._elevationInfoChangeAbortController = null, (_a = this._labeler) == null ? void 0 : _a.elevationInfoChange(), this.forEachGraphics3DSymbol((e26, t15, i14) => {
      e26.globalPropertyChanged("elevationInfo", t15) ? t15.forEach((e27) => {
        const t16 = e27.graphic, i15 = e27.labelLayers;
        for (const r15 of i15) {
          r15.graphics3DSymbolLayer.updateGraphicElevationContext(t16, r15);
        }
      }) : this._recreateSymbol(i14);
    }), this.updateStageLayerElevationProvider(), (_b = this._elevationAlignment) == null ? void 0 : _b.elevationInfoChange();
  }
  updateStageLayerElevationProvider() {
    this._stageLayerElevationProvider ? (this.layer.elevationInfo && "relative-to-scene" === this.layer.elevationInfo.mode || 0 === this._numberOfGraphicsProvidingElevation) && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = r2(this._stageLayerElevationProvider)) : (!this.layer.elevationInfo || this.layer.elevationInfo && "relative-to-scene" !== this.layer.elevationInfo.mode) && this._numberOfGraphicsProvidingElevation > 0 && (this._stageLayerElevationProvider = new y5({ layer: this.layer, stageLayer: this.stageLayer, view: this.owner.view }), this.owner.view.elevationProvider.register("scene", this._stageLayerElevationProvider));
  }
  _clearSymbolsAndGraphics() {
    var _a, _b, _c, _d;
    this.clear(), null != this._filterVisibility && this._filterVisibility.clear(), (_a = this._labeler) == null ? void 0 : _a.reset(), (_b = this._deconflictor) == null ? void 0 : _b.clear(), (_c = this._elevationAlignment) == null ? void 0 : _c.clear(), (_d = this.stageLayer) == null ? void 0 : _d.invalidateSpatialQueryAccelerator(), this._stageLayerElevationProvider && (this.owner.view.elevationProvider.unregister(this._stageLayerElevationProvider), this._stageLayerElevationProvider = r2(this._stageLayerElevationProvider));
  }
  startCreateGraphics() {
    this._startCreateGraphics = true, this.recreateAllGraphics();
  }
  recreateAllGraphics() {
    this._recreateAllGraphics(false);
  }
  recreateAllGraphicsAndSymbols() {
    this._recreateAllGraphics(true);
  }
  _recreateAllGraphics(e25 = false) {
    if (!this._startCreateGraphics) return;
    const { loadedGraphics: t14, view: i14 } = this.owner, r15 = i14.basemapTerrain.tilingScheme && (t14 == null ? void 0 : t14.length) ? t14.toArray() : null;
    !e25 && r15 || this._clearSymbolsAndGraphics(), this.symbolCreationContext.screenSizePerspectiveEnabled = this.owner.view.screenSizePerspectiveEnabled && !!this.layer.screenSizePerspectiveEnabled, this.symbolCreationContext.slicePlaneEnabled = !!this.owner.slicePlaneEnabled, this._set("computedExtent", null), r15 && (e25 ? this.add(r15) : this.recreateGraphics(r15));
  }
  _recreateSymbol(e25) {
    const t14 = this._graphicsBySymbol.get(e25), i14 = [];
    t14 && (t14.forEach((e26, t15) => {
      var _a;
      const r16 = e26.usedMemory;
      this._conditionalRemove(e26, t15), (_a = this._spatialIndex) == null ? void 0 : _a.remove(e26), i14.push(e26.graphic), e26.destroy(), this._removeGraphics3DGraphic(t15, r16), this._updateLayerVisibility(), this._featureStore.events.emit("changed");
    }), this._graphicsBySymbol.set(e25, /* @__PURE__ */ new Map()));
    const r15 = this._symbols.get(e25);
    u(r15), this._symbols.delete(e25), this._symbolMaterials = null, this.add(i14);
  }
  _recreateGraphicsForSymbol(e25) {
    const t14 = this._graphicsBySymbol.get(e25);
    if (t14) {
      const e26 = [];
      t14.forEach((t15) => e26.push(t15.graphic)), this.recreateGraphics(e26);
    }
  }
  _conditionalRemove(e25, t14) {
    var _a, _b, _c;
    this._graphicsDrapedUids.delete(t14), (_a = this._objectStates) == null ? void 0 : _a.removeGraphic(e25), (_b = this._labeler) == null ? void 0 : _b.removeGraphic(e25), (_c = this._deconflictor) == null ? void 0 : _c.removeGraphic(e25), null != this._graphicStateTracking && this._graphicStateTracking.removeGraphic(e25);
  }
  add(e25) {
    var _a;
    e25 && 0 !== e25.length && (((_a = this.owner.view.basemapTerrain) == null ? void 0 : _a.tilingScheme) ? (this._updatePolicyForGraphics(e25) === C4.ASYNC ? this._addDelayed(e25) : this._addImmediate(e25), this.notifyChange("dataUpdating")) : n2.getLogger(this).error("#add()", "Cannot add graphics before terrain surface has been initialized"));
  }
  _updatePolicyForGraphics(e25) {
    if (this.effectiveUpdatePolicy === C4.SYNC && ("mesh" === this.layer.geometryType || null == this.layer.geometryType)) {
      for (const t14 of e25) if (null != t14.geometry && "mesh" === t14.geometry.type && !t14.geometry.loaded) return C4.ASYNC;
    }
    return this.effectiveUpdatePolicy;
  }
  _addImmediate(e25) {
    var _a, _b;
    this._geometryWarningLogged = false, this._symbolWarningLogged = false;
    for (const t14 of e25) this._addGraphic(t14, this._getRenderingInfo(t14, n2.getLogger(this)), C4.SYNC);
    this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _addDelayed(e25) {
    var _a;
    for (const t14 of e25) {
      const e26 = t14.uid;
      let i14 = this._pendingUpdates.get(e26);
      i14 ? i14.add ? i14.state !== He.NEW && ((_a = i14.abortController) == null ? void 0 : _a.abort()) : this._pendingAdds++ : (i14 = this._pendingUpdatesPool.pushNew(), this._pendingAdds++, this._pendingUpdates.set(e26, i14)), i14.add = t14;
    }
    this.notifyChange("running"), this.notifyChange("updatingRemaining"), this.notifyChange("dataUpdating");
  }
  remove(e25) {
    this.effectiveUpdatePolicy === C4.ASYNC ? this._removeDelayed(e25) : this._removeImmediate(e25), this.notifyChange("dataUpdating");
  }
  _removeImmediate(e25) {
    var _a, _b;
    for (const t14 of e25) this._removeGraphic(t14);
    this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _removeDelayed(e25) {
    var _a;
    for (const t14 of e25) {
      const e26 = t14.uid, i14 = this._pendingUpdates.get(e26);
      if (i14) i14.add && (i14.remove ? i14.add = null : this._pendingUpdates.delete(e26), i14.state === He.LOADING && ((_a = i14.abortController) == null ? void 0 : _a.abort()), this._pendingAdds--);
      else {
        const i15 = this._pendingUpdatesPool.pushNew();
        i15.remove = t14, this._pendingUpdates.set(e26, i15), this._pendingRemoves++, this._applyPendingRemovesFirst = true;
      }
    }
    0 === this._pendingUpdates.size && this._finishPendingUpdates(), this.notifyChange("running"), this.notifyChange("updatingRemaining"), this.notifyChange("dataUpdating");
  }
  _finishPendingUpdates() {
    this._pendingUpdatesPool.clear(), this._cleanupSymbols(), (this._pendingAdds || this._pendingRemoves) && n2.getLogger(this).warn("pendingAdds/Removes in inconsistent state!"), this._pendingAdds = 0, this._pendingRemoves = 0, this._applyPendingRemovesFirst = false;
  }
  _applyPendingUpdates(e25) {
    var _a;
    if (this._geometryWarningLogged = false, this._symbolWarningLogged = false, 0 === this._pendingUpdates.size && ((_a = this._spatialIndex) == null ? void 0 : _a.updating)) return this._spatialIndex.update(), void e25.madeProgress();
    if (this._applyPendingRemovesFirst) {
      this._applyPendingRemovesFirst = false;
      for (const [t14, i14] of this._pendingUpdates) {
        if (e25.done) {
          this._applyPendingRemovesFirst = true;
          break;
        }
        if (i14.remove && !i14.add && (this._pendingRemoves--, e25.madeProgress(), this._removeGraphic(i14.remove), i14.remove = null, this._pendingUpdates.delete(t14), 0 === this._pendingRemoves)) break;
      }
    }
    for (const [t14, i14] of this._pendingUpdates) {
      if (e25.done) break;
      i14.add && i14.state === He.NEW && this._processPendingUpdateNew(i14);
      let r15 = this.effectiveUpdatePolicy;
      if (!i14.remove || i14.add && i14.state !== He.READY || (this._pendingRemoves--, e25.madeProgress(), this._removeGraphic(i14.remove), i14.remove = null, r15 = C4.SYNC), i14.add) switch (i14.state) {
        case He.READY:
          this._addGraphic(i14.add, i14.renderingInfo, r15), i14.add = null, this._pendingAdds--, e25.madeProgress();
          break;
        case He.REJECTED:
          i14.add = null, this._pendingAdds--;
        case He.LOADING:
      }
      null == i14.remove && null == i14.add && this._pendingUpdates.delete(t14);
    }
    0 === this._pendingUpdates.size && (this._finishPendingUpdates(), this.notifyChange("running"), this.notifyChange("dataUpdating"));
  }
  _processPendingUpdateNew(e25) {
    if (!e25.add) return void (e25.state = He.READY);
    const t14 = e25.add.geometry;
    null == t14 || "mesh" !== t14.type || t14.loaded ? this._processPendingUpdateNewRenderingInfo(e25) : this._processPendingUpdateNewMesh(e25, t14);
  }
  async _processPendingUpdateNewMesh(e25, t14) {
    e25.state = He.LOADING, e25.abortController = new AbortController();
    const i14 = e25.abortController.signal;
    try {
      await t14.load({ signal: i14 });
    } catch (r15) {
      return this._processPendingUpdateNewError(e25, r15);
    }
    e25.abortController = null, this._processPendingUpdateNewRenderingInfo(e25);
  }
  _processPendingUpdateNewError(e25, t14) {
    e25.abortController = null, b(t14) ? e25.state = He.NEW : e25.state = He.REJECTED;
  }
  async _processPendingUpdateNewRenderingInfo(e25) {
    if (null == this.layer.renderer || "dictionary" !== this.layer.renderer.type) return e25.renderingInfo = this._getRenderingInfo(e25.add, n2.getLogger(this)), void (e25.state = He.READY);
    e25.state = He.LOADING, e25.abortController = new AbortController();
    let t14 = null;
    try {
      t14 = await this._getRenderingInfoAsync(e25.add, { signal: e25.abortController.signal });
    } catch (i14) {
      return e25.abortController = null, void (b(i14) ? e25.state = He.NEW : e25.state = He.REJECTED);
    }
    null == (t14 == null ? void 0 : t14.symbol) ? (this._symbolWarningLogged || (this._symbolWarningLogged = true, n2.getLogger(this).warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), e25.renderingInfo = null) : e25.renderingInfo = t14, e25.state = He.READY;
  }
  _addGraphic(e25, t14, i14) {
    var _a;
    if (this._graphicsWithoutSymbol.set(e25.uid, e25), null == (t14 == null ? void 0 : t14.symbol) || !b3(e25)) return;
    const r15 = this.stage.renderView.olidRenderHelper;
    if (r15 && this.setUidToIdOnAdd) {
      const t15 = c(this.owner.view.map, this.layer.uid);
      r15.setUidToObjectAndLayerId(e25.objectId, e25.uid, this.layer.id, this.layer.uid, !!this.layer.popupEnabled && !t15 && u9(this.layer, (_a = this.owner.view.popup) == null ? void 0 : _a.defaultPopupTemplateEnabled));
    }
    const s18 = t14.symbol, a14 = this.getOrCreateGraphics3DSymbol(s18, t14.renderer);
    if (null == a14) return;
    this._expandComputedExtent(e25.geometry);
    const n10 = this._beginGraphicUpdate(e25), o13 = new r10(e25, t14, this.layer);
    let l16 = false;
    const h10 = (e26) => {
      e26 === a14.symbol.id && (l16 = true);
    };
    this._whenSymbolRemoved.push(h10);
    const d14 = () => {
      var _a2;
      if (--this._loadingSymbols, this.destroyed) return;
      this._whenSymbolRemoved.removeUnordered(h10);
      if (this._graphicsWaitingForSymbol.get(e25.uid) !== n10 || l16 || a14.destroyed || this.graphicSymbolSupported && e25.symbol && e25.symbol.id !== a14.symbol.id) --a14.referenced, this._cleanupSymbols();
      else {
        const t15 = this._createGraphics3DGraphic(a14, o13);
        this._spatialIndex && null != t15 && this._spatialIndex.add(t15), --a14.referenced, this._endGraphicUpdate(e25);
      }
      this._featureStore.events.emit("changed"), (_a2 = this._labeler) == null ? void 0 : _a2.setDirty();
    }, p13 = (t15) => {
      --this._loadingSymbols, this.destroyed || (this._whenSymbolRemoved.removeUnordered(h10), l16 || (b(t15) ? this.add([e25]) : a14.destroyed || this._endGraphicUpdate(e25, t15)));
    };
    ++this._loadingSymbols, i14 === C4.ASYNC ? a14.load(() => this._dataUpdateQueue.push(d14, null).catch(d), (e26) => this._dataUpdateQueue.push(() => p13(e26), null).catch(d)) : a14.load(d14, p13);
  }
  _removeGraphic(e25) {
    var _a, _b;
    const t14 = e25.uid, i14 = this.graphics3DGraphics.get(t14);
    if (i14) {
      i14.graphics3DSymbol.onRemoveGraphic(i14);
      const e26 = i14.usedMemory, r15 = i14.isElevationSource;
      this._conditionalRemove(i14, t14), (_a = this._spatialIndex) == null ? void 0 : _a.remove(i14);
      const s18 = i14.graphics3DSymbol.symbol.id;
      (_b = this._graphicsBySymbol.get(s18)) == null ? void 0 : _b.delete(t14), this._graphicsWithoutSymbol.delete(t14), this._removeGraphics3DGraphic(t14, e26, r15), i14.destroy(), this._featureStore.events.emit("changed");
    } else this._graphicsWithoutSymbol.delete(t14), this._graphicsWaitingForSymbol.delete(t14), 0 === this._graphicsWaitingForSymbol.size && (this._cleanupSymbols(), this.notifyChange("dataUpdating"));
  }
  _hasLabelingContext(e25) {
    if (e25 instanceof b7 || e25 instanceof m4) {
      const t14 = this.symbolCreationContext.layer;
      return !!t14.labelingInfo && t14.labelingInfo.some((t15) => t15.symbol === e25);
    }
    return false;
  }
  _hasValidSymbolCreationContext(e25) {
    return !(e25 instanceof b7 && !this._hasLabelingContext(e25)) || (n2.getLogger(this).error("LabelSymbol3D is only valid as part of a LabelClass. Using LabelSymbol3D as a renderer symbol is not supported."), false);
  }
  _getRenderingInfo(e25, t14) {
    const i14 = e25.geometry;
    if (null == i14) return t14 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, t14.warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!L3(i14.spatialReference, this._viewSpatialReference)) return t14 && !this._geometryWarningLogged && (this._geometryWarningLogged = true, t14.warn(`Graphic in layer ${this.layer.id} has incompatible spatial reference and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e25.symbol) return t14 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, t14.warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const r15 = this.rendererHasGeometryOperations ? c4(e25, this.layer) : e25;
    let s18;
    if (this.owner.getRenderingInfo && (this.getRenderingInfoWithoutRenderer || null != this.currentRenderer)) s18 = this.owner.getRenderingInfo(r15, this.currentRenderer, this._arcadeOnDemand);
    else {
      const e26 = r15.symbol || d6(r15.geometry);
      s18 = new r6(null, e26);
    }
    return null == (s18 == null ? void 0 : s18.symbol) ? (t14 && !this._symbolWarningLogged && (this._symbolWarningLogged = true, t14.warn(`Graphic in layer ${this.layer.id} has no symbol and will not render`)), null) : s18;
  }
  _getRenderingInfoAsync(e25, t14) {
    if (null == e25.geometry) return this._geometryWarningLogged || (this._geometryWarningLogged = true, n2.getLogger(this).warn(`Graphic in layer ${this.layer.id} has no geometry and will not render`)), null;
    if (!this.graphicSymbolSupported && null != e25.symbol) return this._symbolWarningLogged || (this._symbolWarningLogged = true, n2.getLogger(this).warn(`Graphic in layer ${this.layer.id} is not allowed to have a symbol, use a renderer instead`)), null;
    const i14 = this.rendererHasGeometryOperations ? c4(e25, this.layer) : e25;
    return this.owner.getRenderingInfoAsync(i14, this.currentRenderer, this._arcadeOnDemand, t14);
  }
  _createGraphics3DSymbol(e25, t14) {
    if (!this._hasValidSymbolCreationContext(e25)) return null;
    const i14 = this._getConvertedSymbol(e25);
    if (!i14) return null;
    let r15;
    if (null != t14 && "backgroundFillSymbol" in t14 && t14.backgroundFillSymbol) {
      const e26 = u8(t14.backgroundFillSymbol, { ignoreDrivers: true });
      null != e26.symbol && (r15 = e26.symbol.symbolLayers);
    }
    const s18 = t10(i14, this.symbolCreationContext, r15);
    return s18.load(() => {
      const e26 = s18.extentPadding;
      e26 > this.extentPadding && this._set("extentPadding", e26), this.notifyChange("averageSymbolComplexity");
    }, () => {
    }), s18;
  }
  getOrCreateGraphics3DSymbol(e25, t14) {
    let i14 = this._symbols.get(e25.id);
    if (void 0 === i14) {
      const r15 = this._unusedSymbolsCache.pop(e25.id);
      i14 = null != r15 ? r15 : e25 instanceof u7 ? new l15(e25, (e26) => this._dataUpdateQueue.push(e26, null), (e26) => this._createGraphics3DSymbol(e26, t14)) : this._createGraphics3DSymbol(e25, t14), this._symbols.set(e25.id, i14), this._symbolMaterials = null;
    }
    return null != i14 && ++i14.referenced, i14;
  }
  trackGraphicState(e25) {
    return null == this._graphicStateTracking && (this._graphicStateTracking = new s15(this)), this._graphicStateTracking.add(e25);
  }
  _addGraphics3DGraphic(e25) {
    this._usedMemory += e25.usedMemory, this.graphics3DGraphics.set(e25.graphic.uid, e25), this._numberOfGraphics++, e25.isElevationSource && (this._numberOfGraphicsProvidingElevation++, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _removeGraphics3DGraphic(e25, t14, i14 = false) {
    this._usedMemory -= t14, this.graphics3DGraphics.delete(e25), this._numberOfGraphics--, i14 && (this._numberOfGraphicsProvidingElevation--, this.updateStageLayerElevationProvider()), this._updateLayerVisibility();
  }
  _createGraphics3DGraphic(e25, t14) {
    var _a, _b, _c;
    const i14 = t14.graphic;
    if (this._graphicsWithoutSymbol.delete(i14.uid), !this._symbols.has(e25.symbol.id)) return this.add([i14]), null;
    if (this.graphics3DGraphics.has(i14.uid)) return null;
    const r15 = e25.createGraphics3DGraphic(t14);
    if (null == r15) return null;
    this._addGraphics3DGraphic(r15);
    const s18 = e25.symbol.id;
    this._graphicsBySymbol.has(s18) || this._graphicsBySymbol.set(s18, /* @__PURE__ */ new Map()), this._graphicsBySymbol.get(s18).set(i14.uid, r15);
    if (r15.isDraped && this._graphicsDrapedUids.add(i14.uid), r15.centroid = null, null != i14.geometry && "point" !== i14.geometry.type && (r15.centroid = b6(i14.geometry, this._viewSpatialReference)), this._updateUserVisibility(r15), null != this._scaleVisibility && this._scaleVisibility.updateVisibility(r15), null != this._filterVisibility) {
      const { defaultVisibility: e26 } = this._filterVisibility;
      r15.setVisibilityFlag(A6.GRAPHIC, L5.FILTER, e26), e26 || this._filterVisibility.reapply();
    }
    (_a = this._deconflictor) == null ? void 0 : _a.addGraphic(r15), (_b = this._labeler) == null ? void 0 : _b.addGraphic(r15), (_c = this._objectStates) == null ? void 0 : _c.addGraphic(r15), r15.initialize(this.stageLayer), null != this._graphicStateTracking && this._graphicStateTracking.addGraphic(r15);
    const a14 = this._whenGraphics3DGraphicRequests[i14.uid];
    return a14 && (delete this._whenGraphics3DGraphicRequests[i14.uid], a14.resolve(r15)), this._symbolMaterials = null, r15;
  }
  async rendererChange(e25) {
    if (this._rendererChangeAbortController = e(this._rendererChangeAbortController), e25 !== this.currentRenderer) if (this._validateRenderer(e25), null == e25 && this._currentRendererChange(null, false), s11(e25)) if (e25 == null ? void 0 : e25.arcadeRequired) {
      const t14 = new AbortController();
      this._rendererChangeAbortController = t14;
      const { arcadeUtils: i14 } = await this._ensureArcade();
      s2(t14);
      const r15 = i14.hasGeometryOperations(e25);
      r15 && (await i14.enableGeometryOperations(), s2(t14)), this.effectiveUpdatePolicy === C4.ASYNC ? await this._updateQueue.push(() => this._currentRendererChange(e25, r15), t14.signal) : this._currentRendererChange(e25, r15), this._rendererChangeAbortController = null;
    } else if (this.effectiveUpdatePolicy === C4.ASYNC) {
      const t14 = new AbortController();
      this._rendererChangeAbortController = t14, await this._updateQueue.push(() => this._currentRendererChange(e25, false), t14.signal), this._rendererChangeAbortController = null;
    } else this._currentRendererChange(e25, false);
    else this._currentRendererChange(e25, false);
  }
  async _ensureArcade() {
    return null == this._arcadeOnDemand ? (this._arcadeOnDemand = await o8(), this._arcadeOnDemand) : this._arcadeOnDemand;
  }
  _currentRendererChange(e25, t14) {
    var _a;
    this.currentRenderer = e25, this.rendererHasGeometryOperations = t14, this.symbolCreationContext.arcade = this._arcadeOnDemand;
    const i14 = this.symbolCreationContext.renderer;
    if (e25 === i14) return;
    if (this._symbolConversionCache.clear(), this._unusedSymbolsCache.clear(), null == e25) return this.symbolCreationContext.renderer = null, void this.recreateAllGraphicsAndSymbols();
    const r15 = y2(i14, e25);
    this._updateUnchangedSymbolMappings(r15, e25, i14), this.symbolCreationContext.renderer = e25, null != r15 && ("complete" === r15.type ? this.recreateAllGraphicsAndSymbols() : "partial" === r15.type && (this._applyRendererDiff(r15, e25, i14) ? (_a = this._labeler) == null ? void 0 : _a.reset() : this.recreateAllGraphicsAndSymbols()), this.notifyChange("averageSymbolComplexity"));
  }
  _diffHasSymbolChange(e25) {
    for (const t14 in e25.diff) switch (t14) {
      case "visualVariables":
      case "defaultSymbol":
      case "uniqueValueInfos":
        break;
      case "uniqueValueGroups":
      case "authoringInfo":
      case "fieldDelimiter":
        delete e25.diff[t14];
        break;
      default:
        return true;
    }
    return false;
  }
  _applySymbolSetDiff(e25, t14, i14) {
    var _a, _b;
    e25 = e25 || [], t14 = t14 || [];
    const r15 = [];
    for (const s18 of t14) {
      const t15 = this._graphicsBySymbol.get(s18.id);
      t15 && t15.forEach((a14, n10) => {
        const o13 = a14.graphic, l16 = this.layer instanceof f2 ? this.layer : null, h10 = this._arcadeOnDemand;
        if (s18 === i14.defaultSymbol && i14.getSymbol(c4(o13, l16), { arcade: h10 }) === i14.defaultSymbol) return;
        const d14 = a14.usedMemory;
        e25.length || i14.defaultSymbol ? r15.push(o13) : this._graphicsWithoutSymbol.set(n10, o13);
        const p13 = this.graphics3DGraphics.get(n10);
        this._conditionalRemove(p13, n10), a14.destroy(), t15.delete(n10), this._removeGraphics3DGraphic(n10, d14), this._updateLayerVisibility();
      }), this._whenSymbolRemoved.forAll((e26) => e26(s18.id));
    }
    (e25.length || r15.length) && (this._graphicsWithoutSymbol.forEach((e26) => r15.push(e26)), this._graphicsWithoutSymbol.clear(), this.add(r15)), this._cleanupSymbols(), (_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty();
  }
  _applyUniqueValueRendererDiff(e25, t14, r15) {
    const s18 = e25.diff.defaultSymbol, a14 = e25.diff.uniqueValueInfos;
    if (s18 || a14) {
      const n10 = a14 ? a14.added.map((e26) => e26.symbol).filter(G) : [], o13 = a14 ? a14.removed.map((e26) => e26.symbol).filter(G) : [];
      if (a14) for (let e26 = 0; e26 < a14.changed.length; e26++) n10.push(a14.changed[e26].newValue.symbol), o13.push(a14.changed[e26].oldValue.symbol);
      return s18 ? (r15.defaultSymbol && o13.push(r15.defaultSymbol), t14.defaultSymbol && n10.push(t14.defaultSymbol)) : r15.defaultSymbol && n10.length && o13.push(t14.defaultSymbol), this._applySymbolSetDiff(n10, o13, t14), delete e25.diff.defaultSymbol, delete e25.diff.uniqueValueInfos, true;
    }
    return false;
  }
  _calculateUnchangedSymbolMapping(e25, t14, i14) {
    var _a;
    if ("unique-value" !== (t14 == null ? void 0 : t14.type) || "unique-value" !== (i14 == null ? void 0 : i14.type) || null != e25 && "partial" !== e25.type) return [];
    const r15 = (e26) => null != e26 ? e26.id : null, s18 = e25 && e25.diff, a14 = s18 == null ? void 0 : s18.defaultSymbol, n10 = s18 && s18.uniqueValueInfos;
    let o13;
    if (n10) o13 = n10.unchanged.map((e26) => ({ oldId: r15(e26.oldValue.symbol), newId: r15(e26.newValue.symbol) }));
    else {
      o13 = [];
      for (const e26 of i14.uniqueValueInfos ?? []) {
        const i15 = r15(e26.symbol), s19 = (_a = t14.uniqueValueInfos) == null ? void 0 : _a.find((t15) => t15.value === e26.value);
        s19 && i15 !== r15(s19.symbol) && o13.push({ oldId: i15, newId: r15(s19.symbol) });
      }
    }
    return !a14 && i14.defaultSymbol && o13.push({ oldId: r15(i14.defaultSymbol), newId: r15(t14.defaultSymbol) }), o13;
  }
  _updateSymbolMapping(e25, t14) {
    const i14 = null != t14 && t14 ? "string" == typeof t14 ? t14 : t14.id : null;
    if (null == e25 || e25 === i14) return;
    const r15 = this._graphicsBySymbol.get(e25);
    this._graphicsBySymbol.delete(e25), void 0 !== r15 && this._graphicsBySymbol.set(i14, r15);
    const s18 = this._symbols.get(e25);
    if (void 0 !== s18 && (this._symbols.delete(e25), this._symbols.set(i14, s18), this._symbolMaterials = null, null != s18)) {
      const e26 = "string" == typeof t14 ? null : t14;
      null != e26 ? s18.symbol = e26 : s18.symbol.id = i14;
    }
  }
  _updateUnchangedSymbolMappings(e25, t14, i14) {
    const r15 = this._calculateUnchangedSymbolMapping(e25, t14, i14);
    for (const { oldId: s18, newId: a14 } of r15) this._updateSymbolMapping(s18, a14);
  }
  _applyRendererDiff(e25, t14, i14) {
    if (this._diffHasSymbolChange(e25)) return false;
    if (t14 instanceof A5 && i14 instanceof A5 && this._applyUniqueValueRendererDiff(e25, t14, i14) && 0 === Object.keys(e25.diff).length) return true;
    for (const r15 of this._graphicsBySymbol.keys()) {
      const i15 = this._symbols.get(r15);
      if (null != i15) switch (i15.applyRendererDiff(e25, t14)) {
        case e18.RecreateSymbol:
          this._recreateSymbol(r15);
          break;
        case e18.RecreateGraphics:
          this._recreateGraphicsForSymbol(r15);
        case e18.FastUpdate:
      }
    }
    return true;
  }
  opacityChange() {
    this._updateStageLayerVisibility(), this.forEachGraphics3DSymbol((e25, t14) => e25.globalPropertyChanged("opacity", t14));
  }
  _slicePlaneEnabledChange(e25) {
    var _a, _b;
    e25 !== this.symbolCreationContext.slicePlaneEnabled && (this.symbolCreationContext.slicePlaneEnabled = e25, this.stageLayer.sliceable = e25, this.forEachGraphics3DSymbol((e26, t14) => e26.globalPropertyChanged("slicePlaneEnabled", t14)), (_a = this._deconflictor) == null ? void 0 : _a.slicePlaneEnabledChange(), (_b = this._labeler) == null ? void 0 : _b.slicePlaneEnabledChange());
  }
  _physicalBasedRenderingChange(e25) {
    this.symbolCreationContext.physicalBasedRenderingEnabled = e25, this.forEachGraphics3DSymbol((e26, t14, i14) => {
      e26.globalPropertyChanged("physicalBasedRenderingEnabled", t14) || this._recreateSymbol(i14);
    });
  }
  _skipHighSymbolLoDsChange(e25) {
    this.symbolCreationContext.skipHighSymbolLods = e25, this.forEachGraphics3DSymbol((e26, t14, i14) => {
      e26.globalPropertyChanged("skipHighSymbolLods", t14) || this._recreateSymbol(i14);
    });
  }
  _pixelRatioChange() {
    this.forEachGraphics3DSymbol((e25, t14, i14) => {
      e25.globalPropertyChanged("pixelRatio", t14) || this._recreateSymbol(i14);
    });
  }
  _signalUpdatingDuringAsyncLoadedGraphicsChange() {
    this._updatingPendingLoadedGraphicsChange && this._updatingPendingLoadedGraphicsChange.remove(), this._updatingPendingLoadedGraphicsChange = A(() => {
      this._updatingPendingLoadedGraphicsChange = null;
    });
  }
  setClippingExtent(e25, t14) {
    const i14 = this.symbolCreationContext.clippingExtent, r15 = u2();
    return u16(e25, r15, t14) ? this.symbolCreationContext.clippingExtent = B(u3(), r15) : this.symbolCreationContext.clippingExtent = null, !C2(this.symbolCreationContext.clippingExtent, i14);
  }
  modifyGraphics3DGraphicVisibilities(e25) {
    var _a, _b;
    if (this.destroyed) return;
    let t14 = false;
    this.graphics3DGraphics.forEach((i14) => {
      e25(i14) && (t14 = true);
    }), t14 && ((_a = this._labeler) == null ? void 0 : _a.setDirty(), (_b = this._deconflictor) == null ? void 0 : _b.setDirty());
  }
  forEachGraphics3DSymbol(e25) {
    for (const [t14, i14] of this._symbols) {
      if (null == i14) return;
      e25(i14, this._graphicsBySymbol.get(t14) || Qe, t14);
    }
  }
  updateGraphicsVisibilities() {
    null != this._filterVisibility && this._filterVisibility.reapply(), this.modifyGraphics3DGraphicVisibilities((e25) => {
      const t14 = this._updateUserVisibility(e25), i14 = null != this._scaleVisibility && this._scaleVisibility.updateVisibility(e25);
      return t14 || i14;
    });
  }
  _hideAllGraphics() {
    this.modifyGraphics3DGraphicVisibilities((e25) => e25.setVisibilityFlag(A6.GRAPHIC, L5.USER, false));
  }
  _validateRenderer(e25) {
    var _a;
    const t14 = () => `'${this.layer.title ? `${this.layer.title}, ` : ""}id:${this.layer.id}'`, i14 = t8(e25, { geometryType: (_a = this.layer) == null ? void 0 : _a.geometryType, logWarning: (e26, i15) => n2.getLogger(this).warn(e26, `Symbology conversion for layer ${t14()}: ${i15}`) });
    if (i14) {
      const e26 = `Renderer for layer ${t14} is not supported in a SceneView`;
      n2.getLogger(this).warn(e26, i14.message);
    }
  }
  _cleanupSymbols() {
    if (this._graphicsWaitingForSymbol.size > 0 || this._suspendSymbolCleanup) return;
    let e25 = false;
    this._symbols.forEach((t14, i14) => {
      if (null == t14 || t14.referenced > 0) return;
      const r15 = this._graphicsBySymbol.get(i14);
      r15 && 0 !== r15.size || (this._graphicsBySymbol.delete(i14), this._symbols.delete(i14), this._symbolMaterials = null, this._unusedSymbolsCache.put(i14, t14, e5), e25 = true);
    }), e25 && (this._recomputeExtentPadding(), this.notifyChange("averageSymbolComplexity"));
  }
  get test() {
  }
  get performanceInfo() {
    return new s14(this.graphics3DGraphics.size, this._graphicsWithoutSymbol.size, this._pendingUpdates.size);
  }
};
var He;
We.tmpVec = n3(), r([m({ readOnly: true })], We.prototype, "computedExtent", void 0), r([m()], We.prototype, "currentRenderer", void 0), r([m()], We.prototype, "rendererHasGeometryOperations", void 0), r([m()], We.prototype, "_frameTaskHandle", void 0), r([m()], We.prototype, "_dataUpdateQueue", void 0), r([m()], We.prototype, "_updateQueue", void 0), r([m({ readOnly: true })], We.prototype, "_viewSpatialReference", null), r([m()], We.prototype, "_rendererChangeAbortController", void 0), r([m()], We.prototype, "_elevationInfoChangeAbortController", void 0), r([m()], We.prototype, "_initializeAbortController", void 0), r([m()], We.prototype, "_elevationAlignment", void 0), r([m()], We.prototype, "_scaleVisibility", void 0), r([m()], We.prototype, "_filterVisibility", void 0), r([m()], We.prototype, "_initializePromise", void 0), r([m()], We.prototype, "_spatialIndex", void 0), r([m({ readOnly: true })], We.prototype, "extentPadding", void 0), r([m()], We.prototype, "_updatingPendingLoadedGraphicsChange", void 0), r([m()], We.prototype, "_featureStore", void 0), r([m()], We.prototype, "_objectStates", void 0), r([m()], We.prototype, "_loadingSymbols", void 0), r([m()], We.prototype, "preferredUpdatePolicy", void 0), r([m()], We.prototype, "_forcedUpdatePolicy", void 0), r([m({ readOnly: true })], We.prototype, "effectiveUpdatePolicy", null), r([m({ constructOnly: true })], We.prototype, "elevationFeatureExpressionEnabled", void 0), r([m({ constructOnly: true })], We.prototype, "owner", void 0), r([m({ constructOnly: true })], We.prototype, "layer", void 0), r([m({ constructOnly: true })], We.prototype, "graphicSymbolSupported", void 0), r([m({ constructOnly: true })], We.prototype, "getRenderingInfoWithoutRenderer", void 0), r([m({ constructOnly: true })], We.prototype, "componentFactories", void 0), r([m({ constructOnly: true })], We.prototype, "setUidToIdOnAdd", void 0), r([m()], We.prototype, "featureStore", null), r([m()], We.prototype, "initializePromise", null), r([m()], We.prototype, "scaleVisibility", null), r([m()], We.prototype, "elevationAlignment", null), r([m()], We.prototype, "objectStates", null), r([m()], We.prototype, "filterVisibility", null), r([m({ readOnly: true })], We.prototype, "updating", null), r([m({ readOnly: true })], We.prototype, "dataUpdating", null), r([m({ readOnly: true })], We.prototype, "running", null), r([m({ readOnly: true })], We.prototype, "suspendedOrOutsideOfView", null), r([m({ readOnly: true, dependsOn: [] })], We.prototype, "updatingRemaining", null), r([m({ readOnly: true })], We.prototype, "displayFeatureLimit", null), r([m({ readOnly: true, dependsOn: [] })], We.prototype, "averageSymbolComplexity", null), r([m({ constructOnly: true })], We.prototype, "hasZ", void 0), r([m({ constructOnly: true })], We.prototype, "hasM", void 0), r([m()], We.prototype, "_objectIdField", null), We = Te = r([a("esri.views.3d.layers.graphics.Graphics3DCore")], We), function(e25) {
  e25[e25.NEW = 0] = "NEW", e25[e25.LOADING = 1] = "LOADING", e25[e25.READY = 2] = "READY", e25[e25.REJECTED = 3] = "REJECTED";
}(He || (He = {}));
var Ne = class {
  constructor() {
    this.add = null, this.renderingInfo = null, this.state = He.NEW, this.abortController = null, this.remove = null;
  }
  clear() {
    this.add = null, this.renderingInfo = null, this.state = He.NEW, this.abortController = null, this.remove = null;
  }
};
var Be = 10;
var qe = n3();
var Ye = n3();
var Qe = /* @__PURE__ */ new Map();

// node_modules/@arcgis/core/views/3d/layers/graphics/ExtentSet.js
var h5 = 0.05;
var a12 = class {
  constructor() {
    this._extents = new r3({ allocator: (t14) => t14 || u2() }), this._tmpExtent = u2(), this._dirty = false;
  }
  get empty() {
    return 0 === this._extents.length;
  }
  get size() {
    return this._extents.length;
  }
  clear() {
    this._extents.clear();
  }
  add(t14) {
    this._contains(t14) || (this._removeContained(t14), e4(this._extents.pushNew(), t14), this._dirty = true);
  }
  pop() {
    return this._dirty && this._mergeTight(), this._extents.pop();
  }
  merge(t14) {
    return this._mergeTight(t14), t14.hasProgressed;
  }
  _mergeTight(t14 = C3) {
    const e25 = this._extents, o13 = /* @__PURE__ */ new Set();
    let a14 = 0;
    for (; a14 !== e25.length; ) {
      e25.sort((t15, e26) => t15[0] - e26[0]), a14 = e25.length, o13.clear();
      for (let i14 = 0; i14 < e25.length; ++i14) {
        if (t14.done) return;
        const a15 = e25.at(i14);
        if (a15) {
          for (let t15 = i14 + 1; t15 < e25.length; ++t15) {
            const r15 = e25.at(t15);
            if (null == r15 || r15[0] >= a15[2]) break;
            o13.add(r15);
          }
          o13.forEach((i15) => {
            if (a15 === i15) return;
            if (i15[2] <= a15[0]) return void o13.delete(i15);
            const l16 = l2(a15), _5 = l2(i15), c9 = this._tmpExtent;
            m2(a15, i15, c9);
            const d14 = l16 + _5;
            (l2(c9) - d14) / d14 < h5 && (e4(a15, c9), o13.delete(i15), e25.remove(i15), t14.madeProgress());
          }), o13.add(a15);
        }
      }
    }
    this._dirty = false;
  }
  _contains(t14) {
    return this._extents.some((e25) => d3(e25, t14));
  }
  _removeContained(t14) {
    this._extents.filterInPlace((e25) => !d3(t14, e25));
  }
  get test() {
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DElevationAlignment.js
var p12 = class extends g {
  constructor(t14) {
    super(t14), this._dirtyExtents = new a12(), this._globalDirty = false, this._averageExtentUpdateSize = 0, this._dirtyGraphicsSet = /* @__PURE__ */ new Set(), this._updateElevation = false, this.graphicsCoreOwner = null, this.graphicsCore = null, this.events = new i();
  }
  initialize() {
    var _a;
    const t14 = this.elevationProvider, e25 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this._task = e25.registerTask(d13((_a = this.graphicsCore.layer.elevationInfo) == null ? void 0 : _a.mode), this), this.addHandles([t14.on("elevation-change", (t15) => this._elevationChanged(t15)), d2(() => this.graphicsCoreOwner.suspended, () => this._suspendedChange()), this._task, d2(() => {
      var _a2;
      return d13((_a2 = this.graphicsCore.layer.elevationInfo) == null ? void 0 : _a2.mode);
    }, (t15) => this._task.priority = t15)]);
  }
  destroy() {
    this._dirtyGraphicsSet.clear(), this.graphicsCoreOwner = null, this.graphicsCore = null, this.queryGraphicUIDsInExtent = null, this.elevationProvider = null;
  }
  clear() {
    this._dirtyGraphicsSet.clear(), this.notifyChange("updating");
  }
  _suspendedChange() {
    true === this.graphicsCoreOwner.suspended ? this._updateElevation = false : false === this.graphicsCoreOwner.suspended && this._updateElevation && (this._globalDirty = true, this.notifyChange("updating"));
  }
  elevationInfoChange() {
    this._globalDirty = true, this.notifyChange("updating");
  }
  get updating() {
    return this.running;
  }
  get running() {
    return this._dirtyGraphicsSet.size > 0 || this._dirtyExtents && !this._dirtyExtents.empty || this._globalDirty;
  }
  get updatingRemaining() {
    return this._dirtyGraphicsSet.size + this._dirtyExtents.size * this._averageExtentUpdateSize;
  }
  runTask(t14) {
    for (this._globalDirty && (this._markAllGraphicsElevationDirty(), this._globalDirty = false, t14.madeProgress()), t14.run(() => this._dirtyExtents.merge(t14)); this.running && !t14.done; ) this._updateDirtyGraphics(t14), this._updateDirtyExtents(t14);
    this.notifyChange("updating");
  }
  _updateDirtyGraphics(t14) {
    var _a;
    const e25 = this.graphicsCoreOwner.view.renderCoordsHelper, i14 = this.graphicsCore.effectiveUpdatePolicy === C4.ASYNC;
    for (const r15 of this._dirtyGraphicsSet.keys()) {
      const s18 = this.graphicsCore.getGraphics3DGraphicById(r15);
      if (this._dirtyGraphicsSet.delete(r15), null != s18 && (s18.alignWithElevation(this.elevationProvider, e25, i14), (_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), t14.madeProgress()), t14.done) return;
    }
  }
  _updateDirtyExtents(t14) {
    for (; !this._dirtyExtents.empty && !t14.done; ) {
      const e25 = this._dirtyExtents.pop(), i14 = this.elevationProvider.spatialReference;
      this.events.emit("invalidate-elevation", { extent: e25, spatialReference: i14 });
      const r15 = this._dirtyGraphicsSet.size;
      this.queryGraphicUIDsInExtent(e25, i14, (t15) => {
        const e26 = this.graphicsCore.getGraphics3DGraphicById(t15);
        null != e26 && e26.needsElevationUpdates() && this._dirtyGraphicsSet.add(t15);
      }), this._averageExtentUpdateSize = 0.1 * (this._dirtyGraphicsSet.size - r15) + 0.9 * this._averageExtentUpdateSize, t14.madeProgress();
    }
  }
  _markAllGraphicsElevationDirty() {
    this._dirtyExtents.clear(), this._dirtyGraphicsSet.clear(), this.graphicsCore.graphics3DGraphics.forEach((t14, e25) => this._dirtyGraphicsSet.add(e25));
  }
  _elevationChanged(t14) {
    if ("scene" === t14.context && (!this.graphicsCore.layer.elevationInfo || "relative-to-scene" !== this.graphicsCore.layer.elevationInfo.mode)) return;
    const e25 = t14.extent;
    if (this.graphicsCoreOwner.suspended) {
      if (!this._updateElevation) {
        const t15 = this.graphicsCore.computedExtent;
        t15 && e25[2] > t15.xmin && e25[0] < t15.xmax && e25[3] > t15.ymin && e25[1] < t15.ymax && (this._updateElevation = true);
      }
      this.events.emit("invalidate-elevation", t14);
    } else e25[0] === -1 / 0 ? this._globalDirty = true : this._dirtyExtents.add(e25), this.notifyChange("updating");
  }
};
function d13(t14) {
  return null == t14 ? g3.ELEVATION_ALIGNMENT : "relative-to-scene" === t14 ? g3.ELEVATION_ALIGNMENT_SCENE : g3.ELEVATION_ALIGNMENT;
}
r([m()], p12.prototype, "graphicsCoreOwner", void 0), r([m()], p12.prototype, "graphicsCore", void 0), r([m()], p12.prototype, "queryGraphicUIDsInExtent", void 0), r([m()], p12.prototype, "elevationProvider", void 0), r([m({ readOnly: true })], p12.prototype, "updating", null), r([m({ readOnly: true })], p12.prototype, "updatingRemaining", null), p12 = r([a("esri.views.3d.layers.graphics.Graphics3DElevationAlignment")], p12);

// node_modules/@arcgis/core/views/3d/support/intersectionUtils.js
function g8(r15, n10, t14, i14) {
  return x4(r15, n10, t14, h6(i14, n10, t14, true));
}
var b13 = { dir: n3(), len: 0, clip: n6() };
function h6(r15, n10, i14, f4) {
  const l16 = b13;
  return r15 ? (i14 && f4 && (l16.len = p4(n10, i14)), s8(l16.dir, r15)) : f4 ? (l16.len = p4(n10, i14), c2(l16.dir, i14, n10), g4(l16.dir, l16.dir, 1 / l16.len)) : (c2(l16.dir, i14, n10), A3(l16.dir, l16.dir)), l16;
}
function v6(r15, t14, i14) {
  const e25 = P2(O2(r15), i14.dir), c9 = -V2(r15, t14);
  if (c9 < 0 && e25 >= 0) return false;
  if (e25 > -1e-6 && e25 < 1e-6) return c9 > 0;
  if ((c9 < 0 || e25 < 0) && !(c9 < 0 && e25 < 0)) return true;
  const o13 = c9 / e25;
  return e25 > 0 ? o13 < i14.clip[1] && (i14.clip[1] = o13) : o13 > i14.clip[0] && (i14.clip[0] = o13), i14.clip[0] <= i14.clip[1];
}
function x4(r15, n10, t14, i14) {
  i14.clip[0] = 0, i14.clip[1] = t14 ? i14.len : Number.MAX_VALUE;
  for (let e25 = 0; e25 < r15.length; e25++) if (!v6(r15[e25], n10, i14)) return false;
  return true;
}

// node_modules/@arcgis/core/views/3d/support/FrustumExtentIntersection.js
var M3 = 0.5 * Math.PI;
var F4 = M3 / Math.PI * 180;
var N2 = class {
  constructor(t14) {
    this._extent = new Array(4), this._planes = new Array(6), this._maxSpan = 0, this._center = { origin: n3(), direction: n3() }, this._renderCoordsHelper = t14.renderCoordsHelper;
    for (let e25 = 0; e25 < 4; e25++) this._extent[e25] = { origin: n3(), direction: n3(), cap: { next: null, direction: n3() } }, this._planes[e25] = M2();
    this._planes[j3.NEAR] = M2(), this._planes[j3.FAR] = M2(), this._planesWithoutFar = this._planes.slice(0, 5);
  }
  update(t14, e25, i14, r15 = true) {
    const a14 = this._extent;
    this._toRenderBoundingExtent(t14, e25, i14), u5(this._center.origin, a14[0].origin, a14[2].origin), g4(this._center.origin, this._center.origin, 0.5), this._renderCoordsHelper.worldUpAtPosition(this._center.origin, this._center.direction), r15 || g4(this._center.direction, this._center.direction, -1);
    for (let n10 = 0; n10 < 4; n10++) {
      const t15 = a14[n10];
      this._renderCoordsHelper.worldUpAtPosition(t15.origin, t15.direction);
      const e26 = a14[3 === n10 ? 0 : n10 + 1];
      t15.cap.next = e26.origin, K(t15.cap.direction, t15.origin, e26.origin), P3(t15.direction, t15.cap.direction, t15.origin, this._planes[n10]), r15 || g4(t15.direction, t15.direction, -1);
    }
    P3(a14[0].cap.direction, a14[1].cap.direction, a14[0].origin, this._planes[j3.NEAR]), r15 ? L4(this._planes[j3.NEAR], this._planes[j3.FAR]) : (h4(this._planes[j3.FAR], this._planes[j3.NEAR]), L4(this._planes[j3.NEAR], this._planes[j3.NEAR])), this._maxSpan = Math.max(Math.abs(t14[0] - t14[2]), Math.abs(t14[1] - t14[3])), this._maxSpanSpatialReference = e25, this._minGlobalAltitude = 0.9 * s4(this._maxSpanSpatialReference).radius;
  }
  isVisibleInFrustum(t14, e25, i14 = false) {
    if (null == t14) return false;
    if (this._renderCoordsHelper.viewingMode === l5.Global) {
      const i15 = this._maxSpanSpatialReference.isGeographic ? F4 : M3 * e25;
      if (this._maxSpan > i15) return true;
      if (null != t14.altitude && t14.altitude >= this._minGlobalAltitude) return this._isVisibleInFrustumGlobal(t14);
    }
    if (0 === this._maxSpan) {
      const e26 = this._extent[0];
      return !(i14 || !t14.intersectsRay(k(e26.origin, e26.direction)));
    }
    for (let n10 = 0; n10 < this._extent.length; n10++) {
      const e26 = this._extent[n10];
      if (!i14 && t14.intersectsRay(k(e26.origin, e26.direction))) return true;
      if (t14.intersectsLineSegment(b4(e26.origin, e26.cap.next, k2), e26.cap.direction)) return true;
    }
    const r15 = i14 ? this._planes : this._planesWithoutFar;
    for (let n10 = 0; n10 < t14.lines.length; n10++) {
      const e26 = t14.lines[n10];
      if (g8(r15, e26.origin, e26.endpoint, e26.direction)) return true;
    }
    return false;
  }
  _toRenderBoundingExtentGlobal(t14, r15, n10) {
    const o13 = 5;
    p2(t14, V3), V3[2] = n10, m3(r15, V3, v7, this._renderCoordsHelper.spatialReference), h2(I, v7), q(L7);
    for (const { x0: i14, x1: s18, y0: c9, y1: l16 } of U2) for (let p13 = 0; p13 < o13; p13++) {
      const h10 = p13 / (o13 - 1);
      V3[0] = o(t14[i14], t14[s18], h10), V3[1] = o(t14[c9], t14[l16], h10), V3[2] = n10, n7(V3, r15, V3, this._renderCoordsHelper.spatialReference), E(V3, V3, I), l3(L7, V3);
    }
    o4(this._extent[0].origin, L7[0], L7[1], L7[2]), o4(this._extent[1].origin, L7[3], L7[1], L7[2]), o4(this._extent[2].origin, L7[3], L7[4], L7[2]), o4(this._extent[3].origin, L7[0], L7[4], L7[2]);
    for (let e25 = 0; e25 < 4; ++e25) E(this._extent[e25].origin, this._extent[e25].origin, v7);
  }
  _toRenderBoundingExtentLocal(t14, e25, i14) {
    i10(t14, e25, P5, this._renderCoordsHelper.spatialReference), o4(this._extent[0].origin, P5[0], P5[1], i14), o4(this._extent[1].origin, P5[2], P5[1], i14), o4(this._extent[2].origin, P5[2], P5[3], i14), o4(this._extent[3].origin, P5[0], P5[3], i14);
  }
  _toRenderBoundingExtent(e25, i14, r15) {
    switch (this._renderCoordsHelper.viewingMode) {
      case l5.Global:
        this._toRenderBoundingExtentGlobal(e25, i14, r15);
        break;
      case l5.Local:
        this._toRenderBoundingExtentLocal(e25, i14, r15);
        break;
      default:
        n(this._renderCoordsHelper.viewingMode);
    }
  }
  _isVisibleInFrustumGlobal(t14) {
    if (V2(t14.planes[j3.NEAR], this._center.origin) < 0 && P2(this._center.direction, t14.direction) < 0) return true;
    for (let e25 = 0; e25 < 4; e25++) {
      const i14 = this._extent[e25];
      if (V2(t14.planes[j3.NEAR], i14.origin) < 0 && P2(i14.direction, t14.direction) < 0) return true;
    }
    return false;
  }
};
var U2 = [{ x0: 0, y0: 1, x1: 2, y1: 1 }, { x0: 0, y0: 3, x1: 2, y1: 3 }, { x0: 0, y0: 1, x1: 0, y1: 3 }, { x0: 2, y0: 1, x1: 2, y1: 3 }];
var V3 = n3();
var v7 = e10();
var I = e10();
var L7 = u3();
var P5 = u2();
var k2 = v3();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DFrustumVisibility.js
var h7 = 1.2;
var u17 = class extends g {
  constructor(e25) {
    super(e25), this.suspended = false, this._extent = null, this._extentIntersectionDirty = true, this._isVisibleBelowSurfaceInternal = false, this.graphicsCoreOwner = null, this.updating = true;
  }
  initialize() {
    const { graphicsCoreOwner: e25 } = this;
    this._extentIntersection = new N2({ renderCoordsHelper: e25.view.renderCoordsHelper });
    const t14 = e25.view, n10 = t14.basemapTerrain, o13 = t14.resourceController.scheduler;
    this.addHandles([t14.on("resize", () => this._viewChange()), d2(() => t14.state.camera, () => this._viewChange(), C), o13.registerTask(g3.FRUSTUM_VISIBILITY, this), d2(() => n10.visibleElevationBounds, () => this._elevationBoundsChange())]), "local" === t14.viewingMode ? this._isVisibleBelowSurface = true : this.addHandles([d2(() => {
      var _a, _b, _c;
      return [n10.baseOpacity, n10.wireframe, (_c = (_b = (_a = t14.map) == null ? void 0 : _a.ground) == null ? void 0 : _b.navigationConstraint) == null ? void 0 : _c.type];
    }, () => this._updateIsVisibleBelowSurface(), P)]);
  }
  destroy() {
    this._set("graphicsCoreOwner", null), this._extent = null, this._extentIntersection = null;
  }
  _setDirty() {
    this.updating || this._set("updating", true);
  }
  setExtent(e25) {
    this._extent = e25, this._extentIntersectionDirty = true, this._setDirty();
  }
  _viewChange() {
    this._setDirty();
  }
  _elevationBoundsChange() {
    this._setDirty(), this._extentIntersectionDirty = true;
  }
  set _isVisibleBelowSurface(e25) {
    this._isVisibleBelowSurfaceInternal = e25, this._setDirty(), this._extentIntersectionDirty = true;
  }
  _updateIsVisibleBelowSurface() {
    var _a, _b;
    const e25 = this.graphicsCoreOwner.view, t14 = e25.basemapTerrain, s18 = "local" === e25.viewingMode, i14 = "none" === ((_b = (_a = e25.map.ground) == null ? void 0 : _a.navigationConstraint) == null ? void 0 : _b.type);
    this._isVisibleBelowSurface = s18 || !t14.opaque || i14;
  }
  _updateExtentIntersection() {
    if (!this._extentIntersectionDirty) return;
    this._extentIntersectionDirty = false;
    const e25 = this.graphicsCoreOwner.view;
    let t14;
    if (this._isVisibleBelowSurfaceInternal) t14 = -0.3 * s4(e25.spatialReference).radius;
    else {
      const { min: s18, max: i14 } = e25.basemapTerrain.visibleElevationBounds;
      t14 = s18 - Math.max(1, (i14 - s18) * (h7 - 1));
    }
    this._extentIntersection.update(this._extent, e25.spatialReference, t14);
  }
  get running() {
    return this.updating;
  }
  runTask(e25) {
    if (this._set("updating", false), !this._extent) return this._set("suspended", false), o3;
    this._updateExtentIntersection();
    const t14 = this.graphicsCoreOwner.view.frustum, s18 = s4(this.graphicsCoreOwner.view.spatialReference).radius;
    this._set("suspended", !this._extentIntersection.isVisibleInFrustum(t14, s18)), e25.madeProgress();
  }
};
r([m({ readOnly: true })], u17.prototype, "suspended", void 0), r([m({ constructOnly: true })], u17.prototype, "graphicsCoreOwner", void 0), r([m({ readOnly: true })], u17.prototype, "updating", void 0), u17 = r([a("esri.views.3d.layers.graphics.Graphics3DFrustumVisibility")], u17);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Object3DStateSet.js
var t11 = class {
};
var s16 = class extends t11 {
  constructor(e25, t14) {
    super(), this.objectStateId = e25, this.object = t14;
  }
  remove() {
    this.object.removeStateID(this.objectStateId);
  }
};
var o12 = class extends t11 {
  constructor(e25, t14, s18) {
    super(), this.objectStateId = e25, this.object = t14, this.owner = s18;
  }
  remove() {
    this.owner.removeRenderGeometryObjectState(this.object, this.objectStateId);
  }
};
var c6 = class extends t11 {
  constructor(e25, t14) {
    super(), this.objectStateId = e25, this._removeCallback = t14, this.object = null;
  }
  remove() {
    this._removeCallback(this.objectStateId);
  }
};
var r12 = class {
  constructor() {
    this._items = [];
  }
  addObject(e25, t14) {
    this._items.push(new s16(t14, e25));
  }
  addRenderGeometry(e25, t14, s18) {
    this._items.push(new o12(t14, e25, s18));
  }
  addExternal(e25, t14) {
    this._items.push(new c6(t14, e25));
  }
  remove(e25) {
    this._remove((t14) => t14.objectStateId === e25);
  }
  removeByObject(e25) {
    this._remove((t14) => t14.object === e25);
  }
  removeAll() {
    this._items.forEach((e25) => e25.remove()), this._items = [];
  }
  _remove(e25) {
    const { _items: t14 } = this;
    for (let s18 = t14.length - 1; s18 >= 0; --s18) {
      const o13 = t14[s18];
      e25(o13) && (o13.remove(), t14.splice(s18, 1));
    }
  }
};
var i11 = class extends r12 {
  constructor() {
    super(...arguments), this.stateType = t5.MaskOccludee;
  }
};
var h8 = class extends r12 {
  constructor(t14) {
    super(), this.highlightName = t14, this.stateType = t5.Highlight;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStateSet.js
var i12 = class {
  constructor(t14) {
    this.objectIdField = t14, this.ids = /* @__PURE__ */ new Set(), this.paused = false;
  }
  hasGraphic(t14) {
    const e25 = this.objectIdField ? t14.graphic.attributes[this.objectIdField] : t14.graphic.uid;
    return this.ids.has(e25);
  }
};
var c7 = class extends i12 {
  constructor(s18) {
    super(s18), this.stateType = t5.MaskOccludee, this.objectStateSet = new i11();
  }
};
var h9 = class extends i12 {
  constructor(e25, i14) {
    super(i14), this.highlightName = e25, this.stateType = t5.Highlight, this.objectStateSet = new h8(e25);
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectStates.js
var a13 = class {
  constructor(t14) {
    this._graphicsCore = t14, this._stateSets = new Array();
  }
  destroy() {
    this.reset(), this._stateSets = null;
  }
  reset() {
    this._stateSets && (this._stateSets.forEach((t14) => t14.objectStateSet.removeAll()), this._stateSets.length = 0);
  }
  acquireOccludeeSet(s18) {
    const a14 = new c7(s18);
    this._stateSets.push(a14);
    const i14 = e2(() => this.releaseSet(a14));
    return { set: a14, handle: i14 };
  }
  acquireHighlightSet(e25, a14) {
    const i14 = new h9(e25, a14);
    this._stateSets.push(i14);
    const c9 = e2(() => this.releaseSet(i14));
    return { set: i14, handle: c9 };
  }
  releaseSet(t14) {
    t14.objectStateSet.removeAll();
    const e25 = this._stateSets ? this._stateSets.indexOf(t14) : -1;
    -1 !== e25 && this._stateSets.splice(e25, 1);
  }
  setUid(t14, e25) {
    t14.ids.add(e25);
    const s18 = this._graphicsCore.graphics3DGraphics.get(e25);
    s18 && s18.addObjectStateSet(t14.objectStateSet);
  }
  setUids(t14, e25) {
    e25.forEach((e26) => this.setUid(t14, e26));
  }
  setObjectIds(t14, e25) {
    e25.forEach((e26) => t14.ids.add(e26)), this._initializeSet(t14);
  }
  addGraphic(t14) {
    this._stateSets.forEach((e25) => {
      !e25.paused && e25.hasGraphic(t14) && t14.addObjectStateSet(e25.objectStateSet);
    });
  }
  removeGraphic(t14) {
    this._stateSets.forEach((e25) => {
      e25.hasGraphic(t14) && t14.removeObjectState(e25.objectStateSet);
    });
  }
  allGraphicsDeleted() {
    this._stateSets && this._stateSets.forEach((t14) => t14.objectStateSet.removeAll());
  }
  _initializeSet(t14) {
    const e25 = this._graphicsCore.graphics3DGraphics;
    t14.objectIdField ? e25.forEach((e26) => {
      e26 && t14.hasGraphic(e26) && e26.addObjectStateSet(t14.objectStateSet);
    }) : t14.ids.forEach((s18) => {
      const a14 = e25.get(s18);
      a14 && a14.addObjectStateSet(t14.objectStateSet);
    });
  }
  get test() {
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DScaleVisibility.js
var u18 = class extends g {
  constructor(e25) {
    super(e25), this._scaleRangeActive = false, this._layerScaleRangeVisibilityQuery = false, this._extent = null, this._updatingHandles = new h3(), this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null, this.layerScaleEnabled = true, this.suspended = false, this._dirty = true;
  }
  initialize() {
    this.updateScaleRangeActive();
    const e25 = this.graphicsCoreOwner.view.resourceController.scheduler;
    this.addHandles(e25.registerTask(g3.SCALE_VISIBILITY, this)), this._updatingHandles.add(() => this.layer.effectiveScaleRange, () => this.layerMinMaxScaleChangeHandler());
  }
  destroy() {
    this._updatingHandles.destroy(), this.removeHandles(), this._dirty = false, this._extent = null, this.graphicsCoreOwner = null, this.layer = null, this.queryGraphicUIDsInExtent = null, this.graphicsCore = null, this.basemapTerrain = null;
  }
  get updating() {
    return this._dirty || this._updatingHandles.updating;
  }
  _setDirty() {
    this._dirty = true;
  }
  setExtent(e25) {
    const i14 = this.graphicsCoreOwner.view.spatialReference, t14 = this.graphicsCoreOwner.view.basemapTerrain.spatialReference;
    if (i14 === t14) this._extent = e25 ?? null;
    else {
      const r15 = u2();
      i10(e25, i14, r15, t14) ? this._extent = r15 : this._extent = null;
    }
    this._setDirty();
  }
  scaleRangeActive() {
    return this._scaleRangeActive;
  }
  updateScaleRangeActive() {
    const e25 = this.layer, i14 = e25.effectiveScaleRange;
    let t14 = this.layerScaleEnabled && null != i14 && g9(i14.minScale, i14.maxScale);
    e25.labelingInfo && !t14 && (t14 = e25.labelingInfo.some((e26) => e26 && g9(e26.minScale ?? 0, e26.maxScale ?? 0)));
    const r15 = this._scaleRangeActive !== t14;
    return this._scaleRangeActive = t14, t14 && !this.hasHandles(y6) && this.basemapTerrain ? (this.addHandles(this.basemapTerrain.on("scale-change", (e26) => this._scaleUpdateHandler(e26)), y6), this.layerScaleEnabled && this.addHandles(this.basemapTerrain.on("tiles-visibility-changed", () => this._setDirty()), y6)) : !t14 && this.hasHandles(y6) && this.removeHandles(y6), r15;
  }
  get running() {
    return !(!this.graphicsCoreOwner.view.basemapTerrain || !this.updating);
  }
  runTask(e25) {
    const i14 = this.graphicsCoreOwner.view.basemapTerrain;
    if (this._extent && i14 && i14.ready && this._scaleRangeActive && this.layerScaleEnabled) {
      if (this._layerScaleRangeVisibilityQuery) return o3;
      {
        this._layerScaleRangeVisibilityQuery = true;
        const { minScale: e26, maxScale: t14 } = this.layer.effectiveScaleRange;
        i14.queryVisibleScaleRange(this._extent, e26, t14, (e27) => this._finishUpdate(e27));
      }
    } else this._finishUpdate(true);
    e25.madeProgress();
  }
  _finishUpdate(e25) {
    this._layerScaleRangeVisibilityQuery = false, this._set("suspended", !e25), this._dirty = false;
  }
  _visibleAtLayerScale(e25) {
    const i14 = this.layer.effectiveScaleRange;
    return !this.layerScaleEnabled || i5(e25, i14.minScale || 0, i14.maxScale || 0);
  }
  _visibleAtLabelScale(e25, i14) {
    return i5(e25, i14.minScale || 0, i14.maxScale || 0);
  }
  _graphicScale(e25) {
    let i14;
    if (null != e25.centroid ? i14 = e25.centroid : null != e25.graphic.geometry && "point" === e25.graphic.geometry.type && (i14 = e25.graphic.geometry), i14) {
      return this.graphicsCoreOwner.view.basemapTerrain ? this.graphicsCoreOwner.view.basemapTerrain.getScale(i14) : 1;
    }
    return null;
  }
  _graphicVisible(e25) {
    if (!this.layerScaleEnabled) return true;
    const i14 = this._graphicScale(e25);
    return this._visibleAtLayerScale(i14);
  }
  updateVisibility(e25) {
    if (this._scaleRangeActive) {
      const i14 = this._graphicVisible(e25);
      return e25.setVisibilityFlag(A6.GRAPHIC, L5.SCALE_RANGE, i14);
    }
    return false;
  }
  updateGraphicLabelScaleVisibility(e25) {
    var _a, _b;
    if (!this._scaleRangeActive) return false;
    if (!e25.labelLayers || 0 === e25.labelLayers.length) return false;
    const i14 = this._graphicScale(e25), t14 = this._updateLabelScaleVisibility(e25, i14);
    return t14 && ((_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), (_b = this.graphicsCore.labeler) == null ? void 0 : _b.setDirty()), t14;
  }
  _updateLabelScaleVisibility(e25, i14) {
    if (!e25.labelLayers || 0 === e25.labelLayers.length) return false;
    const t14 = e25.labelLayers[0]._labelClass;
    if (null != (t14 == null ? void 0 : t14.minScale) && null != t14.maxScale) {
      const r15 = this._visibleAtLabelScale(i14, t14);
      if (e25.setVisibilityFlag(A6.LABEL, L5.SCALE_RANGE, r15)) return true;
    }
    return false;
  }
  _scaleUpdateHandler(e25) {
    var _a, _b;
    if (this._setDirty(), !this.graphicsCore.visible) return;
    const i14 = e25.extent, r15 = e25.scale, s18 = this._visibleAtLayerScale(r15);
    let a14 = false;
    const n10 = this.graphicsCoreOwner.view.spatialReference, h10 = e25.spatialReference;
    if (null == h10) return void n2.getLogger(this).error("scaleUpdate: Internal error, no SpatialReference given for tiles");
    const p13 = !h10.equals(n10);
    if (p13) {
      if (!i10(i14, h10, b14, n10)) return void n2.getLogger(this).error("scaleUpdate: Internal error, cannot project AABR from " + h10 + " to wkid " + n10);
    }
    const d14 = p13 ? b14 : i14;
    this.queryGraphicUIDsInExtent(d14, n10, (e26) => {
      const t14 = this.graphicsCore.getGraphics3DGraphicById(e26);
      if (null == t14) return;
      const l16 = t14.centroid;
      null != l16 && (i14[0] > l16.x || i14[1] > l16.y || i14[2] < l16.x || i14[3] < l16.y) || (t14.setVisibilityFlag(A6.GRAPHIC, L5.SCALE_RANGE, s18) && (a14 = true), this._updateLabelScaleVisibility(t14, r15) && (a14 = true));
    }), a14 && ((_a = this.graphicsCore.deconflictor) == null ? void 0 : _a.setDirty(), (_b = this.graphicsCore.labeler) == null ? void 0 : _b.setDirty());
  }
  layerMinMaxScaleChangeHandler() {
    this.updateScaleRangeActive() && !this._scaleRangeActive ? this.graphicsCore.modifyGraphics3DGraphicVisibilities((e25) => e25.setVisibilityFlag(A6.GRAPHIC, L5.SCALE_RANGE, true)) : this._scaleRangeActive && this.graphicsCore.updateGraphicsVisibilities(), this._setDirty();
  }
};
function g9(e25, i14) {
  return e25 > 0 || i14 > 0;
}
r([m()], u18.prototype, "graphicsCoreOwner", void 0), r([m()], u18.prototype, "layer", void 0), r([m()], u18.prototype, "queryGraphicUIDsInExtent", void 0), r([m()], u18.prototype, "graphicsCore", void 0), r([m()], u18.prototype, "basemapTerrain", void 0), r([m({ constructOnly: true })], u18.prototype, "layerScaleEnabled", void 0), r([m({ readOnly: true })], u18.prototype, "suspended", void 0), r([m({ readOnly: true })], u18.prototype, "updating", null), r([m()], u18.prototype, "_dirty", void 0), u18 = r([a("esri.views.3d.layers.graphics.Graphics3DScaleVisibility")], u18);
var y6 = "terrain-events";
var b14 = u2();

// node_modules/@arcgis/core/views/3d/layers/support/highlightUtils.js
function e24(o13) {
  return V.isCollection(o13) ? o13.toArray() : Array.isArray(o13) ? o13 : i13(o13) || i2(o13) || c8(o13) ? [o13] : n9;
}
function i13(r15) {
  return "number" == typeof r15 || "string" == typeof r15;
}
var n9 = [];
var s17 = e2();
function c8(r15) {
  return "esri.views.3d.layers.i3s.PointCloudGraphic" === r15.declaredClass;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicsProcessor.js
var x5 = class extends g {
  constructor(i14) {
    super(i14), this.type = "graphics-3d", this.graphicsCore = null, this.drapeSourceType = e16.Features, this.scaleVisibilityEnabled = false, this.frustumVisibilityEnabled = false, this._suspendResumeExtent = null, this._updatingHandles = new h3();
  }
  initialize() {
    const { layer: i14 } = this, t14 = "effectiveScaleRange" in i14 ? i14 : null, e25 = this.scaleVisibilityEnabled && null != t14, r15 = new We({ owner: this, layer: this.owner.layer, preferredUpdatePolicy: C4.SYNC, graphicSymbolSupported: true, componentFactories: { elevationAlignment: (i15, t15) => new p12({ graphicsCoreOwner: this, graphicsCore: i15, queryGraphicUIDsInExtent: t15, elevationProvider: this.view.elevationProvider }), scaleVisibility: e25 ? (i15, e26) => new u18({ graphicsCoreOwner: this, layer: t14, queryGraphicUIDsInExtent: e26, graphicsCore: i15, basemapTerrain: this.owner.view.basemapTerrain }) : null, objectStates: (i15) => new a13(i15) } });
    if (this._set("graphicsCore", r15), this.frustumVisibilityEnabled && this._set("frustumVisibility", new u17({ graphicsCoreOwner: this })), "fullOpacity" in this.owner) {
      const i15 = this.owner;
      this._updatingHandles.add(() => i15.fullOpacity, () => this.graphicsCore.opacityChange());
    }
    if ("elevationInfo" in i14) {
      const t15 = i14;
      this._updatingHandles.add(() => t15.elevationInfo, (i15, t16) => {
        y2(i15, t16) && this._updatingHandles.addPromise(this.graphicsCore.elevationInfoChange());
      });
    }
    this._set("initializePromise", this._initializeAsync()), this._updatingHandles.addPromise(this.initializePromise);
  }
  async _initializeAsync() {
    try {
      await this.graphicsCore.initializePromise;
    } catch (i14) {
      if (b(i14)) return;
      throw i14;
    }
    this.destroyed || (this.addHandles(d2(() => this.view.clippingArea, () => this._updateClippingExtent(), C)), this._updateClippingExtent(), this._setupSuspendResumeExtent(), this.graphicsCore.startCreateGraphics());
  }
  destroy() {
    this._updatingHandles.destroy(), this._set("frustumVisibility", u(this.frustumVisibility)), this._set("graphicsCore", u(this.graphicsCore));
  }
  get layer() {
    return this.owner.layer;
  }
  get view() {
    return this.owner.view;
  }
  get scaleVisibility() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.scaleVisibility;
  }
  get elevationAlignment() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.elevationAlignment;
  }
  get scaleVisibilitySuspended() {
    return !(null == this.scaleVisibility || !this.scaleVisibility.suspended);
  }
  get frustumVisibilitySuspended() {
    return null != this.frustumVisibility && this.frustumVisibility.suspended;
  }
  get suspended() {
    return this.owner.suspended ?? false;
  }
  get updating() {
    var _a;
    return !!(((_a = this.graphicsCore) == null ? void 0 : _a.updating) || null != this.scaleVisibility && this.scaleVisibility.updating || null != this.frustumVisibility && this.frustumVisibility.updating || this._updatingHandles.updating);
  }
  get graphics3DGraphics() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.graphics3DGraphics;
  }
  get graphics3DGraphicsByObjectID() {
    var _a;
    return (_a = this.graphicsCore) == null ? void 0 : _a.graphics3DGraphicsByObjectID;
  }
  get loadedGraphics() {
    return this.owner.loadedGraphics;
  }
  get fullOpacity() {
    return this.owner.fullOpacity ?? 1;
  }
  get slicePlaneEnabled() {
    return this.owner.slicePlaneEnabled;
  }
  get updatePolicy() {
    return this.owner.updatePolicy;
  }
  notifyGraphicGeometryChanged(i14) {
    this.graphicsCore.notifyGraphicGeometryChanged(i14);
  }
  notifyGraphicVisibilityChanged(i14) {
    this.graphicsCore.notifyGraphicVisibilityChanged(i14);
  }
  getRenderingInfo(i14, t14, e25) {
    const r15 = r7(i14, { renderer: t14, arcade: e25 });
    if (r15 == null ? void 0 : r15.color) {
      const i15 = r15.color;
      i15[0] = i15[0] / 255, i15[1] = i15[1] / 255, i15[2] = i15[2] / 255;
    }
    return r15;
  }
  getRenderingInfoAsync(i14, t14, e25, r15) {
    return l8(i14, { renderer: t14, arcade: e25, ...r15 });
  }
  getHit(i14) {
    if (this.owner.loadedGraphics) {
      const t14 = this.owner.loadedGraphics.find((t15) => t15.uid === i14);
      if (t14) {
        const i15 = this.layer instanceof f2 ? this.layer : null, e25 = c4(t14, i15);
        return { type: "graphic", graphic: e25, layer: e25.layer };
      }
    }
    return null;
  }
  whenGraphicBounds(i14, t14) {
    return this.graphicsCore ? this.graphicsCore.whenGraphicBounds(i14, t14) : Promise.reject();
  }
  computeAttachmentOrigin(i14, t14) {
    return this.graphicsCore ? this.graphicsCore.computeAttachmentOrigin(i14, t14) : null;
  }
  getSymbolLayerSize(i14, t14) {
    return this.graphicsCore ? this.graphicsCore.getSymbolLayerSize(i14, t14) : null;
  }
  maskOccludee(i14) {
    var _a;
    const t14 = (_a = this.graphicsCore) == null ? void 0 : _a.objectStates;
    if (!t14) return e2();
    const { set: e25, handle: s18 } = t14.acquireOccludeeSet(null);
    return t14.setUid(e25, i14.uid), s18;
  }
  highlight(i14, e25) {
    var _a;
    const r15 = (_a = this.graphicsCore) == null ? void 0 : _a.objectStates;
    if (!r15) return O5;
    if (i14 instanceof b2) return O5;
    const s18 = e24(i14);
    if (0 === s18.length) return O5;
    if (s18[0] instanceof b8) {
      const i15 = s18.map((i16) => i16.uid), { set: t14, handle: n10 } = r15.acquireHighlightSet(e25, null);
      return r15.setUids(t14, i15), n10;
    }
    if ("number" == typeof s18[0]) {
      const i15 = s18, { set: t14, handle: n10 } = r15.acquireHighlightSet(e25, null);
      return r15.setObjectIds(t14, i15), n10;
    }
    return O5;
  }
  _setupSuspendResumeExtent() {
    const { scaleVisibility: i14, frustumVisibility: t14 } = this;
    if (null == i14 && null == t14) return;
    const e25 = ({ computedExtent: e26, extentPadding: r15 }) => {
      this._suspendResumeExtent = S(e26, this._suspendResumeExtent, r8, r15), null != i14 && i14.setExtent(this._suspendResumeExtent), null != t14 && t14.setExtent(this._suspendResumeExtent);
    };
    this.addHandles(d2(() => {
      var _a, _b;
      return { computedExtent: (_a = this.graphicsCore) == null ? void 0 : _a.computedExtent, extentPadding: (_b = this.graphicsCore) == null ? void 0 : _b.extentPadding };
    }, (i15) => e25(i15), A2));
  }
  _updateClippingExtent() {
    const i14 = this.view.clippingArea;
    this.graphicsCore.setClippingExtent(i14, this.view.spatialReference) && this.graphicsCore.recreateAllGraphics();
  }
};
r([m()], x5.prototype, "type", void 0), r([m({ constructOnly: true })], x5.prototype, "owner", void 0), r([m()], x5.prototype, "layer", null), r([m()], x5.prototype, "view", null), r([m({ constructOnly: true })], x5.prototype, "graphicsCore", void 0), r([m()], x5.prototype, "scaleVisibility", null), r([m({ constructOnly: true })], x5.prototype, "frustumVisibility", void 0), r([m()], x5.prototype, "elevationAlignment", null), r([m()], x5.prototype, "scaleVisibilitySuspended", null), r([m({ readOnly: true })], x5.prototype, "frustumVisibilitySuspended", null), r([m()], x5.prototype, "suspended", null), r([m({ readOnly: true })], x5.prototype, "updating", null), r([m()], x5.prototype, "loadedGraphics", null), r([m()], x5.prototype, "fullOpacity", null), r([m()], x5.prototype, "slicePlaneEnabled", null), r([m()], x5.prototype, "drapeSourceType", void 0), r([m()], x5.prototype, "updatePolicy", null), r([m({ constructOnly: true })], x5.prototype, "scaleVisibilityEnabled", void 0), r([m({ constructOnly: true })], x5.prototype, "frustumVisibilityEnabled", void 0), r([m()], x5.prototype, "initializePromise", void 0), x5 = r([a("esri.views.3d.layers.graphics.GraphicsProcessor")], x5);
var O5 = e2();

// node_modules/@arcgis/core/views/3d/layers/graphics/queryForSymbologySnapping.js
async function r13(r15, a14, s18) {
  if (null == r15 || 0 === a14.candidates.length) return t12;
  const i14 = r15.graphics3DGraphicsByObjectID ?? r15.graphics3DGraphics, c9 = [], o13 = [], { renderer: d14 } = r15, p13 = null != d14 && "arcadeRequired" in d14 && d14.arcadeRequired ? o8() : null, l16 = async (n10, { graphic: e25, graphics3DSymbol: t14 }) => {
    const a15 = await p13, i15 = await r15.getRenderingInfoAsync(e25, d14, a15, { signal: s18 });
    return null == i15 ? [] : t14.queryForSnapping(n10, g10, i15, s18);
  }, { candidates: u19, spatialReference: g10 } = a14;
  for (let n10 = 0; n10 < u19.length; ++n10) {
    const e25 = u19[n10], { objectId: r16 } = e25, t14 = "number" == typeof r16 ? i14 == null ? void 0 : i14.get(r16) : void 0;
    if (null == t14) continue;
    const { graphics3DSymbol: a15 } = t14;
    a15.symbologySnappingSupported && (c9.push(l16(e25, t14)), o13.push(n10));
  }
  if (0 === c9.length) return t12;
  const h10 = await Promise.all(c9);
  s2(s18);
  const f4 = [], m10 = [];
  for (let n10 = 0; n10 < h10.length; ++n10) {
    const e25 = h10[n10], r16 = o13[n10];
    for (const n11 of e25) f4.push(n11), m10.push(r16);
  }
  return { candidates: f4, sourceCandidateIndices: m10 };
}
var t12 = { candidates: [], sourceCandidateIndices: [] };

// node_modules/@arcgis/core/views/3d/layers/support/LayerViewPerformanceInfo.js
var t13 = class {
  constructor(t14, e25 = 0, s18 = 0, r15 = 0, i14 = 0, o13 = null) {
    this.usedMemory = t14, this.displayedFeatures = e25, this.totalFeatures = s18, this.maximumFeatures = r15, this.nodes = i14, this.core = o13;
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/projectExtentUtils.js
async function r14(r15) {
  const l16 = r15.view.spatialReference, n10 = r15.layer.fullExtent, o13 = null != n10 && n10.spatialReference;
  if (null == n10 || !o13) return null;
  if (o13.equals(l16)) return n10.clone();
  const u19 = y(n10, l16);
  if (null != u19) return u19;
  if (r15.view.state.isLocal) try {
    const e25 = await a5(n10, l16, r15.layer.portalItem);
    return r15.destroyed || null == e25 ? null : e25;
  } catch {
    return null;
  }
  return null;
}

// node_modules/@arcgis/core/views/3d/layers/GraphicsLayerView3D.js
var m9 = class extends l10(y3) {
  constructor() {
    super(...arguments), this.type = "graphics-3d", this.symbologySnappingSupported = true, this._slicePlaneEnabled = false, this.fullExtentInLocalViewSpatialReference = null, this.ignoresMemoryFactor = true;
  }
  get highlightOptions() {
    return null;
  }
  initialize() {
    this._set("processor", new x5({ owner: this, scaleVisibilityEnabled: true, frustumVisibilityEnabled: true })), this.addResolvingPromise(this.processor.initializePromise), this.addHandles(this.layer.on("graphic-update", (e25) => this.processor.graphicsCore.graphicUpdateHandler(e25))), this.layer.internal ? this.notifyChange("updating") : (this.addResolvingPromise(r14(this).then((e25) => this.fullExtentInLocalViewSpatialReference = e25)), this.addHandles(p(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.ready;
    }, () => () => this.notifyChange("updating"), { once: true })));
  }
  destroy() {
    this._updatingHandles.removeAll(), this._set("processor", u(this.processor));
  }
  get loadedGraphics() {
    return this.layer.graphics;
  }
  get legendEnabled() {
    var _a;
    return this.canResume() && !((_a = this.processor) == null ? void 0 : _a.frustumVisibilitySuspended);
  }
  get visibleAtCurrentScale() {
    var _a;
    return !((_a = this.processor) == null ? void 0 : _a.scaleVisibilitySuspended);
  }
  get slicePlaneEnabled() {
    const e25 = this.layer.internal;
    return this._slicePlaneEnabled && !e25;
  }
  set slicePlaneEnabled(e25) {
    this._slicePlaneEnabled = e25;
  }
  getSuspendInfo() {
    var _a;
    const e25 = super.getSuspendInfo();
    return e25.outsideOfView = ((_a = this.processor) == null ? void 0 : _a.frustumVisibilitySuspended) ?? false, e25;
  }
  getHit(e25) {
    return this.processor.getHit(e25);
  }
  whenGraphicBounds(e25, r15) {
    return this.processor.whenGraphicBounds(e25, r15);
  }
  computeAttachmentOrigin(e25, r15) {
    var _a;
    return (_a = this.processor) == null ? void 0 : _a.computeAttachmentOrigin(e25, r15);
  }
  getSymbolLayerSize(e25, r15) {
    return this.processor.getSymbolLayerSize(e25, r15);
  }
  queryGraphics() {
    return Promise.resolve(this.loadedGraphics);
  }
  maskOccludee(e25) {
    return this.processor.maskOccludee(e25);
  }
  highlight(e25, r15) {
    return this.processor.highlight(e25, (r15 == null ? void 0 : r15.name) ?? c3);
  }
  async elevationAlignPointsInFeatures(e25, s18) {
    const { processor: t14 } = this;
    if (null == (t14 == null ? void 0 : t14.graphics3DGraphics)) throw new s("graphicslayerview3d:missing-processor", "A Graphics3D processor is needed to resolve graphics elevation.");
    const { graphics3DGraphics: i14 } = t14, o13 = (e26) => "number" == typeof e26 ? i14.get(e26) : void 0;
    return l11(this.view, this.layer, o13, e25, s18);
  }
  async queryForSymbologySnapping(e25, r15) {
    return r13(this.processor, e25, r15);
  }
  get updatePolicy() {
    var _a;
    return ((_a = this.processor) == null ? void 0 : _a.graphicsCore.effectiveUpdatePolicy) || C4.SYNC;
  }
  isUpdating() {
    var _a, _b;
    return this.view && this.layer && !(!((_a = this.processor) == null ? void 0 : _a.updating) && (this.layer.internal || ((_b = this.view.basemapTerrain) == null ? void 0 : _b.ready)));
  }
  get performanceInfo() {
    return new t13(this.usedMemory, this.loadedGraphics.length, -1, -1);
  }
  get usedMemory() {
    var _a, _b;
    return ((_b = (_a = this.processor) == null ? void 0 : _a.graphicsCore) == null ? void 0 : _b.usedMemory) ?? 0;
  }
  get unloadedMemory() {
    var _a, _b;
    return (_b = (_a = this.processor) == null ? void 0 : _a.graphicsCore) == null ? void 0 : _b.unprocessedMemoryEstimate;
  }
  get test() {
    return { graphics3DProcessor: this.processor, loadedGraphics: this.loadedGraphics };
  }
};
r([m()], m9.prototype, "highlightOptions", null), r([m()], m9.prototype, "loadedGraphics", null), r([m({ readOnly: true })], m9.prototype, "legendEnabled", null), r([m()], m9.prototype, "layer", void 0), r([m({ readOnly: true })], m9.prototype, "processor", void 0), r([m({ readOnly: true })], m9.prototype, "visibleAtCurrentScale", null), r([m()], m9.prototype, "_slicePlaneEnabled", void 0), r([m({ type: Boolean })], m9.prototype, "slicePlaneEnabled", null), m9 = r([a("esri.views.3d.layers.GraphicsLayerView3D")], m9);
var y7 = m9;
export {
  y7 as default
};
//# sourceMappingURL=GraphicsLayerView3D-SZTGYXOQ.js.map
