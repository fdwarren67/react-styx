import {
  m as m2
} from "./chunk-6ODE2WLX.js";
import {
  o,
  y
} from "./chunk-B5RWARUO.js";
import {
  t
} from "./chunk-WXM4FNHD.js";
import {
  n
} from "./chunk-25NL5TAZ.js";
import "./chunk-MVZZVRSZ.js";
import "./chunk-SHJSYZ5S.js";
import {
  A as A2
} from "./chunk-JKNB3ZUJ.js";
import "./chunk-7BISKPXG.js";
import "./chunk-IVUWXWSD.js";
import "./chunk-4YDWJUBU.js";
import {
  r as r2
} from "./chunk-YABYS5KB.js";
import {
  S as S2,
  f as f2,
  g as g3
} from "./chunk-7WOCIDMW.js";
import "./chunk-7M6HCFVM.js";
import "./chunk-DTPSE2SE.js";
import {
  S as S3
} from "./chunk-6ODLL4CO.js";
import {
  y as y2
} from "./chunk-ZMZA5FVA.js";
import "./chunk-IZJLQDI2.js";
import "./chunk-WWSYO2TL.js";
import {
  x
} from "./chunk-GGSQ5AVK.js";
import "./chunk-AWVDCINM.js";
import {
  b,
  d as d2,
  g as g2
} from "./chunk-ISFWMGUK.js";
import "./chunk-ODSRB4EZ.js";
import "./chunk-QT7O73SQ.js";
import "./chunk-R4CRYRS5.js";
import "./chunk-NJX7X3PO.js";
import "./chunk-WA26GNQ4.js";
import "./chunk-P5AGQYYC.js";
import "./chunk-223G2GN7.js";
import "./chunk-CXHZI2CJ.js";
import {
  ae,
  z
} from "./chunk-FQS6ZZHL.js";
import "./chunk-MAX4GY2G.js";
import "./chunk-55SEMSMA.js";
import "./chunk-BUZ7I3MJ.js";
import "./chunk-J2QYVOHP.js";
import "./chunk-NBFYN6KG.js";
import "./chunk-23WGP47N.js";
import "./chunk-PXIP6WLU.js";
import "./chunk-V4U366R3.js";
import "./chunk-V7SQVFRS.js";
import "./chunk-3YC3Z7OQ.js";
import "./chunk-KFLWTVQX.js";
import "./chunk-BXTQHJJG.js";
import "./chunk-T5R43RTD.js";
import "./chunk-7NXOMMLC.js";
import "./chunk-F6YRPEY7.js";
import "./chunk-CCPDXL7V.js";
import "./chunk-2TACZL27.js";
import "./chunk-PKIZUJIH.js";
import "./chunk-LL7BB425.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-B7S3HUFO.js";
import "./chunk-6VF5U3IZ.js";
import "./chunk-E7IFPXEX.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-R2ZUOHHV.js";
import "./chunk-OBVDE24U.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-SNZZPKBU.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-NINPG5JV.js";
import "./chunk-32RP26YL.js";
import "./chunk-NPEU24W6.js";
import "./chunk-I75Q3UU4.js";
import "./chunk-TOU5KPOG.js";
import "./chunk-AU4QUDF3.js";
import "./chunk-5BSH2ZN2.js";
import {
  p,
  w as w2
} from "./chunk-HQ2GCCLQ.js";
import "./chunk-6ZLHM6GW.js";
import "./chunk-TYJV2BHR.js";
import "./chunk-I6H2R562.js";
import "./chunk-WMLTK6KE.js";
import "./chunk-SURICA27.js";
import "./chunk-PBHST2SF.js";
import "./chunk-PONPGREB.js";
import {
  D,
  G,
  U,
  X
} from "./chunk-QNYMCEB7.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-VPRLLNNO.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import {
  f
} from "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-YUQ6PSJ2.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-PHUXOQ5V.js";
import "./chunk-QAXPIBME.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-QAP2FVP7.js";
import "./chunk-6EREU4EG.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import {
  K,
  O
} from "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import {
  c
} from "./chunk-I6AFDEJM.js";
import "./chunk-C33DSFWF.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import {
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import {
  V
} from "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import {
  j2 as j
} from "./chunk-IVS2JCO6.js";
import {
  g
} from "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import {
  P2 as P,
  e2
} from "./chunk-BECTSF5P.js";
import {
  A,
  v
} from "./chunk-FX46DC27.js";
import {
  S
} from "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  e,
  u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/support/KMLMapImage.js
var p2 = class extends S {
  constructor() {
    super(...arguments), this.id = 0, this.rotation = 0, this.href = "", this.extent = new w();
  }
};
r([m({ nonNullable: true, json: { write: true } })], p2.prototype, "id", void 0), r([m({ nonNullable: true, json: { write: true } })], p2.prototype, "rotation", void 0), r([m({ nonNullable: true, json: { write: true } })], p2.prototype, "href", void 0), r([m({ type: w, nonNullable: true, json: { write: true } })], p2.prototype, "extent", void 0), p2 = r([a("esri.layers.support.KMLMapImage")], p2);

// node_modules/@arcgis/core/views/support/imageReprojection.js
var l = class _l {
  constructor(t2) {
    if (this._ownsRctx = false, t2) this._ownsRctx = false, this._rctx = t2;
    else {
      if (_l._instance) return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t3 = document.createElement("canvas").getContext("webgl2");
      t3.getExtension("OES_texture_float"), this._rctx = new y(t3, {});
    }
    const e3 = { applyProjection: true, bilinear: false, bicubic: false }, r3 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e3);
    this._program = this._rctx.programCache.acquire(r3.shaders.vertexShader, r3.shaders.fragmentShader, r3.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t2, s, n2 = false) {
    const o2 = O(t2.extent, s), m3 = new j({ x: (t2.extent.xmax - t2.extent.xmin) / t2.texture.descriptor.width, y: (t2.extent.ymax - t2.extent.ymin) / t2.texture.descriptor.height, spatialReference: t2.extent.spatialReference }), { x: _, y: g4 } = z(m3, s, t2.extent);
    let l2 = (_ + g4) / 2;
    const w3 = Math.round((o2.xmax - o2.xmin) / l2), b2 = Math.round((o2.ymax - o2.ymin) / l2);
    l2 = (o2.width / w3 + o2.height / b2) / 2;
    const j3 = new j({ x: l2, y: l2, spatialReference: o2.spatialReference }), D2 = ae({ projectedExtent: o2, srcBufferExtent: t2.extent, pixelSize: j3, hasWrapAround: true, spacing: [16, 16] }), R = m2(this._rctx, D2), C = new p(w3, b2);
    C.wrapMode = D.CLAMP_TO_EDGE;
    const T = new x(this._rctx, C);
    this._rctx.bindFramebuffer(T), this._rctx.setViewport(0, 0, w3, b2), this._rctx.useProgram(this._program), this._rctx.bindTexture(t2.texture, 0), this._rctx.bindTexture(R, 1), this._quad.bind();
    const { width: y3 = 0, height: E = 0 } = t2.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", y3, E), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", w3, b2), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), R.dispose(), n2) {
      const { width: t3, height: e3 } = T, r3 = new ImageData(t3 ?? 0, e3 ?? 0);
      T.readPixels(0, 0, t3 ?? 0, e3 ?? 0, G.RGBA, U.UNSIGNED_BYTE, r3.data);
      const i = T.detachColorTexture(X.COLOR_ATTACHMENT0);
      return T.dispose(), { texture: i, extent: o2, imageData: r3 };
    }
    const M = T.detachColorTexture(X.COLOR_ATTACHMENT0);
    return T.dispose(), { texture: M, extent: o2 };
  }
  reprojectBitmapData(t2, e3) {
    const r3 = g3(t2.bitmapData) ? f2(t2.bitmapData) : t2.bitmapData, i = new p();
    i.wrapMode = D.CLAMP_TO_EDGE, i.width = t2.bitmapData.width, i.height = t2.bitmapData.height;
    const a2 = new w2(this._rctx, i, r3), o2 = this.reprojectTexture({ texture: a2, extent: t2.extent }, e3, true);
    o2.texture.dispose();
    const m3 = document.createElement("canvas"), p3 = o2.imageData;
    m3.width = p3.width, m3.height = p3.height;
    return m3.getContext("2d").putImageData(p3, 0, 0), { bitmapData: m3, extent: o2.extent };
  }
  async loadAndReprojectBitmapData(e3, r3, i) {
    const a2 = (await P(e3, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a2.width, s.height = a2.height;
    const n2 = s.getContext("2d");
    n2.drawImage(a2, 0, 0);
    const o2 = n2.getImageData(0, 0, s.width, s.height);
    if (r3.spatialReference.equals(i)) return { bitmapData: o2, extent: r3 };
    const m3 = this.reprojectBitmapData({ bitmapData: o2, extent: r3 }, i);
    return { bitmapData: m3.bitmapData, extent: m3.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
l._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var j2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var k = class extends S3(y2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new r2(), this._kmlVisualData = new j2(), this._fetchController = null, this.allVisiblePoints = new c(), this.allVisiblePolylines = new c(), this.allVisiblePolygons = new c(), this.allVisibleMapImages = new V();
  }
  async hitTest(e3, i) {
    var _a, _b, _c;
    const t2 = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e3), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e3), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e3)].flat().filter(Boolean).map((i2) => (i2.layer = t2, i2.sourceLayer = t2, { type: "graphic", graphic: i2, layer: t2, mapPoint: e3 }));
  }
  update(e3) {
    this._polygonsView && this._polygonsView.processUpdate(e3), this._polylinesView && this._polylinesView.processUpdate(e3), this._pointsView && this._pointsView.processUpdate(e3);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new A2({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new A2({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new A2({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e3) => {
      e3.added.forEach((e4) => this._addMapImage(e4)), e3.removed.forEach((e4) => this._removeMapImage(e4));
    }), d(() => this.layer.visibleSublayers, (e3) => {
      for (const i of this._kmlVisualData.allSublayers.values()) i.visibility = 0;
      for (const i of e3) {
        const e4 = this._kmlVisualData.allSublayers.get(i.id);
        e4 && (e4.visibility = 1);
      }
      this._refreshCollections();
    })]), this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l();
  }
  detach() {
    this._fetchController = e(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = u(this._polygonsView), this._polylinesView = u(this._polylinesView), this._pointsView = u(this._pointsView), this._imageReprojector = u(this._imageReprojector);
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e3) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e3.href, e3.extent, this.view.spatialReference).then((i) => {
      const t2 = new S2(i.bitmapData);
      t2.x = i.extent.xmin, t2.y = i.extent.ymax, t2.resolution = i.extent.width / i.bitmapData.width, t2.rotation = e3.rotation, this._mapImageContainer.addChild(t2), this._bitmapIndex.set(e3, t2);
    });
  }
  async _getViewDependentUrl(e3, t2) {
    const { viewFormat: s, viewBoundScale: a2, httpQuery: o2 } = e3;
    if (null != s) {
      if (null == t2) throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await K(), null != a2 && 1 !== a2) {
        const e4 = new w(t2.extent);
        e4.expand(a2), n2 = e4;
      } else n2 = t2.extent;
      n2 = O(n2, g.WGS84);
      const h = O(n2, g.WebMercator), y3 = n2.xmin, g4 = n2.xmax, w3 = n2.ymin, u2 = n2.ymax, b2 = t2.size[0] * t2.pixelRatio, V2 = t2.size[1] * t2.pixelRatio, f3 = Math.max(h.width, h.height), v2 = { "[bboxWest]": y3.toString(), "[bboxEast]": g4.toString(), "[bboxSouth]": w3.toString(), "[bboxNorth]": u2.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f3.toString(), "[lookatTilt]": "0", "[lookatHeading]": t2.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f3.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b2.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": e2, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S4 = (e4) => {
        for (const i in e4) {
          let t3;
          for (t3 in v2) e4[i] = e4[i].replace(t3, v2[t3]);
        }
      }, I = A(s);
      S4(I);
      let x2 = {};
      null != o2 && (x2 = A(o2), S4(x2));
      const C = f(e3.href);
      C.query = { ...C.query, ...I, ...x2 };
      return `${C.path}?${v(I)}`;
    }
    return e3.href;
  }
  async _fetchService(e3) {
    const i = new j2();
    await this._loadVisualData(this.layer.url, i, e3), this._kmlVisualData = i, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e3) => this._isSublayerVisible(e3.sublayerId)).map(({ item: e3 }) => e3)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e3) => this._isSublayerVisible(e3.sublayerId)).map(({ item: e3 }) => e3)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e3) => this._isSublayerVisible(e3.sublayerId)).map(({ item: e3 }) => e3)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e3) => this._isSublayerVisible(e3.sublayerId)).map(({ item: e3 }) => e3));
  }
  _isSublayerVisible(e3) {
    const i = this._kmlVisualData.allSublayers.get(e3);
    return !!(i == null ? void 0 : i.visibility) && (-1 === i.parentFolderId || this._isSublayerVisible(i.parentFolderId));
  }
  _loadVisualData(e3, i, t2) {
    return this._fetchParsedKML(e3, t2).then(async (e4) => {
      var _a;
      for (const s of e4.sublayers) {
        i.allSublayers.set(s.id, s);
        const e5 = s.points ? await b(s.points) : [], a2 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], l2 = ((_a = s.mapImages) == null ? void 0 : _a.map((e6) => p2.fromJSON(e6))) ?? [];
        if (i.allPoints.push(...e5.map((e6) => ({ item: e6, sublayerId: s.id }))), i.allPolylines.push(...a2.map((e6) => ({ item: e6, sublayerId: s.id }))), i.allPolygons.push(...o2.map((e6) => ({ item: e6, sublayerId: s.id }))), i.allMapImages.push(...l2.map((e6) => ({ item: e6, sublayerId: s.id }))), s.networkLink) {
          const e6 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e6, i, t2);
        }
      }
    });
  }
  _fetchParsedKML(e3, i) {
    return g2(e3, this.layer.spatialReference, this.layer.refreshInterval, i).then((e4) => d2(e4.data));
  }
  _removeMapImage(e3) {
    const i = this._bitmapIndex.get(e3);
    i && (this._mapImageContainer.removeChild(i), this._bitmapIndex.delete(e3));
  }
};
r([m()], k.prototype, "_pointsView", void 0), r([m()], k.prototype, "_polylinesView", void 0), r([m()], k.prototype, "_polygonsView", void 0), r([m()], k.prototype, "updating", void 0), k = r([a("esri.views.2d.layers.KMLLayerView2D")], k);
var P2 = k;
export {
  P2 as default
};
//# sourceMappingURL=KMLLayerView2D-4Y6W7QHH.js.map
