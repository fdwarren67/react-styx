import {
  E,
  Se,
  h,
  i2 as i,
  m as m3
} from "./chunk-OYUO2SCI.js";
import "./chunk-76ZXQ2EB.js";
import "./chunk-OSK4LV4C.js";
import {
  I
} from "./chunk-TFBUHJRB.js";
import "./chunk-KU6AORFK.js";
import "./chunk-363KKQAV.js";
import "./chunk-OGE3WOJW.js";
import "./chunk-GHPQVNNU.js";
import "./chunk-VBE5VFL5.js";
import "./chunk-DAFTSB3S.js";
import "./chunk-VC3KNIUZ.js";
import "./chunk-L4EC6LZW.js";
import "./chunk-N6TERPCK.js";
import "./chunk-SEOVQLIZ.js";
import "./chunk-EUB5OBXG.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-2UD6J77T.js";
import "./chunk-YYDDGFL6.js";
import "./chunk-SNZZPKBU.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-3WB47P7Q.js";
import "./chunk-6ZI2HC5K.js";
import "./chunk-WESTCUBG.js";
import "./chunk-IZJWCIYF.js";
import "./chunk-BG4U4RTY.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-2ZAGB4JV.js";
import "./chunk-B2CK3GCY.js";
import "./chunk-NINPG5JV.js";
import "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-TRBU6WLM.js";
import "./chunk-XBF3Q5CM.js";
import "./chunk-BSQH3I7W.js";
import "./chunk-PHUXOQ5V.js";
import "./chunk-MR2DYNTG.js";
import "./chunk-65Z5LAMC.js";
import "./chunk-IFZYBBFM.js";
import "./chunk-WYOFTVUU.js";
import "./chunk-S4AV6MOI.js";
import "./chunk-CKW4LZG2.js";
import "./chunk-VYOLHG4T.js";
import "./chunk-TKEIF3N7.js";
import "./chunk-RMOE6XHW.js";
import "./chunk-QAXPIBME.js";
import {
  l
} from "./chunk-WOB72RZU.js";
import "./chunk-HKTC3ZVY.js";
import "./chunk-MQ3WYGQ2.js";
import "./chunk-S4QLDBOB.js";
import {
  e as e2
} from "./chunk-RTA3XNM7.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-XZDT5RTS.js";
import "./chunk-QAP2FVP7.js";
import "./chunk-6EREU4EG.js";
import "./chunk-7DHQ2VMC.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-4GBYHIKO.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import {
  j
} from "./chunk-K5B7AETB.js";
import "./chunk-5APVNM2E.js";
import {
  f as f2
} from "./chunk-73NNNHMH.js";
import {
  b
} from "./chunk-C6YDI6QX.js";
import {
  y
} from "./chunk-DJ5HVIE7.js";
import {
  S
} from "./chunk-KPY4ZIC2.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-LTFI343D.js";
import "./chunk-FVMWI3UB.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import {
  n as n3
} from "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-4GYBOMKF.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import "./chunk-M4LYLB6W.js";
import "./chunk-I6AFDEJM.js";
import {
  p as p2
} from "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import {
  t as t2
} from "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import {
  f
} from "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import {
  C,
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import {
  V as V2
} from "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import {
  o
} from "./chunk-FSFEOCO5.js";
import {
  r as r3
} from "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import {
  m as m2,
  p
} from "./chunk-BECTSF5P.js";
import {
  V,
  Y
} from "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  e,
  m,
  n2,
  t2 as t
} from "./chunk-VTWDBFQT.js";
import {
  a2
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  a
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r as r2
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import {
  r
} from "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/KnowledgeGraphLayer.js
var U = class extends p2(t2(f2(l(b(j(S(e2(f)))))))) {
  constructor(e3) {
    super(e3), this._graphTypeLookup = /* @__PURE__ */ new Map(), this._namedTypesModified = false, this.dataManager = null, this.definitionSetMap = null, this.knowledgeGraph = null, this.layers = new (V2.ofType(Se))(), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.operationalLayerType = "KnowledgeGraphLayer", this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new (V2.ofType(Se))(), this.type = "knowledge-graph", this.url = null, this.addHandles(d(() => this.layers.concat(this.tables), (e4, t3) => this._handleSublayersChange(e4, t3), C));
  }
  load(e3) {
    return this.addResolvingPromise(this._doLoad(e3)), Promise.resolve(this);
  }
  async _doLoad(e3) {
    try {
      await this.loadFromPortal({ supportedTypes: ["Knowledge Graph Layer"] }, e3);
    } catch (t3) {
      a(t3);
    }
    await this._fetchMetadata(), await this._initializeLayerProperties(), this.loadLayerAssumingLocalCache(), this._layersLoadedFromAuthoritativeItem() || await i(this);
  }
  async _fetchMetadata() {
    if (!this.url) throw new s("knowledge-graph:missing-url", "KnowledgeGraphLayer must be created with a url");
    const e3 = await I(this.url);
    this.knowledgeGraph = e3, this._forEachGraphType((e4) => {
      e4.name && this._graphTypeLookup.set(e4.name, e4);
    });
  }
  async _initializeLayerProperties() {
    this.originIdOf("inclusionModeDefinition") === e.USER ? this._validateInclusionModeDefinition() : await this._initializeInclusionModeDefinition(), this._setMemberTypes(), this.dataManager = new E({ knowledgeGraph: this.knowledgeGraph, inclusionModeDefinition: this.inclusionModeDefinition });
  }
  async _initializeInclusionModeDefinition() {
    const e3 = this.definitionSetMap ? await m3(this.definitionSetMap, true) : { generateAllSublayers: true, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    [...this.layers.toArray(), ...this.tables.toArray()].forEach((t3) => {
      const i2 = this._graphTypeLookup.get(t3.graphTypeName);
      i2 && !e3.namedTypeDefinitions.has(i2.name) && e3.namedTypeDefinitions.set(i2.name, { useAllData: true });
    }), this.setAtOrigin("inclusionModeDefinition", e3, t(this.originIdOf("definitionSetMap")));
  }
  _validateInclusionModeDefinition() {
    const { inclusionModeDefinition: e3 } = this;
    if (!e3) return;
    const { namedTypeDefinitions: t3 } = e3;
    if ((t3 == null ? void 0 : t3.size) > 0) t3.forEach((e4, i2) => {
      const o2 = this._graphTypeLookup.get(i2);
      if (!o2) return n.getLogger(this).warn(`A named type, ${i2}, was in the inclusion list that wasn't in the data model and will be removed`), void t3.delete(i2);
      "relationship" !== o2.type && "entity" !== o2.type && (n.getLogger(this).warn(`A named type, ${i2}, was in the inclusion list that wasn't properly modeled and will be removed`), t3.delete(i2));
    });
    else if (!e3.generateAllSublayers) throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
  }
  _setMemberTypes() {
    var _a, _b;
    let e3 = [], t3 = [];
    const { inclusionModeDefinition: i2 } = this, o2 = i2 == null ? void 0 : i2.namedTypeDefinitions;
    !i2 || i2.generateAllSublayers ? (e3 = ((_a = this.knowledgeGraph.dataModel) == null ? void 0 : _a.entityTypes) ?? [], t3 = ((_b = this.knowledgeGraph.dataModel) == null ? void 0 : _b.relationshipTypes) ?? []) : o2 && o2.size > 0 && o2.forEach((i3, o3) => {
      const s2 = this._graphTypeLookup.get(o3);
      switch (s2 == null ? void 0 : s2.type) {
        case "relationship":
          t3.push(s2);
          break;
        case "entity":
          e3.push(s2);
      }
    }), this.memberEntityTypes = e3, this.memberRelationshipTypes = t3;
  }
  _forEachGraphType(e3) {
    var _a, _b;
    [...((_a = this.knowledgeGraph.dataModel) == null ? void 0 : _a.entityTypes) ?? [], ...((_b = this.knowledgeGraph.dataModel) == null ? void 0 : _b.relationshipTypes) ?? []].forEach((t3) => {
      e3(t3);
    });
  }
  _refreshNamedTypes() {
    this._namedTypesModified = true;
    for (const e3 of this.layers) e3.emit("refresh", { dataChanged: true });
    for (const e3 of this.tables) e3.emit("refresh", { dataChanged: true });
  }
  async _handleNewRecords(e3) {
    const t3 = [];
    this.dataManager.addToLayer(e3);
    for (const i2 of e3) this.sublayerIdsCache.has(i2.typeName) || (this.sublayerIdsCache.set(i2.typeName, /* @__PURE__ */ new Set()), t3.push(i2.typeName)), this.sublayerIdsCache.get(i2.typeName).add(i2.id);
    for (const i2 of t3) {
      const e4 = this._graphTypeLookup.get(i2);
      e4 && (this._addSublayer(e4), "entity" === e4.type ? this.dataManager.entityTypeNames.add(i2) : this.dataManager.relationshipTypeNames.add(i2), this.dataManager.sublayerCaches.set(i2, /* @__PURE__ */ new Map()));
    }
    await i(this, t3), this._refreshNamedTypes();
  }
  _createSublayers(e3, t3, i2) {
    e3.forEach((e4) => {
      const o2 = this._createSublayer(e4);
      i2(o2) && t3.push(o2), this._updateSublayerCaches(e4);
    });
  }
  _addSublayer(e3) {
    const t3 = this._createSublayer(e3);
    return t3.geometryType ? this.layers.push(t3) : this.tables.push(t3), t3;
  }
  _createSublayer(e3) {
    return new Se({ objectType: e3, parentCompositeLayer: this, graphType: e3.type });
  }
  _updateSublayers(e3, t3) {
    t3.forEach((t4) => {
      t4.parentCompositeLayer = this;
      const i2 = e3.find((e4) => e4.type === t4.graphType && e4.name === t4.graphTypeName);
      i2 && (t4.objectType = i2, this._updateSublayerCaches(i2));
    });
  }
  _updateSublayerCaches(e3) {
    const t3 = this.dataManager.sublayerCaches;
    t3.has(e3.name) || t3.set(e3.name, /* @__PURE__ */ new Map());
  }
  _saveUrlAsNewResource(e3, t3, i2, o2) {
    e3[t3] = "<pending>", i2.pendingOperations.push(x(this.inclusionModeDefinition).then((s2) => {
      const a3 = P(o2);
      e3[t3] = a3.itemRelativeUrl, i2.toAdd.push({ resource: a3, content: { type: "blob", blob: s2 }, compress: false, finish: (e4) => {
        this.definitionSetMap = e4.url;
      } });
    }));
  }
  _displaysAllRecords(e3) {
    for (const [, { useAllData: t3 }] of e3.namedTypeDefinitions) if (!t3) return false;
    return true;
  }
  _handleSublayersChange(e3, t3) {
    t3 && (t3.forEach((e4) => {
      e4.parent = null;
    }), this.removeHandles("sublayers-owner")), e3 && (e3.forEach((e4) => {
      e4.parent = this;
    }), this.addHandles([e3.on("after-add", ({ item: e4 }) => {
      e4.parent = this;
    }), e3.on("after-remove", ({ item: e4 }) => {
      e4.parent = null;
    })], "sublayers-owner"));
  }
  _layersLoadedFromAuthoritativeItem() {
    const e3 = this.originIdOf("layers");
    return e3 >= e.PORTAL_ITEM && e3 < e.USER;
  }
  readDefinitionSetMap(e3, t3, i2) {
    return p(e3, i2);
  }
  writeDefinitionSetMap(e3, t3, i2, o2) {
    const s2 = o2 == null ? void 0 : o2.portalItem, a3 = o2 == null ? void 0 : o2.resources, r4 = n2(o2 == null ? void 0 : o2.origin);
    if (!s2 || !a3 || null == r4) return void (e3 && (t3[i2] = m2(e3, o2)));
    const { inclusionModeDefinition: n4 } = this;
    if (!n4 || this._displaysAllRecords(n4)) return void (this.definitionSetMap = null);
    const p3 = this.originIdOf("inclusionModeDefinition");
    if (p3 === e.USER || this._namedTypesModified || r4 < p3) this._saveUrlAsNewResource(t3, i2, a3, s2);
    else if (r4 === p3 && e3) {
      const r5 = m2(e3, o2);
      Y(r5) ? this._saveUrlAsNewResource(t3, i2, a3, s2) : t3[i2] = r5;
    }
  }
  set inclusionModeDefinition(e3) {
    "loaded" !== this.loadStatus && "failed" !== this.loadStatus ? this._set("inclusionModeDefinition", e3) : n.getLogger(this).error("#inclusionModeDefinition", "inclusionModeDefinition cannot be changed after the layer is loaded.");
  }
  loadLayerAssumingLocalCache() {
    var _a, _b;
    const e3 = [...this.memberEntityTypes, ...this.memberRelationshipTypes];
    this.originIdOf("layers") === e.DEFAULTS ? this._createSublayers(e3, this.layers, (e4) => !!e4.geometryType) : this._updateSublayers(e3, this.layers), this.originIdOf("tables") === e.DEFAULTS ? this._createSublayers(e3, this.tables, (e4) => !e4.geometryType) : this._updateSublayers(e3, this.tables), (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((e4, t3) => {
      var _a2;
      const i2 = r(this.sublayerIdsCache, t3, () => /* @__PURE__ */ new Set());
      (_a2 = e4.members) == null ? void 0 : _a2.forEach((e5) => {
        i2.add(e5.id);
      });
    });
  }
  async addRecords(e3) {
    await this.load(), await this._handleNewRecords(e3);
  }
  async removeRecords(e3) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    await this.load();
    const t3 = [];
    for (const i2 of e3) false === ((_c = (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.get(i2.typeName)) == null ? void 0 : _c.useAllData) && ((_g = (_f = (_e = (_d = this.dataManager.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.get(i2.typeName)) == null ? void 0 : _f.members) == null ? void 0 : _g.has(i2.id)) && t3.push(i2);
    this.dataManager.removeFromLayer(t3);
    for (const i2 of t3) (_h = this.sublayerIdsCache.get(i2.typeName)) == null ? void 0 : _h.delete(i2.id);
    return this._refreshNamedTypes(), t3;
  }
};
r2([m()], U.prototype, "dataManager", void 0), r2([m({ json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true } } })], U.prototype, "definitionSetMap", void 0), r2([o("definitionSetMap")], U.prototype, "readDefinitionSetMap", null), r2([r3("definitionSetMap")], U.prototype, "writeDefinitionSetMap", null), r2([m()], U.prototype, "inclusionModeDefinition", null), r2([m()], U.prototype, "knowledgeGraph", void 0), r2([m({ type: V2.ofType(Se), json: { write: { ignoreOrigin: true } } })], U.prototype, "layers", void 0), r2([m()], U.prototype, "memberEntityTypes", void 0), r2([m()], U.prototype, "memberRelationshipTypes", void 0), r2([m({ type: ["KnowledgeGraphLayer"] })], U.prototype, "operationalLayerType", void 0), r2([m()], U.prototype, "sublayerIdsCache", void 0), r2([m({ type: V2.ofType(Se), json: { write: { ignoreOrigin: true } } })], U.prototype, "tables", void 0), r2([m({ json: { read: false } })], U.prototype, "type", void 0), r2([m(y)], U.prototype, "url", void 0), U = r2([a2("esri.layers.KnowledgeGraphLayer")], U);
var O = U;
async function x(e3) {
  const t3 = await h(e3);
  return new Blob([t3], { type: "application/x-protobuf" });
}
function P(e3) {
  const t3 = `definitionSetMap-${n3()}.dat`, i2 = V("knowledgeGraphLayer", t3);
  return e3.resourceFromPath(i2);
}
export {
  O as default
};
//# sourceMappingURL=KnowledgeGraphLayer-XZTU4557.js.map
