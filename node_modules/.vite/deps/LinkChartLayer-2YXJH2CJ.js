import {
  A,
  C as C2,
  D,
  E,
  P as P2,
  Se,
  _ as _2,
  a as a2,
  b as b3,
  g,
  h2 as h,
  i,
  i2,
  m2,
  o as o2,
  o2 as o3,
  u as u2,
  v
} from "./chunk-OYUO2SCI.js";
import {
  I,
  S as S2,
  _,
  o,
  t as t3
} from "./chunk-76ZXQ2EB.js";
import "./chunk-OSK4LV4C.js";
import {
  I as I2
} from "./chunk-TFBUHJRB.js";
import "./chunk-KU6AORFK.js";
import "./chunk-363KKQAV.js";
import "./chunk-OGE3WOJW.js";
import "./chunk-GHPQVNNU.js";
import "./chunk-VBE5VFL5.js";
import "./chunk-DAFTSB3S.js";
import "./chunk-VC3KNIUZ.js";
import "./chunk-L4EC6LZW.js";
import "./chunk-N6TERPCK.js";
import "./chunk-SEOVQLIZ.js";
import "./chunk-EUB5OBXG.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-2UD6J77T.js";
import "./chunk-YYDDGFL6.js";
import "./chunk-SNZZPKBU.js";
import {
  st
} from "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-3WB47P7Q.js";
import "./chunk-6ZI2HC5K.js";
import "./chunk-WESTCUBG.js";
import "./chunk-IZJWCIYF.js";
import "./chunk-BG4U4RTY.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-2ZAGB4JV.js";
import "./chunk-B2CK3GCY.js";
import "./chunk-NINPG5JV.js";
import "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-TRBU6WLM.js";
import "./chunk-XBF3Q5CM.js";
import "./chunk-BSQH3I7W.js";
import "./chunk-PHUXOQ5V.js";
import "./chunk-MR2DYNTG.js";
import "./chunk-65Z5LAMC.js";
import "./chunk-IFZYBBFM.js";
import "./chunk-WYOFTVUU.js";
import "./chunk-S4AV6MOI.js";
import "./chunk-CKW4LZG2.js";
import "./chunk-VYOLHG4T.js";
import "./chunk-TKEIF3N7.js";
import "./chunk-RMOE6XHW.js";
import "./chunk-QAXPIBME.js";
import "./chunk-HKTC3ZVY.js";
import "./chunk-MQ3WYGQ2.js";
import "./chunk-S4QLDBOB.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-XZDT5RTS.js";
import "./chunk-QAP2FVP7.js";
import "./chunk-6EREU4EG.js";
import "./chunk-7DHQ2VMC.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-4GBYHIKO.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import "./chunk-73NNNHMH.js";
import {
  b as b2
} from "./chunk-C6YDI6QX.js";
import {
  y
} from "./chunk-DJ5HVIE7.js";
import {
  S
} from "./chunk-KPY4ZIC2.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-LTFI343D.js";
import "./chunk-FVMWI3UB.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import "./chunk-M4LYLB6W.js";
import "./chunk-I6AFDEJM.js";
import {
  p
} from "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import {
  t as t2
} from "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import {
  f
} from "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import {
  C,
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import {
  V
} from "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import {
  P
} from "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import {
  j2 as j
} from "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  e,
  m,
  t2 as t
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  b,
  s as s2,
  u3 as u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r as r2
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import {
  r
} from "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/knowledgeGraph/IdealEdgeLengthTypeOptions.js
var e2;
!function(e3) {
  e3.MULTIPLIER = "multiplier", e3.ABSOLUTE = "absolute-value";
}(e2 || (e2 = {}));

// node_modules/@arcgis/core/layers/LinkChartLayer.js
var q = class extends b2(p(t2(S(f)))) {
  constructor(e3) {
    if (super(e3), this.url = null, this.dataPreloadedInLocalCache = false, this.initializationLinkChartConfig = null, this.membershipModified = true, this._currentLinkChartConfig = { layoutMode: "organic-standard" }, this._graphTypeLookup = /* @__PURE__ */ new Map(), this.dataManager = null, this.knowledgeGraph = null, this.layers = new (V.ofType(Se))(), this.entityLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.relationshipLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.linkChartExtent = new w({ xmin: -1e-7, ymin: -1e-7, xmax: 1e-7, ymax: 1e-7 }), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.operationalLayerType = "LinkChartLayer", this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new (V.ofType(Se))(), this.type = "link-chart", this.chronologicalAuxiliaryGraphics = null, this._originalInclusionList = e3 == null ? void 0 : e3.initializationInclusionModeDefinition, (e3 == null ? void 0 : e3.dataPreloadedInLocalCache) && !(e3 == null ? void 0 : e3.initializationInclusionModeDefinition)) throw new s("knowledge-graph:linkchart-layer-constructor", "If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");
    this.addHandles(d(() => this.layers.concat(this.tables), (e4, t4) => this._handleSublayersChange(e4, t4), C));
  }
  normalizeCtorArgs(e3) {
    if (!e3) return {};
    const { url: t4, title: a3, dataPreloadedInLocalCache: i3, initializationLinkChartConfig: n2 } = e3;
    return { url: t4, title: a3, dataPreloadedInLocalCache: i3, initializationLinkChartConfig: n2 };
  }
  _initializeLayerProperties(e3) {
    var _a, _b, _c, _d;
    if (!this.title && this.url) {
      const e4 = this.url.split("/");
      this.title = e4[e4.length - 2];
    }
    const t4 = /* @__PURE__ */ new Set();
    let a3 = [], o4 = [];
    if (e3.inclusionModeDefinition && (!e3.inclusionModeDefinition.namedTypeDefinitions || e3.inclusionModeDefinition.namedTypeDefinitions.size < 1)) throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
    ((_a = e3.inclusionModeDefinition) == null ? void 0 : _a.generateAllSublayers) ? (a3 = e3.knowledgeGraph.dataModel.entityTypes ?? [], o4 = e3.knowledgeGraph.dataModel.relationshipTypes ?? []) : ((_b = e3.inclusionModeDefinition) == null ? void 0 : _b.namedTypeDefinitions) && ((_c = e3.inclusionModeDefinition) == null ? void 0 : _c.namedTypeDefinitions.size) > 0 ? (_d = e3.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions.forEach((i3, r4) => {
      var _a2, _b2;
      const s3 = this._graphTypeLookup.get(r4);
      if (!s3) return n.getLogger(this).warn(`A named type, ${r4}, was in the inclusion list that wasn't in the data model and will be removed`), void ((_a2 = e3.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.delete(r4));
      "relationship" === s3.type ? t4.has(r4) || (t4.add(r4), o4.push(s3)) : "entity" === s3.type ? t4.has(r4) || (t4.add(r4), a3.push(s3)) : (n.getLogger(this).warn(`A named type, ${r4}, was in the inclusion list that wasn't properly modeled and will be removed`), (_b2 = e3.inclusionModeDefinition) == null ? void 0 : _b2.namedTypeDefinitions.delete(r4));
    }) : (a3 = e3.knowledgeGraph.dataModel.entityTypes ?? [], o4 = e3.knowledgeGraph.dataModel.relationshipTypes ?? []);
    const r3 = new E({ knowledgeGraph: e3.knowledgeGraph, inclusionModeDefinition: e3.inclusionModeDefinition });
    this.knowledgeGraph = e3.knowledgeGraph, this.memberEntityTypes = a3, this.memberRelationshipTypes = o4, this.dataManager = r3;
  }
  load(e3) {
    const a3 = async () => {
      var _a;
      const e4 = [], t4 = [];
      this.loadLayerAssumingLocalCache(), this._layersLoadedFromAuthoritativeItem() || await i2(this), this.dataManager.inclusionModeDefinition && (this.dataManager.inclusionModeDefinition.generateAllSublayers = false), (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions.forEach((e5) => {
        e5.useAllData = false;
      }), await this._initializeDiagram(), this.layers.forEach((a4) => {
        t4.push(a4.refreshCachedQueryEngine()), e4.push(new Promise((e5) => {
          a4.on("layerview-create", () => {
            e5(null);
          });
        }));
      }), this.tables.forEach((e5) => {
        t4.push(e5.refreshCachedQueryEngine());
      }), await Promise.all(t4);
    };
    return this.addResolvingPromise(new Promise((i3) => {
      I2(this.url).then(async (n2) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
        (_a = n2.dataModel.entityTypes) == null ? void 0 : _a.forEach((e4) => {
          e4.name && this._graphTypeLookup.set(e4.name, e4);
        }), (_b = n2.dataModel.relationshipTypes) == null ? void 0 : _b.forEach((e4) => {
          e4.name && this._graphTypeLookup.set(e4.name, e4);
        });
        const r3 = (_c = this.linkChart) == null ? void 0 : _c.linkChartProperties;
        if ((r3 == null ? void 0 : r3.originIdOf("entitiesUrl")) === e.LINK_CHART && (this.membershipModified = false, this._originalInclusionList = await D.fetchAndConvertSerializedLinkChart({ entitiesUrl: r3 == null ? void 0 : r3.entitiesUrl, relationshipsUrl: r3 == null ? void 0 : r3.relationshipsUrl }), this._alignLayersDataModelAndInclusionDefinition(n2.dataModel), this.initializationLinkChartConfig = { layoutSettings: (r3 == null ? void 0 : r3.layoutSettings) ?? void 0, layoutMode: C2(r3.layoutType) }), this._initializeLayerProperties({ knowledgeGraph: n2, inclusionModeDefinition: this._originalInclusionList }), ((_e = (_d = this.dataManager.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.size) || (this.dataManager.inclusionModeDefinition = { generateAllSublayers: false, namedTypeDefinitions: /* @__PURE__ */ new Map() }, (_f = this.dataManager.knowledgeGraph.dataModel.entityTypes) == null ? void 0 : _f.forEach((e4) => {
          var _a2;
          e4.name && ((_a2 = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.set(e4.name, { useAllData: true }));
        }), (_g = this.dataManager.knowledgeGraph.dataModel.relationshipTypes) == null ? void 0 : _g.forEach((e4) => {
          var _a2;
          e4.name && ((_a2 = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a2.namedTypeDefinitions.set(e4.name, { useAllData: true }));
        })), this.dataPreloadedInLocalCache) {
          const e4 = o2.getInstance();
          for (const [t4, a4] of ((_h = this.dataManager.inclusionModeDefinition) == null ? void 0 : _h.namedTypeDefinitions) ?? []) for (const i4 of ((_i = a4.members) == null ? void 0 : _i.values()) ?? []) {
            const a5 = e4.readFromStoreById(`${t4}__${i4.id}`);
            if (a5) {
              r(this.dataManager.sublayerCaches, t4, () => /* @__PURE__ */ new Map()).set(i4.id, a5);
            }
          }
          await a3();
        } else {
          const t4 = "geographic-organic-standard" === ((_j = this.initializationLinkChartConfig) == null ? void 0 : _j.layoutMode);
          this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0, false, t4, true).then(async () => {
            s2(e3), await a3();
          }));
        }
        i3(null);
      });
    })), Promise.resolve(this);
  }
  set initializationInclusionModeDefinition(e3) {
    "loaded" !== this.loadStatus && "failed" !== this.loadStatus ? this._set("initializationInclusionModeDefinition", e3) : n.getLogger(this).error("#initializationInclusionModeDefinition", "initializationInclusionModeDefinition cannot be changed after the layer is loaded.");
  }
  get linkChart() {
    return this.parent;
  }
  async addRecords(e3, t4) {
    let a3 = [];
    (t4 == null ? void 0 : t4.cascadeAddRelationshipEndNodes) && this.dataManager.knowledgeGraph.dataModel && (a3 = await g(e3, this.dataManager.knowledgeGraph));
    const i3 = e3.concat(a3).filter((e4) => {
      var _a;
      return !((_a = this.sublayerIdsCache.get(e4.typeName)) == null ? void 0 : _a.has(e4.id));
    });
    i3.length > 0 && (this.membershipModified = true), await this._handleNewRecords(i3, t4);
  }
  async removeRecords(e3, { cascadeRemoveRelationships: t4 = true, recalculateLayout: a3 = false, overrideMembershipCheck: i3 = false } = { cascadeRemoveRelationships: true, recalculateLayout: false, overrideMembershipCheck: false }) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let n2 = [];
    for (const r3 of e3) (i3 || false === ((_c = (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.get(r3.typeName)) == null ? void 0 : _c.useAllData) && ((_g = (_f = (_e = (_d = this.dataManager.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.get(r3.typeName)) == null ? void 0 : _f.members) == null ? void 0 : _g.has(r3.id))) && n2.push(r3);
    if (t4) {
      const e4 = /* @__PURE__ */ new Set(), t5 = [];
      for (const a4 of n2) if (this.dataManager.nodeConnectionsLookup.has(a4.id)) for (const t6 of this.dataManager.nodeConnectionsLookup.get(a4.id)) e4.add(t6);
      for (const a4 of e4) if (this.dataManager.memberIdTypeLookup.has(a4)) for (const e5 of this.dataManager.memberIdTypeLookup.get(a4)) this.dataManager.relationshipTypeNames.has(e5) && t5.push({ id: a4, typeName: e5 });
      n2 = n2.concat(t5);
    }
    this.dataManager.removeFromLayer(n2);
    for (const r3 of n2) (_h = this.sublayerIdsCache.get(r3.typeName)) == null ? void 0 : _h.delete(r3.id), this.dataManager.relationshipTypeNames.has(r3.typeName) ? this.relationshipLinkChartDiagramLookup.delete(r3.id) : this.entityLinkChartDiagramLookup.delete(r3.id);
    a3 && await this._calculateLayoutWithSublayerTimeInfo(this._currentLinkChartConfig.layoutMode, { layoutSettings: this._currentLinkChartConfig.layoutSettings }), n2.length > 0 && (this.membershipModified = true);
    const o4 = [];
    return this.layers.forEach((e4) => {
      o4.push(e4.refreshCachedQueryEngine());
    }), await Promise.all(o4), this._refreshNamedTypes(), n2;
  }
  async expand(e3, t4) {
    let a3 = [];
    try {
      const i3 = await this.dataManager.getConnectedRecordIds(e3, t4 == null ? void 0 : t4.relationshipTypeNames, t4);
      a3 = i3.filter((e4) => {
        var _a;
        return !((_a = this.sublayerIdsCache.get(e4.typeName)) == null ? void 0 : _a.has(e4.id));
      }), await this._handleNewRecords(i3, t4), i3.length > 0 && (this.membershipModified = true), s2(t4 == null ? void 0 : t4.signal);
    } catch (i3) {
      throw b(i3) && a3.length > 0 && this.removeRecords(a3, { overrideMembershipCheck: true }), i3;
    }
    return { records: a3 };
  }
  loadLayerAssumingLocalCache() {
    var _a, _b;
    const e3 = [...this.memberRelationshipTypes, ...this.memberEntityTypes];
    this.originIdOf("layers") === e.DEFAULTS ? this._createSublayers(e3, this.layers, (e4) => !!e4.geometryType) : this._updateSublayers(e3, this.layers), this.originIdOf("tables") === e.DEFAULTS ? this._createSublayers(e3, this.tables, (e4) => !e4.geometryType) : this._updateSublayers(e3, this.tables), (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((e4, t4) => {
      var _a2;
      const a3 = r(this.sublayerIdsCache, t4, () => /* @__PURE__ */ new Set());
      (_a2 = e4.members) == null ? void 0 : _a2.forEach(({ id: e5, linkChartLocation: i3 }) => {
        if (a3.add(e5), i3) {
          const a4 = "coords" in i3 && "lengths" in i3 ? i3 : st(i3);
          this.dataManager.relationshipTypeNames.has(t4) ? this.relationshipLinkChartDiagramLookup.set(e5, a4) : this.entityLinkChartDiagramLookup.set(e5, a4);
        }
      });
    });
  }
  async calculateLinkChartLayout(e3 = "organic-standard", t4) {
    var _a, _b, _c, _d, _e, _f, _g;
    const a3 = [], r3 = [], l = [];
    this.dataManager.sublayerCaches.forEach((e4, t5) => {
      this.dataManager.entityTypeNames.has(t5) ? e4.forEach((e5) => {
        a3.push({ typeName: t5, feature: e5 });
      }) : this.dataManager.relationshipTypeNames.has(t5) && e4.forEach((e5) => {
        r3.push({ typeName: t5, feature: e5 });
      });
    }), this.entityLinkChartDiagramLookup = /* @__PURE__ */ new Map(), this.relationshipLinkChartDiagramLookup = /* @__PURE__ */ new Map();
    const d2 = /* @__PURE__ */ new Map(), p2 = /* @__PURE__ */ new Map(), c = /* @__PURE__ */ new Map(), u3 = /* @__PURE__ */ new Map(), y2 = new Uint8Array(a3.length), g2 = new Float64Array(a3.length), b4 = new Float64Array(a3.length), v2 = new Float64Array(a3.length), D2 = new Float64Array(a3.length), x = new Uint32Array(r3.length), I3 = new Uint32Array(r3.length), E2 = new Float64Array(r3.length), S3 = new Float64Array(r3.length), _3 = [], R = "organic-standard", A2 = new w({ xmin: -1e-7, ymin: -1e-7, xmax: 1e-7, ymax: 1e-7 });
    let j2, G = "organic-standard", V2 = 0, q2 = 0;
    const J2 = m2.apply;
    switch (G = "geographic-organic-standard" === e3 ? R : e3, G) {
      case "organic-standard":
        j2 = v.apply;
        break;
      case "organic-community":
        j2 = A.apply;
        break;
      case "hierarchical-bottom-to-top":
        j2 = P2.apply;
        break;
      case "radial-root-centric":
        j2 = _2.apply;
        break;
      case "tree-left-to-right":
        j2 = h.apply;
        break;
      default:
        j2 = b3.apply;
    }
    let X = false;
    a3.forEach(({ typeName: a4, feature: i3 }) => {
      var _a2, _b2, _c2, _d2, _e2;
      if ("chronological-mono-timeline" !== e3 && "chronological-multi-timeline" !== e3 && ((_a2 = t4 == null ? void 0 : t4.lockedNodeLocations) == null ? void 0 : _a2.has(i3.attributes[_]))) {
        "geographic-organic-standard" === e3 && this.dataManager.geographicLookup.has(a4) ? y2[V2] = i.IsGeographic : y2[V2] = i.None;
        const n2 = t4.lockedNodeLocations.get(i3.attributes[_]);
        g2[V2] = n2.x, b4[V2] = n2.y;
      } else if ("geographic-organic-standard" === e3 && this.dataManager.geographicLookup.has(a4)) {
        y2[V2] = i.IsGeographic;
        let e4 = null;
        const t5 = i3.attributes[this.dataManager.geographicLookup.get(a4).name], n2 = (_b2 = this.dataManager.geographicLookup.get(a4)) == null ? void 0 : _b2.geometryType;
        switch (n2) {
          case "esriGeometryPoint":
            g2[V2] = t5 == null ? void 0 : t5.x, b4[V2] = t5 == null ? void 0 : t5.y;
            break;
          case "esriGeometryPolygon":
            e4 = t5 == null ? void 0 : t5.centroid, null != (e4 == null ? void 0 : e4.x) && null != (e4 == null ? void 0 : e4.y) ? (g2[V2] = e4.x, b4[V2] = e4.y) : y2[V2] = i.IsMovable;
            break;
          case "esriGeometryPolyline":
          case "esriGeometryMultipoint":
            e4 = (_c2 = t5 == null ? void 0 : t5.extent) == null ? void 0 : _c2.center, null != (e4 == null ? void 0 : e4.x) && null != (e4 == null ? void 0 : e4.y) ? (g2[V2] = e4.x, b4[V2] = e4.y) : y2[V2] = i.IsMovable;
            break;
          default:
            y2[V2] = i.IsMovable;
        }
        (null == g2[V2] || null == b4[V2] || Number.isNaN(g2[V2]) || Number.isNaN(b4[V2])) && (y2[V2] = i.IsMovable, g2[V2] = 0, b4[V2] = 0);
      } else if ("chronological-mono-timeline" === e3 || "chronological-multi-timeline" === e3) {
        !X && ((_d2 = t4 == null ? void 0 : t4.lockedNodeLocations) == null ? void 0 : _d2.has(i3.attributes[_])) && (X = true);
        const e4 = (_e2 = t4 == null ? void 0 : t4.timeInfoByTypeName) == null ? void 0 : _e2.get(a4), n2 = e4 == null ? void 0 : e4.startField, o4 = n2 && (e4 == null ? void 0 : e4.startField) ? i3.attributes[n2] : null;
        v2[V2] = o4 ? new Date(o4).getTime() : NaN;
        const r4 = e4 == null ? void 0 : e4.endField, s3 = r4 && (e4 == null ? void 0 : e4.endField) ? i3.attributes[r4] : null;
        D2[V2] = s3 ? new Date(s3).getTime() : NaN, g2[V2] = 0, b4[V2] = 0, y2[V2] = i.IsMovable;
      } else y2[V2] = i.IsMovable, g2[V2] = 0, b4[V2] = 0;
      u3.set(i3.attributes[_], V2), _3[V2] = { feature: i3, typeName: a4 }, V2++;
    }), X && n.getLogger(this).warn("Locked node locations are not supported for chronological layout at this time.  Requested node locations were ignored");
    let Y = false;
    const Z = /* @__PURE__ */ new Map();
    r3.forEach((a4) => {
      var _a2;
      const i3 = a4.feature.attributes[I], n2 = a4.feature.attributes[t3], o4 = u3.get(i3), r4 = u3.get(n2), s3 = (_a2 = t4 == null ? void 0 : t4.timeInfoByTypeName) == null ? void 0 : _a2.get(a4.typeName), h2 = (t4 == null ? void 0 : t4.timeInfoByTypeName) ? s3 == null ? void 0 : s3.startField : null, d3 = h2 ? a4.feature.attributes[h2] : null, p3 = s3 == null ? void 0 : s3.endField, c2 = p3 ? a4.feature.attributes[p3] : null;
      if (void 0 !== o4 && void 0 !== r4) {
        let t5 = i3 + "-" + n2;
        "chronological-mono-timeline" !== e3 && "chronological-multi-timeline" !== e3 || (t5 = t5 + "-" + d3 + "-" + c2);
        const s4 = Z.get(t5), h3 = s4 == null ? void 0 : s4.has(a4.typeName);
        h3 || (x[q2] = o4, I3[q2] = r4, "chronological-mono-timeline" !== e3 && "chronological-multi-timeline" !== e3 || (E2[q2] = d3 ? new Date(d3).getTime() : NaN, S3[q2] = c2 ? new Date(c2).getTime() : NaN), void 0 === s4 ? Z.set(t5, /* @__PURE__ */ new Map([[a4.typeName, q2]])) : s4.set(a4.typeName, q2), q2++), l.push(a4);
      } else Y = true, this.relationshipLinkChartDiagramLookup.set(i3, null);
    }), Y && n.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");
    const ee = this._validateOrganicLayoutSettings(e3, (_a = t4 == null ? void 0 : t4.layoutSettings) == null ? void 0 : _a.organicLayoutSettings), te = this._convertValidatedOrganicSettingsToCalculationSettings(ee);
    await a2();
    let ae = o3.Error, ie = null;
    if ("chronological-mono-timeline" === e3 || "chronological-multi-timeline" === e3) {
      let a4;
      ({ status: ae, links: ie, graphics: a4 } = J2(() => {
        var _a2;
        return ((_a2 = t4 == null ? void 0 : t4.signal) == null ? void 0 : _a2.aborted) ?? false;
      }, y2, g2, b4, v2, D2, x.subarray(0, q2), I3.subarray(0, q2), E2.subarray(0, q2), S3.subarray(0, q2), "chronological-multi-timeline" === e3, (_b = t4 == null ? void 0 : t4.layoutSettings) == null ? void 0 : _b.chronologicalLayoutSettings)), ae === o3.Success && (this.chronologicalAuxiliaryGraphics = a4);
    } else ({ status: ae, links: ie } = j2(() => {
      var _a2;
      return ((_a2 = t4 == null ? void 0 : t4.signal) == null ? void 0 : _a2.aborted) ?? false;
    }, y2, g2, b4, x.subarray(0, q2), I3.subarray(0, q2), te.computationBudgetTime, te.idealEdgeLengthMultiplier, te.repulsionRadiusMultiplier));
    if (s2(t4 == null ? void 0 : t4.signal), ae === o3.Error) throw new s("knowledge-graph:layout-failed", "Attempting to arrange the records in the specified layout failed");
    if (ae === o3.Canceled) throw u();
    for (let i3 = 0; i3 < _3.length; i3++) {
      if (b4[i3] > 84.9999 ? b4[i3] = 84.9999 : b4[i3] < -84.9999 && (b4[i3] = -84.9999), g2[i3] > 179.9999 ? g2[i3] = 179.9999 : g2[i3] < -179.9999 && (g2[i3] = -179.9999), _3[i3].feature.attributes[S2] = new j(g2[i3], b4[i3]), d2.has(_3[i3].typeName)) {
        const e5 = d2.get(_3[i3].typeName);
        e5 == null ? void 0 : e5.set(_3[i3].feature.attributes[_], _3[i3].feature);
      } else {
        const e5 = /* @__PURE__ */ new Map();
        e5.set(_3[i3].feature.attributes[_], _3[i3].feature), d2.set(_3[i3].typeName, e5);
      }
      c.set(_3[i3].feature.attributes[_], _3[i3].feature);
      const e4 = st(_3[i3].feature.attributes[S2]);
      this.entityLinkChartDiagramLookup.set(_3[i3].feature.attributes[_], _3[i3].feature.attributes[S2] ? e4 : null);
      const t5 = r(this.dataManager.inclusionModeDefinition.namedTypeDefinitions, _3[i3].typeName, () => ({ useAllData: false, members: /* @__PURE__ */ new Map() }));
      r(t5.members, _3[i3].feature.attributes[_], () => ({ id: _3[i3].feature.attributes[_], linkChartLocation: void 0 })).linkChartLocation = _3[i3].feature.attributes[S2], _3[i3].feature.attributes[S2].x < A2.xmin && (A2.xmin = _3[i3].feature.attributes[S2].x), _3[i3].feature.attributes[S2].x > A2.xmax && (A2.xmax = _3[i3].feature.attributes[S2].x), _3[i3].feature.attributes[S2].y < A2.ymin && (A2.ymin = _3[i3].feature.attributes[S2].y), _3[i3].feature.attributes[S2].y > A2.ymax && (A2.ymax = _3[i3].feature.attributes[S2].y);
    }
    if (this.linkChartExtent.xmin = A2.xmin, this.linkChartExtent.xmax = A2.xmax, this.linkChartExtent.ymin = A2.ymin, this.linkChartExtent.ymax = A2.ymax, !ie) throw new s("knowledge-graph:layout-failed", "Attempting to retrieve link geometry from diagram engine failed");
    const ne = /* @__PURE__ */ new Map(), oe = /* @__PURE__ */ new Map(), re = /* @__PURE__ */ new Map(), se = /* @__PURE__ */ new Set();
    for (let i3 = 0; i3 < l.length; i3++) {
      const a4 = [], r4 = l[i3], s3 = r4.feature.attributes[I], h2 = r4.feature.attributes[t3];
      let d3 = s3 + "-" + h2;
      if ("chronological-mono-timeline" === e3 || "chronological-multi-timeline" === e3) {
        const e4 = (_c = t4 == null ? void 0 : t4.timeInfoByTypeName) == null ? void 0 : _c.get(r4.typeName), a5 = (t4 == null ? void 0 : t4.timeInfoByTypeName) ? e4 == null ? void 0 : e4.startField : null, i4 = a5 ? r4.feature.attributes[a5] : null, n2 = e4 == null ? void 0 : e4.endField;
        d3 += "-" + i4 + "-" + (n2 ? r4.feature.attributes[n2] : null);
      }
      const y3 = Z.get(d3).get(r4.typeName), g3 = 0 === y3 ? 0 : ie == null ? void 0 : ie.vertexEndIndex[y3 - 1];
      if (!se.has(y3)) {
        if (se.add(y3), ie.types[y3] === u2.Recursive) {
          const e4 = [ie.vertices[2 * g3], ie.vertices[2 * g3 + 1]], t5 = [ie.vertices[2 * (g3 + 1)], ie.vertices[2 * (g3 + 1) + 1]], i4 = [0.5 * (e4[0] + t5[0]), 0.5 * (e4[1] + t5[1])], n2 = [i4[0] - e4[0], i4[1] - e4[1]], o4 = [i4[0] + n2[1], i4[1] - n2[0]], r5 = [i4[0] - n2[1], i4[1] + n2[0]];
          a4.push(e4), a4.push(o4), a4.push(t5), a4.push(r5), a4.push(e4);
        } else {
          if (ie.types[y3] !== u2.Regular) {
            n.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");
            continue;
          }
          for (let e4 = g3; e4 < ie.vertexEndIndex[y3]; e4++) a4.push([ie.vertices[2 * e4], ie.vertices[2 * e4 + 1]]);
        }
        if ("chronological-mono-timeline" !== e3 && "chronological-multi-timeline" !== e3) {
          const e4 = (_d = _3[u3.get(s3)]) == null ? void 0 : _d.feature.attributes[S2], t5 = (_e = _3[u3.get(h2)]) == null ? void 0 : _e.feature.attributes[S2];
          a4[0][0] === e4.x && a4[0][1] === e4.y || (a4[0] = [e4.x, e4.y]), a4[a4.length - 1][0] === t5.x && a4[a4.length - 1][1] === t5.y || (a4[a4.length - 1] = [t5.x, t5.y]);
        }
        for (let e4 = 1; e4 < a4.length - 1; e4++) a4[e4][1] > 85.5 ? a4[e4][1] = 85.5 : a4[e4][1] < -85.5 && (a4[e4][1] = -85.5), a4[e4][0] > 179.9999 ? a4[e4][0] = 179.9999 : a4[e4][0] < -179.9999 && (a4[e4][0] = -179.9999);
        ne.has(d3) ? ne.get(d3).push(a4) : ne.set(d3, [a4]);
      }
      const m3 = ne.get(d3);
      oe.has(d3) || (oe.set(d3, /* @__PURE__ */ new Map()), re.set(d3, /* @__PURE__ */ new Map()));
      const f2 = oe.get(d3), b5 = re.get(d3);
      f2.has(r4.typeName) || (f2.set(r4.typeName, m3.shift()), b5.set(r4.typeName, 0));
      const N = f2.get(r4.typeName);
      b5.set(r4.typeName, b5.get(r4.typeName) + 1);
      const v3 = new P({ paths: [N] });
      if (r4.feature.attributes[S2] = v3, p2.has(r4.typeName)) {
        const e4 = p2.get(r4.typeName);
        e4 == null ? void 0 : e4.set(r4.feature.attributes[_], r4.feature);
      } else {
        const e4 = /* @__PURE__ */ new Map();
        e4.set(r4.feature.attributes[_], r4.feature), p2.set(r4.typeName, e4);
      }
      c.set(r4.feature.attributes[_], r4.feature);
      const D3 = st(r4.feature.attributes[S2]);
      this.relationshipLinkChartDiagramLookup.set(r4.feature.attributes[_], r4.feature.attributes[S2] ? D3 : null);
      const x2 = r(this.dataManager.inclusionModeDefinition.namedTypeDefinitions, r4.typeName, () => ({ useAllData: false, members: /* @__PURE__ */ new Map() }));
      r(x2.members, r4.feature.attributes[_], () => ({ id: r4.feature.attributes[_], linkChartLocation: void 0 })).linkChartLocation = D3;
    }
    for (const i3 of l) i3.feature.attributes[o] = ((_f = re.get(i3.feature.attributes[I] + "-" + i3.feature.attributes[t3])) == null ? void 0 : _f.get(i3.typeName)) ?? null;
    return this._currentLinkChartConfig = { layoutMode: e3, layoutSettings: (_g = t4 == null ? void 0 : t4.layoutSettings) == null ? void 0 : _g.clone() }, { nodes: d2, links: p2, idMap: c };
  }
  async applyNewLinkChartLayout(e3 = "organic-standard", t4) {
    const a3 = [];
    await this._calculateLayoutWithSublayerTimeInfo(e3, t4), this.layers.forEach((e4) => {
      a3.push(e4.refreshCachedQueryEngine());
    }), this.membershipModified = true, await Promise.all(a3), this._refreshNamedTypes();
  }
  getCurrentNodeLocations() {
    var _a, _b;
    const e3 = /* @__PURE__ */ new Map();
    for (const [t4, a3] of ((_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions.entries()) ?? []) this.dataManager.relationshipTypeNames.has(t4) || ((_b = a3 == null ? void 0 : a3.members) == null ? void 0 : _b.forEach((t5) => {
      const a4 = t5.linkChartLocation;
      let i3;
      const n2 = t5.id;
      a4 && (i3 = "x" in a4 ? { x: a4.x, y: a4.y } : { x: a4.coords[0], y: a4.coords[1] }, e3.set(n2, new j({ x: i3.x, y: i3.y })));
    }));
    return e3;
  }
  async refreshLinkChartCache(e3) {
    await this.dataManager.refreshCacheContent(e3);
    const t4 = [];
    this.layers.forEach((e4) => {
      t4.push(e4.refreshCachedQueryEngine());
    }), await Promise.all(t4), this._refreshNamedTypes();
  }
  async connectBetweenEntities(e3, t4) {
    if (!e3.length) return { records: [] };
    let a3 = [];
    try {
      let i3 = [];
      for (const e4 of this.dataManager.relationshipTypeNames) {
        const t5 = this.sublayerIdsCache.get(e4);
        t5 && (i3 = i3.concat(Array.from(t5.keys())));
      }
      a3 = await this.dataManager.getRelationshipsBetweenNodes(e3, i3, t4), await this._handleNewRecords(a3, t4), s2(t4);
    } catch (i3) {
      throw b(i3) && this.removeRecords(a3), i3;
    }
    return { records: a3 };
  }
  async connectFromEntities(e3, t4) {
    if (!e3.length) return { records: [] };
    let a3 = [];
    try {
      let i3 = [];
      for (const e4 of this.dataManager.relationshipTypeNames) {
        const t5 = this.sublayerIdsCache.get(e4);
        t5 && (i3 = i3.concat(Array.from(t5.keys())));
      }
      let n2 = [];
      for (const e4 of this.dataManager.entityTypeNames) {
        const t5 = this.sublayerIdsCache.get(e4);
        t5 && (n2 = n2.concat(Array.from(t5)));
      }
      a3 = await this.dataManager.getRelationshipsFromNodes(e3, n2, i3, t4), await this._handleNewRecords(a3, t4), a3.length > 0 && (this.membershipModified = true), s2(t4);
    } catch (i3) {
      throw b(i3) && this.removeRecords(a3), i3;
    }
    return { records: a3 };
  }
  getCurrentLayout() {
    return this._currentLinkChartConfig.layoutMode;
  }
  async _calculateLayoutWithSublayerTimeInfo(e3 = "organic-standard", t4) {
    var _a;
    const a3 = /* @__PURE__ */ new Map();
    this.layers.forEach((e4) => {
      a3.set(e4.objectType.name, e4.timeInfo);
    }), await this.calculateLinkChartLayout(e3, { timeInfoByTypeName: a3, ...t4 }), (_a = this.linkChart) == null ? void 0 : _a.handleChronologicalOverlay();
  }
  async _handleNewRecords(e3, t4) {
    const a3 = [];
    this.dataManager.addToLayer(e3);
    for (const n2 of e3) this.sublayerIdsCache.has(n2.typeName) || (this.sublayerIdsCache.set(n2.typeName, /* @__PURE__ */ new Set()), a3.push(n2.typeName)), this.sublayerIdsCache.get(n2.typeName).add(n2.id);
    for (const n2 of a3) {
      const e4 = this._graphTypeLookup.get(n2);
      if (e4) {
        const t5 = this._createSublayer(e4);
        "entity" === e4.type ? this.dataManager.entityTypeNames.add(n2) : this.dataManager.relationshipTypeNames.add(n2), t5.geometryType ? this.layers.push(t5) : this.tables.push(t5), this.dataManager.sublayerCaches.set(n2, /* @__PURE__ */ new Map());
      }
    }
    await i2(this, a3, t4), await this.dataManager.refreshCacheContent(e3.map((e4) => e4.id), void 0, void 0, void 0, t4);
    const i3 = { layoutSettings: this._currentLinkChartConfig.layoutSettings, lockedNodeLocations: /* @__PURE__ */ new Map() };
    for (const [n2, o4] of this.entityLinkChartDiagramLookup.entries()) o4 && i3.lockedNodeLocations.set(n2, new j(o4.coords[0], o4.coords[1]));
    await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode, i3);
  }
  _createSublayers(e3, t4, a3) {
    e3.forEach((e4) => {
      const i3 = this._createSublayer(e4);
      a3(i3) && t4.push(i3), this._updateSublayerCaches(e4);
    });
  }
  _updateSublayers(e3, t4) {
    t4.forEach((t5) => {
      t5.parentCompositeLayer = this;
      const a3 = e3.find((e4) => e4.type === t5.graphType && e4.name === t5.graphTypeName);
      a3 && (t5.objectType = a3, t5.read({ title: a3.name }, { origin: "service" }), this._updateSublayerCaches(a3));
    });
  }
  _updateSublayerCaches(e3) {
    const t4 = this.dataManager.sublayerCaches;
    t4.has(e3.name) || t4.set(e3.name, /* @__PURE__ */ new Map());
  }
  _layersLoadedFromAuthoritativeItem() {
    const e3 = this.originIdOf("layers");
    return e3 >= e.PORTAL_ITEM && e3 < e.USER;
  }
  async _initializeDiagram() {
    var _a, _b;
    this.initializationLinkChartConfig ? this.initializationLinkChartConfig.doNotRecalculateLayout ? ((_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((e3, t4) => {
      var _a2;
      (_a2 = e3 == null ? void 0 : e3.members) == null ? void 0 : _a2.forEach((e4) => {
        const a3 = e4.linkChartLocation;
        let i3;
        const n2 = e4.id;
        if (!a3) return;
        i3 = "x" in a3 ? { x: a3.x, y: a3.y } : { x: a3.coords[0], y: a3.coords[1] };
        const o4 = st(i3);
        this.dataManager.relationshipTypeNames.has(t4) ? this.relationshipLinkChartDiagramLookup.set(n2, o4) : this.entityLinkChartDiagramLookup.set(n2, o4), this.linkChartExtent.xmin > i3.x && (this.linkChartExtent.xmin = i3.x), this.linkChartExtent.xmax < i3.x && (this.linkChartExtent.xmax = i3.x), this.linkChartExtent.ymin > i3.y && (this.linkChartExtent.ymin = i3.y), this.linkChartExtent.ymax < i3.y && (this.linkChartExtent.ymax = i3.y);
      });
    }), this.memberRelationshipTypes.forEach((e3) => {
      var _a2;
      e3.name && ((_a2 = this.dataManager.sublayerCaches.get(e3.name)) == null ? void 0 : _a2.forEach((e4) => {
        const t4 = this.relationshipLinkChartDiagramLookup.get(e4.attributes[I]), a3 = this.relationshipLinkChartDiagramLookup.get(e4.attributes[t3]);
        if (t4 && a3) {
          const i3 = st(new P({ paths: [[[t4.coords[0], t4.coords[1]], [a3.coords[0], a3.coords[1]]]] }));
          this.relationshipLinkChartDiagramLookup.set(e4.attributes[_], i3);
        } else this.relationshipLinkChartDiagramLookup.set(e4.attributes[_], null);
      }));
    })) : await this._calculateLayoutWithSublayerTimeInfo(this.initializationLinkChartConfig.layoutMode, { lockedNodeLocations: this.getCurrentNodeLocations(), ...this.initializationLinkChartConfig || {} }) : await this._calculateLayoutWithSublayerTimeInfo("organic-standard", { lockedNodeLocations: this.getCurrentNodeLocations() });
  }
  _refreshNamedTypes() {
    for (const e3 of this.layers) e3.emit("refresh", { dataChanged: true });
    for (const e3 of this.tables) e3.emit("refresh", { dataChanged: true });
  }
  _validateOrganicLayoutSettings(e3, t4) {
    const a3 = (e4) => "number" == typeof e4 && !isNaN(e4), i3 = (e4) => a3(e4) && e4 >= 1, o4 = (e4) => a3(e4) && e4 >= 1, r3 = (e4) => Object.values(e2).includes(e4), s3 = (e4) => a3(e4) && e4 >= 0, l = {};
    if (!(/* @__PURE__ */ new Set(["organic-standard", "organic-community", "geographic-organic-standard", "chronological-multi-timeline", "chronological-mono-timeline"])).has(e3) || !t4) return l;
    const { computationBudgetTime: h2, autoRepulsionRadius: d2, repulsionRadiusMultiplier: p2, absoluteIdealEdgeLength: c, multiplicativeIdealEdgeLength: u3, idealEdgeLengthType: y2 } = t4;
    return o4(h2) ? l.computationBudgetTime = h2 : h2 && n.getLogger(this).warn("Invalid layout computationBudgetTime setting, will revert to default setting"), l.autoRepulsionRadius = d2, !d2 && i3(p2) ? l.repulsionRadiusMultiplier = p2 : d2 || (l.autoRepulsionRadius = true, n.getLogger(this).warn("Invalid layout repulsionRadiusMultiplier setting, will revert to default setting")), "geographic-organic-standard" === e3 && (r3(y2) ? l.idealEdgeLengthType = y2 : void 0 !== y2 && n.getLogger(this).warn('Invalid layout idealEdgeLengthType setting, will revert to "multiplier" setting'), "absolute-value" === y2 && s3(c) ? l.absoluteIdealEdgeLength = c : "absolute-value" === y2 && void 0 !== c ? n.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting") : "multiplier" === y2 && s3(u3) ? l.multiplicativeIdealEdgeLength = u3 : "multiplier" === y2 && void 0 !== u3 && n.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting")), l;
  }
  _convertValidatedOrganicSettingsToCalculationSettings(e3) {
    let t4 = e3.idealEdgeLengthType === e2.ABSOLUTE ? e3.absoluteIdealEdgeLength : e3.multiplicativeIdealEdgeLength;
    return e3.idealEdgeLengthType === e2.ABSOLUTE && (void 0 === t4 ? t4 = -1 : t4 *= -1), { computationBudgetTime: e3.computationBudgetTime ?? void 0, repulsionRadiusMultiplier: e3.repulsionRadiusMultiplier && !e3.autoRepulsionRadius ? e3.repulsionRadiusMultiplier : void 0, idealEdgeLengthMultiplier: t4 };
  }
  _createSublayer(e3) {
    return new Se({ objectType: e3, parentCompositeLayer: this, graphType: e3.type });
  }
  _handleSublayersChange(e3, t4) {
    t4 && (t4.forEach((e4) => {
      e4.parent = null;
    }), this.removeHandles("sublayers-owner")), e3 && (e3.forEach((e4) => {
      e4.parent = this;
    }), this.addHandles([e3.on("after-add", ({ item: e4 }) => {
      e4.parent = this;
    }), e3.on("after-remove", ({ item: e4 }) => {
      e4.parent = null;
    })], "sublayers-owner"));
  }
  _alignLayersDataModelAndInclusionDefinition(e3) {
    var _a;
    const t4 = new Set((e3.entityTypes ?? []).map((e4) => e4.name).concat((e3.relationshipTypes ?? []).map((e4) => e4.name))), i3 = new Set((e3.entityTypes ?? []).map((e4) => e4.name)), o4 = new Set((e3.relationshipTypes ?? []).map((e4) => e4.name));
    if (this.layers) {
      for (const a3 of this.layers) !a3.graphType && t4.has(a3.graphTypeName) && (a3.graphType = i3.has(a3.graphTypeName) ? "entity" : "relationship");
      const e4 = this.layers.filter((e5) => t4.has(e5.graphTypeName) && ("entity" === e5.graphType ? i3.has(e5.graphTypeName) : o4.has(e5.graphTypeName)));
      this.setAtOrigin("layers", e4, t(this.originIdOf("layers")));
    } else this.layers = new V();
    if (this.layers && this._originalInclusionList) {
      const e4 = new Set(this._originalInclusionList.namedTypeDefinitions.keys()), t5 = ((_a = this.tables) == null ? void 0 : _a.map((e5) => e5.graphTypeName)) ?? [], a3 = this.layers.map((e5) => e5.graphTypeName).concat(t5);
      for (const n2 of a3) e4.has(n2) || this._originalInclusionList.namedTypeDefinitions.set(n2, { useAllData: false, members: /* @__PURE__ */ new Map() });
      const i4 = [];
      for (const o5 of this._originalInclusionList.namedTypeDefinitions.keys()) a3.includes(o5) || (n.getLogger(this).warn(`A named type, ${o5}, was in the serialized feature collection but did not have a sublayer config in the item, so will be removed`), i4.push(o5));
      for (const n2 of i4) this._originalInclusionList.namedTypeDefinitions.delete(n2);
    }
  }
};
r2([m(y)], q.prototype, "url", void 0), r2([m()], q.prototype, "dataPreloadedInLocalCache", void 0), r2([m()], q.prototype, "initializationLinkChartConfig", void 0), r2([m()], q.prototype, "membershipModified", void 0), r2([m()], q.prototype, "dataManager", void 0), r2([m()], q.prototype, "initializationInclusionModeDefinition", null), r2([m()], q.prototype, "knowledgeGraph", void 0), r2([m({ type: V.ofType(Se), json: { write: { ignoreOrigin: true } } })], q.prototype, "layers", void 0), r2([m({ readOnly: true })], q.prototype, "linkChart", null), r2([m()], q.prototype, "entityLinkChartDiagramLookup", void 0), r2([m()], q.prototype, "relationshipLinkChartDiagramLookup", void 0), r2([m()], q.prototype, "linkChartExtent", void 0), r2([m()], q.prototype, "memberEntityTypes", void 0), r2([m()], q.prototype, "memberRelationshipTypes", void 0), r2([m({ type: ["LinkChartLayer"] })], q.prototype, "operationalLayerType", void 0), r2([m()], q.prototype, "sublayerIdsCache", void 0), r2([m({ type: V.ofType(Se), json: { write: { ignoreOrigin: true } } })], q.prototype, "tables", void 0), r2([m({ json: { read: false } })], q.prototype, "type", void 0), r2([m({ json: { read: false } })], q.prototype, "chronologicalAuxiliaryGraphics", void 0), q = r2([a("esri.layers.LinkChartLayer")], q);
var J = q;
export {
  J as default
};
//# sourceMappingURL=LinkChartLayer-2YXJH2CJ.js.map
