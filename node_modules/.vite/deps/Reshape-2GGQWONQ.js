import {
  h as h3
} from "./chunk-DNUTYQ75.js";
import {
  j as j2,
  p as p4
} from "./chunk-VXHSZCDA.js";
import {
  e as e4
} from "./chunk-2N7GT6QX.js";
import {
  i as i3,
  p as p3
} from "./chunk-J2FVQVLW.js";
import {
  i as i4
} from "./chunk-P2A7QPGY.js";
import {
  d as d3
} from "./chunk-ECJ6LH6K.js";
import {
  i as i2
} from "./chunk-OF4NE3Q4.js";
import {
  E2 as E,
  P as P3,
  e3,
  u as u2
} from "./chunk-AARMY6EJ.js";
import {
  F,
  G,
  O,
  R,
  R2,
  c as c3,
  m as m3,
  r as r2
} from "./chunk-PSCLWEFE.js";
import {
  l2
} from "./chunk-FNUMBJBP.js";
import "./chunk-F4533UJ7.js";
import "./chunk-4NO34UCA.js";
import "./chunk-OSI4PMXO.js";
import "./chunk-3CDYGNLL.js";
import "./chunk-UP7QX3XX.js";
import "./chunk-XDIFNUKU.js";
import "./chunk-G577QQ6E.js";
import "./chunk-3O7K7CQL.js";
import "./chunk-6IYG6BTI.js";
import {
  p as p2
} from "./chunk-TWM4KR2X.js";
import "./chunk-4NUJE7UV.js";
import "./chunk-TOKEYLZA.js";
import {
  h as h2
} from "./chunk-EIS6L6FC.js";
import "./chunk-LULXSZFE.js";
import "./chunk-QU4L2TYC.js";
import "./chunk-QBDJCOUK.js";
import "./chunk-FJBOCRBW.js";
import "./chunk-IDAFLWQ6.js";
import "./chunk-QEAQVAMR.js";
import "./chunk-MAX4GY2G.js";
import "./chunk-OITDZHA4.js";
import "./chunk-ZGGC3KHK.js";
import "./chunk-ZXD5CGBL.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-HX6OAJGI.js";
import "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import "./chunk-WWF2HQCF.js";
import "./chunk-VGMYHNBL.js";
import "./chunk-MRUZJ4BJ.js";
import "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-EKEKHPBG.js";
import "./chunk-BG4U4RTY.js";
import "./chunk-UW4LHCKY.js";
import "./chunk-JJFGBM54.js";
import "./chunk-QY6LLTZM.js";
import "./chunk-U2GWJJ3P.js";
import {
  _
} from "./chunk-QSDQ7XKD.js";
import "./chunk-HUXEKERJ.js";
import "./chunk-NGATSB6R.js";
import "./chunk-XOXXDYBM.js";
import "./chunk-5BSH2ZN2.js";
import {
  l
} from "./chunk-6WERKJTM.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-4LJ2OSKC.js";
import "./chunk-FLGJHA67.js";
import "./chunk-FJTIPVNU.js";
import "./chunk-SXKP4T6J.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-B7E2AREE.js";
import "./chunk-MALSDV7D.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-T52X5K2I.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import {
  h
} from "./chunk-M4LYLB6W.js";
import "./chunk-I6AFDEJM.js";
import "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import {
  b
} from "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import {
  y
} from "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import {
  A,
  C,
  P,
  U,
  d as d2,
  p
} from "./chunk-UKY33OJN.js";
import {
  d
} from "./chunk-HAWCNM3C.js";
import {
  V
} from "./chunk-BQYXRSVC.js";
import {
  i
} from "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import {
  c as c2
} from "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-CAN2PXNV.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import {
  P as P2
} from "./chunk-XG7T2Y7N.js";
import {
  c,
  e as e2,
  m as m2
} from "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import {
  j2 as j
} from "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  e,
  n as n2,
  t2 as t,
  u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/interactive/tooltip/infos/TranslateVertexTooltipInfo.js
var i5 = class extends r2 {
  constructor(t2) {
    super(t2), this.type = "translate-vertex", this.distance = h2, this.elevation = null, this.area = null, this.totalLength = null;
  }
  clear() {
    this.distance = h2, this.elevation = null, this.area = null, this.totalLength = null;
  }
};
r([m()], i5.prototype, "type", void 0), r([m()], i5.prototype, "distance", void 0), r([m()], i5.prototype, "elevation", void 0), r([m()], i5.prototype, "area", void 0), r([m()], i5.prototype, "totalLength", void 0), i5 = r([a("esri.views.interactive.tooltip.infos.TranslateVertexTooltipInfo")], i5);

// node_modules/@arcgis/core/views/draw/support/reshapeTooltipUtils.js
function h4(t2) {
  const e5 = { sketchOptions: t2, viewType: "2d" };
  return { movePoint: new i3(e5), selectedVertex: new p3(e5), translateGraphic: new i4(e5), translateVertices: new i5(e5) };
}
function d4(e5, r3) {
  function c4() {
    const t2 = r3(), e6 = t2.sketchOptions.tooltips.effectiveEnabled ? t2.activeTooltipInfo : null;
    return { ...t2, activeTooltipInfo: e6 };
  }
  let a2 = false;
  function l3(t2) {
    a2 || (a2 = true, t2(), a2 = false);
  }
  return t([d2(() => {
    var _a, _b;
    const t2 = c4();
    return { context: t2, geometry: (_a = t2.graphic) == null ? void 0 : _a.geometry, vertexGeometry: (_b = t2.selectedVertex) == null ? void 0 : _b.geometry };
  }, ({ context: t2 }) => {
    l3(() => {
      x(t2), e5.info = t2.activeTooltipInfo;
    });
  }, A), d2(() => {
    const t2 = c4(), { activeTooltipInfo: e6 } = t2;
    if (e6 && "key" in e6) return { context: t2, key: e6.key };
  }, (t2, e6) => {
    t2 && e6 && t2.key !== e6.key && l3(() => w(t2.context));
  }, C), G(e5, { onBeforePaste: () => {
    a2 = true;
  }, onAfterPaste: () => {
    w(c4()), a2 = false;
  } })]);
}
function x(t2) {
  const e5 = t2.activeTooltipInfo;
  if (e5) {
    switch (e5 == null ? void 0 : e5.type) {
      case "move-point":
        return T(e5, t2);
      case "selected-vertex":
        return j3(e5, t2);
    }
    e5.sketchOptions = t2.sketchOptions;
  }
}
function T(t2, { graphic: e5 }) {
  k(t2, e5, e5 == null ? void 0 : e5.geometry);
}
function j3(t2, { graphic: e5, selectedVertex: o }) {
  k(t2, e5, o == null ? void 0 : o.geometry);
  const n3 = e5 == null ? void 0 : e5.geometry;
  switch (n3 == null ? void 0 : n3.type) {
    case "polygon":
      t2.geometryType = "polygon", t2.totalLength.visible = false, t2.area.actual = u2(n3);
      break;
    case "polyline":
      t2.geometryType = "polyline", t2.totalLength.actual = c3(n3), t2.area.visible = false;
  }
}
function k(t2, e5, o) {
  var _a;
  e5 && "point" === (o == null ? void 0 : o.type) && (t2.setLocationFromPoint(o), t2.elevation.actual = R2(o), t2.elevation.visible = !!((_a = e5.geometry) == null ? void 0 : _a.hasZ), t2.elevation.readOnly = false, t2.elevation.showAsZ = true);
}
function w(t2) {
  function e5(e6, o2) {
    const n4 = o2 == null ? void 0 : o2.geometry;
    if (!n4 || "point" !== n4.type) return;
    const { dx: i7, dy: r3, dz: s2 } = F(e6, n4);
    if (0 === i7 && 0 === r3 && 0 === s2) return;
    const { x: l3, y: p5, z: f, m: m4, spatialReference: u3 } = n4, y2 = new j({ x: l3 + i7, y: p5 + r3, z: null != f ? f + s2 : void 0, m: m4, spatialReference: u3 });
    t2.updateGeometry(o2, y2, n4, i7, r3);
  }
  const { activeTooltipInfo: o, graphic: n3, selectedVertex: i6 } = t2;
  switch (o == null ? void 0 : o.type) {
    case "move-point":
      return e5(o, n3);
    case "selected-vertex":
      return e5(o, i6);
  }
}
function I(t2, e5, o) {
  t2.clear(), V2(t2, e5, o);
}
function U2(t2, e5, o, n3) {
  t2.clear(), "polygon" === (o == null ? void 0 : o.type) ? t2.area = u2(o) : "polyline" === (o == null ? void 0 : o.type) && (t2.totalLength = c3(o)), V2(t2, e5, n3);
}
function V2(t2, o, n3) {
  if (!n3) return;
  const { x: i6, y: c4 } = n3.origin, s2 = o.toMap(n3), a2 = o.toMap(c2(i6, c4)), l3 = m3(a2, s2);
  t2.distance = null != l3 ? l3 : h2;
}

// node_modules/@arcgis/core/views/draw/support/Reshape.js
var Z = class {
  constructor(e5, t2, i6) {
    this.graphic = e5, this.mover = t2, this.selected = i6, this.type = "reshape-start";
  }
};
var X = class {
  constructor(e5, t2, i6) {
    this.graphic = e5, this.mover = t2, this.selected = i6, this.type = "reshape";
  }
};
var Y = class {
  constructor(e5, t2, i6) {
    this.graphic = e5, this.mover = t2, this.selected = i6, this.type = "reshape-stop";
  }
};
var K = class {
  constructor(e5, t2, i6) {
    this.mover = e5, this.dx = t2, this.dy = i6, this.type = "move-start";
  }
};
var N = class {
  constructor(e5, t2, i6) {
    this.mover = e5, this.dx = t2, this.dy = i6, this.type = "move";
  }
};
var q = class {
  constructor(e5, t2, i6) {
    this.mover = e5, this.dx = t2, this.dy = i6, this.type = "move-stop";
  }
};
var B = class {
  constructor(e5) {
    this.added = e5, this.type = "vertex-select";
  }
};
var J = class {
  constructor(e5) {
    this.removed = e5, this.type = "vertex-deselect";
  }
};
var Q = class {
  constructor(e5, t2, i6, s2) {
    this.added = e5, this.graphic = t2, this.oldGraphic = i6, this.vertices = s2, this.type = "vertex-add";
  }
};
var W = class {
  constructor(e5, t2, i6, s2) {
    this.removed = e5, this.graphic = t2, this.oldGraphic = i6, this.vertices = s2, this.type = "vertex-remove";
  }
};
var $ = h3.reshapeGraphics;
var ee = { vertices: { default: new y({ style: "circle", size: $.vertex.size, color: $.vertex.color, outline: { color: $.vertex.outlineColor, width: 1 } }), hover: new y({ style: "circle", size: $.vertex.hoverSize, color: $.vertex.hoverColor, outline: { color: $.vertex.hoverOutlineColor, width: 1 } }), selected: new y({ style: "circle", size: $.selected.size, color: $.selected.color, outline: { color: $.selected.outlineColor, width: 1 } }) }, midpoints: { default: new y({ style: "circle", size: $.midpoint.size, color: $.midpoint.color, outline: { color: $.midpoint.outlineColor, width: 1 } }), hover: new y({ style: "circle", size: $.midpoint.size, color: $.midpoint.color, outline: { color: $.midpoint.outlineColor, width: 1 } }) } };
var te = class extends i.EventedAccessor {
  constructor(e5) {
    super(e5), this._updateHandlesOnExternalGeometryChange = null, this._activeOperationInfo = null, this._editGeometryOperations = null, this._graphicAttributes = { esriSketchTool: "box" }, this._mover = null, this._snappingContext = null, this._snappingGraphicsLayer = null, this._hoverGraphic = null, this._snappingTask = null, this._stagedVertex = null, this.tooltip = null, this.activeTooltipInfo = null, this.callbacks = { onReshapeStart() {
    }, onReshape() {
    }, onReshapeStop() {
    }, onMoveStart() {
    }, onMove() {
    }, onMoveStop() {
    }, onGraphicClick() {
    } }, this.enableMidpoints = true, this.enableMovement = true, this.enableVertices = true, this.graphic = null, this.layer = null, this.midpointGraphics = new V(), this.midpointSymbol = new y({ style: "circle", size: 6, color: [200, 200, 200], outline: { color: [100, 100, 100], width: 1 } }), this.selectedVertices = new V(), this.snappingManager = null, this.symbols = ee, this.sketchOptions = new l2(), this.type = "reshape", this.vertexGraphics = new V(), this.view = null;
  }
  initialize() {
    const e5 = this.view;
    this._highlightHelper = new p4({ view: e5 }), this._setup(), this._updateHandlesOnExternalGeometryChange = U(() => {
      var _a;
      return (_a = this.graphic) == null ? void 0 : _a.geometry;
    }, (e6) => {
      if (!e6) return;
      const t2 = new Set(this.selectedVertices.map((e7) => {
        var _a;
        return (_a = e7.attributes) == null ? void 0 : _a.pointIndex;
      }));
      this._highlightHelper.removeAll(), this._setUpHighlights(), this._setupGraphics(), this._clearSelection(), this.vertexGraphics.filter((e7) => t2.has(e7.attributes.pointIndex)).forEach((e7) => this._addToSelection(e7));
      const { enableMovement: i6, _mover: s2, graphic: o, midpointGraphics: r3, vertexGraphics: n3 } = this, h5 = n3.concat(r3).items;
      i6 && h5.push(o), s2 == null ? void 0 : s2.set("graphics", h5);
    }, C), this.tooltip = R(() => ({ view: e5, options: this.sketchOptions.tooltips })), this.tooltipInfos = h4(this.sketchOptions), this.addHandles([p(() => e5 == null ? void 0 : e5.ready, () => {
      const { layer: e6, view: t2 } = this;
      e4(t2, e6), this.addHandles(t2.on("key-down", (e7) => this._keyDownHandler(e7), _.TOOL));
    }, { once: true, initial: true }), d2(() => this.graphic, () => this.refresh()), d2(() => this.layer, (e6, t2) => {
      t2 && (this._clearSelection(), this._resetGraphics(t2)), this.refresh();
    }), d2(() => this.enableMidpoints, () => this.refresh()), d4(this.tooltip, () => this._tooltipsContext), d2(() => this.view.effectiveTheme.accentColor, () => this._updateSymbolsForTheme(), P), this._updateHandlesOnExternalGeometryChange]), this._updateTooltip();
  }
  destroy() {
    var _a;
    this._reset(), (_a = this._mover) == null ? void 0 : _a.destroy(), this._mover = null, this.tooltip = u(this.tooltip);
  }
  get _coordinateHelper() {
    var _a, _b, _c;
    return ((_a = this._editGeometryOperations) == null ? void 0 : _a.data.coordinateHelper) ?? P3(!!((_b = this.graphic.geometry) == null ? void 0 : _b.hasZ), !!((_c = this.graphic.geometry) == null ? void 0 : _c.hasM), this.view.spatialReference);
  }
  get _selectedVertex() {
    return 1 === this.selectedVertices.length ? this.selectedVertices.at(0) : void 0;
  }
  get _tooltipsContext() {
    return { sketchOptions: this.sketchOptions, activeTooltipInfo: this.activeTooltipInfo, graphic: this.graphic, selectedVertex: this._selectedVertex, updateGeometry: (e5, t2, i6, s2, o) => {
      this._setUpGeometryHelper();
      const r3 = e5 === this.graphic;
      r3 ? this._emitMoveStartEvent(0, 0) : this._emitReshapeStartEvent(e5);
      const n3 = true;
      if (this._syncGeometryAfterVertexMove(e5, t2, s2, o, n3), r3) {
        const { view: e6 } = this, s3 = e6.toScreen(i6), o2 = e6.toScreen(t2), r4 = ((o2 == null ? void 0 : o2.x) ?? 0) - ((s3 == null ? void 0 : s3.x) ?? 0), n4 = ((o2 == null ? void 0 : o2.y) ?? 0) - ((s3 == null ? void 0 : s3.y) ?? 0);
        this._emitMoveEvent(r4, n4), this._emitMoveStopEvent(r4, n4);
      } else this._emitReshapeEvent(e5), this._emitReshapeStopEvent(e5);
      this._editGeometryOperations = u(this._editGeometryOperations);
    } };
  }
  set highlightsEnabled(e5) {
    var _a;
    (_a = this._highlightHelper) == null ? void 0 : _a.removeAll(), this._set("highlightsEnabled", e5), this._setUpHighlights();
  }
  get state() {
    const e5 = this.view.ready, t2 = !(!this.graphic || !this.layer);
    return e5 && t2 ? "active" : e5 ? "ready" : "disabled";
  }
  isUIGraphic(e5) {
    const t2 = [];
    return this.graphic && t2.push(this.graphic), t2.concat(this.vertexGraphics.items, this.midpointGraphics.items), t2.length > 0 && t2.includes(e5);
  }
  refresh() {
    this._reset(), this._setup();
  }
  reset() {
    this.graphic = null;
  }
  clearSelection() {
    this._clearSelection();
  }
  removeSelectedVertices() {
    const { selectedVertices: e5 } = this;
    e5.length && this._removeVertices(e5);
  }
  _setup() {
    const { graphic: e5, layer: t2 } = this;
    if (!t2 || null == (e5 == null ? void 0 : e5.geometry)) return;
    const i6 = e5.geometry;
    "mesh" !== i6.type && "extent" !== i6.type ? ("polygon" === i6.type && m2(i6), this._setUpHighlights(), this._setupGraphics(), this._setupMover()) : this._logGeometryTypeError();
  }
  _setUpHighlights() {
    var _a;
    this.highlightsEnabled && this.graphic && ((_a = this._highlightHelper) == null ? void 0 : _a.add(this.graphic));
  }
  _setUpGeometryHelper() {
    const e5 = this.graphic.geometry;
    if (null == e5 || "mesh" === e5.type || "extent" === e5.type) return void this._logGeometryTypeError();
    const t2 = "multipoint" === e5.type ? new P2({ paths: [e5.points], spatialReference: e5.spatialReference }) : e5;
    this._editGeometryOperations = E.fromGeometry(t2, l.Local);
  }
  _saveSnappingContextForHandle(e5, t2) {
    var _a;
    this._snappingGraphicsLayer = new h({ listMode: "hide", internal: true, title: "Reshape snapping layer" }), this.view.map.layers.add(this._snappingGraphicsLayer);
    const i6 = this._editGeometryOperations;
    n2(i6), this._snappingContext = new e3({ editGeometryOperations: i6, elevationInfo: { mode: "on-the-ground", offset: 0 }, pointer: ((_a = t2.viewEvent) == null ? void 0 : _a.pointerType) || "mouse", excludeFeature: this.graphic, feature: this.graphic, visualizer: new d3(this._snappingGraphicsLayer), vertexHandle: this._getVertexFromEditGeometry(e5) });
  }
  _reset() {
    var _a;
    this._clearSelection(), (_a = this._highlightHelper) == null ? void 0 : _a.removeAll(), this._updateTooltip(), this._resetGraphics(), this._resetSnappingStateVars(), this._activeOperationInfo = null, this._mover && this._mover.destroy(), this._mover = null, this.view.cursor = "default";
  }
  _resetSnappingStateVars() {
    var _a;
    null != this.snappingManager && this.snappingManager.doneSnapping(), null != this._snappingGraphicsLayer && (((_a = this.view) == null ? void 0 : _a.map) && this.view.map.layers.remove(this._snappingGraphicsLayer), this._snappingGraphicsLayer.destroy()), this._editGeometryOperations = u(this._editGeometryOperations), this._snappingTask = e(this._snappingTask), this._snappingTask = null, this._snappingContext = null, this._stagedVertex = null;
  }
  _resetGraphics(e5) {
    this._removeMidpointGraphics(e5), this._removeVertexGraphics(e5), this.selectedVertices.removeAll(), this._updateTooltip();
  }
  _removeMidpointGraphics(e5) {
    const t2 = e5 || this.layer;
    t2 && t2.removeMany(this.midpointGraphics.items), this.midpointGraphics.items.forEach((e6) => e6.destroy()), this.midpointGraphics.removeAll();
  }
  _removeVertexGraphics(e5) {
    const t2 = e5 || this.layer;
    t2 && t2.removeMany(this.vertexGraphics.items), this.vertexGraphics.items.forEach((e6) => e6.destroy()), this.vertexGraphics.removeAll();
  }
  _setupGraphics() {
    const e5 = this.graphic.geometry;
    if (null != e5 && ("polyline" === e5.type || "polygon" === e5.type)) {
      const t2 = ie(e5);
      this.enableMidpoints && this._setUpMidpointGraphics(t2), this.enableVertices && this._setUpVertexGraphics(t2);
    }
  }
  _setUpMidpointGraphics(e5) {
    this._removeMidpointGraphics();
    const t2 = this._createMidpointGraphics(e5);
    this.midpointGraphics.addMany(t2), this.layer.addMany(t2);
  }
  _setUpVertexGraphics(e5) {
    this._removeVertexGraphics();
    const t2 = this._createVertexGraphics(e5);
    this.vertexGraphics.addMany(t2), this._storeRelatedVertexIndices(), this.layer.addMany(t2);
  }
  _createVertexGraphics(e5) {
    const { _graphicAttributes: i6, symbols: s2 } = this, o = [];
    return e5 == null ? void 0 : e5.forEach((e6, r3) => {
      e6.forEach((e7, n3) => {
        var _a;
        o.push(new b({ geometry: this._coordinateHelper.arrayToPoint(e7), symbol: (_a = s2 == null ? void 0 : s2.vertices) == null ? void 0 : _a.default, attributes: { ...i6, pathIndex: r3, pointIndex: n3 } }));
      });
    }), o;
  }
  _createMidpointGraphics(e5) {
    var _a;
    const { _graphicAttributes: i6, symbols: s2 } = this, o = [];
    for (let r3 = 0; r3 < e5.length; r3++) {
      const n3 = e5[r3];
      for (let e6 = 0; e6 < n3.length; e6++) {
        const h5 = (e6 + 1) % n3.length;
        if ("polyline" === ((_a = this.graphic.geometry) == null ? void 0 : _a.type) && 0 === h5) continue;
        const a2 = n3[e6], p5 = n3[h5], c4 = this._getMidpoint(a2, p5);
        o.push(new b({ geometry: c4, symbol: s2.midpoints.default, attributes: { ...i6, pathIndex: r3, pointIndexStart: e6, pointIndexEnd: h5 } }));
      }
    }
    return o;
  }
  _updateSymbolsForTheme() {
    var _a;
    const e5 = this.view.effectiveTheme.accentColor;
    this.symbols = { vertices: { ...this.symbols.vertices, default: this.symbols.vertices.default.clone().set("color", e5), hover: (_a = this.symbols.vertices.hover) == null ? void 0 : _a.clone().set("color", e5) }, midpoints: { ...this.symbols.midpoints } };
    for (const t2 of this.vertexGraphics) this._isSelected(t2) ? t2.symbol = this.symbols.vertices.selected : this._hoverGraphic === t2 ? t2.symbol = this.symbols.vertices.hover : t2.symbol = this.symbols.vertices.default;
  }
  _storeRelatedVertexIndices() {
    const e5 = this.vertexGraphics.items;
    if (!e5) return;
    const t2 = e5.map(({ geometry: e6 }) => ({ x: e6.x, y: e6.y }));
    for (let i6 = 0; i6 < t2.length; i6++) {
      const s2 = [];
      for (let e6 = 0; e6 < t2.length; e6++) {
        if (i6 === e6) continue;
        const o = t2[i6], r3 = t2[e6];
        o.x === r3.x && o.y === r3.y && s2.push(e6);
      }
      e5[i6].attributes.relatedGraphicIndices = s2;
    }
  }
  _setupMover() {
    const { enableMovement: e5, graphic: t2, midpointGraphics: i6, vertexGraphics: s2, view: o } = this, r3 = s2.concat(i6).items;
    e5 && r3.push(t2), this._mover = new j2({ enableMoveAllGraphics: false, highlightsEnabled: false, indicatorsEnabled: false, graphics: r3, view: o, callbacks: { onGraphicClick: (e6) => this._onGraphicClickCallback(e6), onGraphicMoveStart: (e6) => this._onGraphicMoveStartCallback(e6), onGraphicMove: (e6) => this._onGraphicMoveCallback(e6), onGraphicMoveStop: (e6) => this._onGraphicMoveStopCallback(e6), onGraphicPointerOver: (e6) => this._onGraphicPointerOverCallback(e6), onGraphicPointerOut: (e6) => this._onGraphicPointerOutCallback(e6) } });
  }
  _onGraphicClickCallback(e5) {
    var _a, _b;
    e5.viewEvent.stopPropagation();
    const t2 = e5.graphic;
    if (t2 === this.graphic) this.clearSelection(), this.emit("graphic-click", e5), (_b = (_a = this.callbacks).onGraphicClick) == null ? void 0 : _b.call(_a, e5);
    else if (this._isMidpoint(t2)) {
      if (2 === e5.viewEvent.button) return;
      const i6 = this.graphic.clone(), s2 = this._createVertexFromMidpoint(t2);
      this.refresh(), this._emitVertexAddEvent([t2], i6, s2);
    } else if (this._isVertex(t2)) if (e5.viewEvent.stopPropagation(), 2 === e5.viewEvent.button) this._removeVertices(t2);
    else {
      e5.viewEvent.native.shiftKey || this._clearSelection(), this.selectedVertices.includes(t2) ? this._removeFromSelection(t2, true) : this._addToSelection(t2);
    }
  }
  _setUpOperation(e5) {
    const { graphic: t2, dx: i6, dy: s2 } = e5, o = t2 === this.graphic;
    this._resetSnappingStateVars(), this._setUpGeometryHelper(), this._saveSnappingContextForHandle(t2, e5), this._activeOperationInfo = { target: this.graphic, mover: t2, operationType: o ? "move" : "reshape", totalDx: i6, totalDy: s2 };
  }
  _onGraphicMoveStartCallback(e5) {
    const { dx: t2, dy: i6, graphic: s2 } = e5;
    if (s2 === this.graphic) {
      const { geometry: o } = s2;
      return this._setUpOperation(e5), this._emitMoveStartEvent(t2, i6), void (null != o && "point" === o.type && this._onHandleMove(s2, t2, i6, e5, () => {
        this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(t2, i6);
      }));
    }
    if (!this.selectedVertices.includes(s2)) {
      if (this._clearSelection(), this._isMidpoint(s2)) {
        const e6 = this.graphic.clone(), t3 = this._createVertexFromMidpoint(s2);
        this._emitVertexAddEvent([s2], e6, t3);
      }
      this._addToSelection(s2);
    }
    this._setUpOperation(e5), this._emitReshapeStartEvent(s2), this._onHandleMove(s2, t2, i6, e5, () => {
      this._updateTooltip(s2, e5.viewEvent), this._emitReshapeEvent(s2);
    });
  }
  _onGraphicMoveCallback(e5) {
    const t2 = this._activeOperationInfo;
    if (!t2) return;
    const { dx: i6, dy: s2, graphic: o } = e5;
    t2.totalDx += i6, t2.totalDy += s2;
    const { operationType: r3 } = t2, { geometry: n3 } = o;
    if (null != n3) {
      if ("move" !== r3) this._onHandleMove(o, i6, s2, e5, () => {
        this._updateTooltip(o, e5.viewEvent), this._emitReshapeEvent(o);
      });
      else if ("point" === n3.type) this._onHandleMove(o, i6, s2, e5, () => {
        this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(i6, s2);
      });
      else if ("polyline" === n3.type || "polygon" === n3.type) {
        const t3 = ie(n3);
        this._updateVertexGraphicLocations(t3), this._updateTooltip(this.graphic, e5.viewEvent), this._emitMoveEvent(i6, s2);
      }
    }
  }
  _onGraphicMoveStopCallback(e5) {
    const t2 = this._activeOperationInfo;
    if (!t2) return;
    const { dx: i6, dy: s2, graphic: o } = e5, { operationType: r3 } = t2;
    t2.totalDx += i6, t2.totalDy += s2, this._onHandleMove(o, i6, s2, e5, () => "move" === r3 ? this._emitMoveStopEvent() : this._emitReshapeStopEvent(o)), this._isMidpoint(o) ? this.refresh() : (this._updateTooltip(this._isVertex(o) ? o : null), this._resetSnappingStateVars(), this._activeOperationInfo = null);
  }
  _updateVertexGraphicLocations(e5) {
    const { _coordinateHelper: t2 } = this;
    for (const i6 of this.vertexGraphics) {
      const { pathIndex: s2, pointIndex: o } = i6.attributes;
      i6.geometry = t2.arrayToPoint(e5[s2][o]);
    }
    this._updateMidpointGraphicLocations(e5);
  }
  _updateMidpointGraphicLocations(e5) {
    for (const t2 of this.midpointGraphics) {
      const { pathIndex: i6, pointIndexStart: s2, pointIndexEnd: o } = t2.attributes, r3 = e5[i6];
      t2.geometry = this._getMidpoint(r3[s2], r3[o]);
    }
  }
  _getMidpoint(e5, t2) {
    const { _coordinateHelper: i6 } = this, s2 = i6.arrayToVector(e5), o = i6.arrayToVector(t2), r3 = i6.toXYZ(s2), n3 = i6.toXYZ(o), [h5, a2, p5] = c(r3, n3), c4 = i6.hasM() ? 0 : void 0;
    return new j({ x: h5, y: a2, z: p5, m: c4, spatialReference: i6.spatialReference });
  }
  _getVertexFromEditGeometry(e5) {
    const [t2, i6] = se(e5);
    return n2(this._editGeometryOperations), this._editGeometryOperations.data.components[t2].vertices[i6];
  }
  _onHandleMove(e5, t2, s2, o, r3) {
    e(this._snappingTask);
    const n3 = this._snappingContext;
    if (!n3) return;
    const h5 = e5.geometry, a2 = "graphic-move-stop" === o.type;
    if (null != this.snappingManager && this.selectedVertices.length < 2 && !a2) {
      const o2 = this.snappingManager;
      this._stagedVertex = o2.update({ point: h5, context: n3 }), this._syncGeometryAfterVertexMove(e5, new j(this._stagedVertex), t2, s2, a2), r3(), this._snappingTask = d(async (i6) => {
        const p5 = await o2.snap({ point: h5, context: n3, signal: i6 });
        p5.valid && (this._stagedVertex = p5.apply(), this._syncGeometryAfterVertexMove(e5, new j(this._stagedVertex), t2, s2, a2), r3());
      });
    } else {
      const i6 = null != this._stagedVertex ? new j(this._stagedVertex) : h5;
      this._syncGeometryAfterVertexMove(e5, i6, t2, s2, a2), r3();
    }
  }
  _syncGeometryAfterVertexMove(e5, t2, i6, s2, o = false) {
    var _a, _b;
    const r3 = (_a = this._editGeometryOperations) == null ? void 0 : _a.data.geometry;
    if (r3) if ("point" === r3.type) e5.geometry = t2;
    else if ("mesh" === r3.type) e5.geometry = r3.centerAt(t2);
    else {
      const { _coordinateHelper: n3 } = this, [h5, a2] = se(e5);
      let p5 = e2(r3);
      const c4 = p5[h5].length - 1, l3 = n3.pointToArray(t2);
      p5[h5][a2] = l3, "polygon" === r3.type && (0 === a2 ? p5[h5][c4] = l3 : a2 === c4 && (p5[h5][0] = l3)), this._isVertex(e5) && (p5 = this._moveRelatedCoordinates(p5, e5, l3), p5 = this._moveSelectedHandleCoordinates(p5, e5, i6, s2, "polygon" === r3.type), this._updateMidpointGraphicLocations(p5)), this._updateGraphicGeometry(r3.clone());
      const d5 = n3.pointToVector(t2), m4 = this._getVertexFromEditGeometry(e5), v = n3.getZ(d5), y2 = d5[0] - m4.pos[0], _2 = d5[1] - m4.pos[1], g = null != v ? v - m4.pos[2] : 0;
      (_b = this._editGeometryOperations) == null ? void 0 : _b.moveVertices([m4], y2, _2, g), o && (this._mover ? this._mover.updateGeometry(this._mover.graphics.indexOf(e5), t2) : e5.geometry = t2);
    }
  }
  _moveRelatedCoordinates(e5, t2, i6) {
    const { relatedGraphicIndices: s2 } = t2.attributes;
    for (const o of s2) {
      const s3 = this.vertexGraphics.at(o), { pathIndex: r3, pointIndex: n3 } = s3.attributes;
      e5[r3][n3] = i6, s3.geometry = t2.geometry;
    }
    return e5;
  }
  _moveSelectedHandleCoordinates(e5, t2, i6, s2, o) {
    for (const r3 of this.selectedVertices) if (r3 !== t2) {
      const { pathIndex: t3, pointIndex: n3, relatedGraphicIndices: h5 } = r3.attributes, a2 = i2(r3.geometry, i6, s2, this.view), p5 = e2(a2), c4 = e5[t3].length - 1;
      e5[t3][n3] = p5, r3.geometry = a2, o && (0 === n3 ? e5[t3][c4] = p5 : n3 === c4 && (e5[t3][0] = p5));
      for (const i7 of h5) {
        const t4 = this.vertexGraphics.at(i7), { pathIndex: s3, pointIndex: o2 } = t4.attributes;
        e5[s3][o2] = p5, t4.geometry = a2;
      }
    }
    return e5;
  }
  _onGraphicPointerOverCallback(e5) {
    const t2 = e5.graphic;
    this._hoverGraphic = t2;
    const i6 = this._isVertex(t2);
    i6 && !this._isSelected(t2) && (t2.symbol = this.symbols.vertices.hover), this._updateTooltip(i6 ? t2 : null), this._updateHoverCursor(t2);
  }
  _onGraphicPointerOutCallback(e5) {
    const t2 = e5.graphic;
    this._hoverGraphic = null, this._isVertex(t2) && !this._isSelected(t2) && (t2.symbol = this.symbols.vertices.default), this.view.cursor = "default", this._updateTooltip();
  }
  _createVertexFromMidpoint(e5) {
    const { _graphicAttributes: t2, graphic: i6 } = this, s2 = i6.geometry;
    if (null == s2 || "polygon" !== s2.type && "polyline" !== s2.type) return [];
    const o = s2.clone(), r3 = [], { pathIndex: n3, pointIndexStart: h5, pointIndexEnd: a2 } = e5.attributes, p5 = e2(e5.geometry), c4 = 0 === a2 ? h5 + 1 : a2, l3 = e2(o);
    return l3[n3].splice(c4, 0, p5), e5.attributes = { ...t2, pathIndex: n3, pointIndex: c4, relatedGraphicIndices: [] }, r3.push({ coordinates: l3[n3][c4], componentIndex: n3, vertexIndex: c4 }), this._updateGraphicGeometry(o), r3;
  }
  _addToSelection(e5) {
    const t2 = oe(e5);
    for (const i6 of t2) i6.symbol = this.symbols.vertices.selected, this.selectedVertices.add(i6), this._updateTooltip(i6);
    this._emitSelectEvent(t2);
  }
  _removeFromSelection(e5, t2) {
    const { vertices: i6 } = this.symbols, s2 = t2 ? i6.hover : i6.default;
    this.selectedVertices.remove(e5), e5.symbol = s2, this._emitDeselectEvent([e5]), this._updateTooltip();
  }
  _clearSelection() {
    const e5 = this.selectedVertices.toArray();
    if (e5.length > 0) {
      for (const t2 of e5) t2.set("symbol", this.symbols.vertices.default);
      this.selectedVertices.removeAll(), this._emitDeselectEvent(e5), this._updateTooltip();
    }
  }
  _keyDownHandler(e5) {
    null == this._activeOperationInfo && O(e5, this.tooltip) || p2.delete.includes(e5.key) && !e5.repeat && this.selectedVertices.length && this._removeVertices(this.selectedVertices);
  }
  _removeVertices(e5) {
    const t2 = this.graphic.geometry;
    if (null == t2 || "polygon" !== t2.type && "polyline" !== t2.type) return;
    if ("polygon" === t2.type && this.vertexGraphics.length < 4 || this.vertexGraphics.length < 3) return;
    const i6 = this.graphic.clone(), s2 = t2.clone();
    let o = e2(s2);
    const r3 = [], n3 = oe(e5);
    for (const h5 of n3) {
      const { x: e6, y: t3 } = h5.geometry;
      for (let i7 = 0; i7 < o.length; i7++) {
        const s3 = o[i7];
        for (let n4 = 0; n4 < s3.length; n4++) {
          const [h6, a2] = s3[n4];
          e6 === h6 && t3 === a2 && (r3.push({ coordinates: o[i7][n4], componentIndex: i7, vertexIndex: n4 }), o[i7].splice(Number(n4), 1));
        }
      }
    }
    if ("polygon" === s2.type) o = o.filter((e6) => {
      if (e6.length < 2) return false;
      const [t3, i7] = e6[0], [s3, o2] = e6[e6.length - 1];
      return (2 !== e6.length || t3 !== s3 || i7 !== o2) && (t3 === s3 && i7 === o2 || e6.push(e6[0]), true);
    }), s2.rings = o;
    else {
      for (const e6 of o) 1 === e6.length && o.splice(o.indexOf(e6), 1);
      s2.paths = o;
    }
    this._updateGraphicGeometry(s2), this.refresh(), this._emitVertexRemoveEvent(n3, i6, r3);
  }
  _isVertex(e5) {
    return this.vertexGraphics.includes(e5);
  }
  _isSelected(e5) {
    return this._isVertex(e5) && this.selectedVertices.includes(e5);
  }
  _isMidpoint(e5) {
    return this.midpointGraphics.includes(e5);
  }
  _updateHoverCursor(e5) {
    this.view.cursor = this._isMidpoint(e5) ? "copy" : "move";
  }
  _updateTooltip(e5, t2) {
    let i6 = null;
    const { graphic: s2, view: o, tooltipInfos: r3 } = this, n3 = s2 == null ? void 0 : s2.geometry;
    "point" === (n3 == null ? void 0 : n3.type) ? i6 = r3.movePoint : this._selectedVertex ? i6 = r3.selectedVertex : e5 === this.graphic ? (i6 = r3.translateGraphic, I(i6, o, t2)) : e5 && this.selectedVertices.length > 1 && (i6 = r3.translateVertices, U2(i6, o, n3, t2)), this.activeTooltipInfo = i6;
  }
  _updateGraphicGeometry(e5) {
    var _a, _b;
    (_a = this._updateHandlesOnExternalGeometryChange) == null ? void 0 : _a.pause(), this.graphic.geometry = e5, (_b = this._updateHandlesOnExternalGeometryChange) == null ? void 0 : _b.resume();
  }
  _emitMoveStartEvent(e5, t2) {
    var _a, _b;
    const i6 = new K(this.graphic, e5, t2);
    this.emit("move-start", i6), (_b = (_a = this.callbacks).onMoveStart) == null ? void 0 : _b.call(_a, i6);
  }
  _emitMoveEvent(e5, t2) {
    var _a, _b;
    const i6 = new N(this.graphic, e5, t2);
    this.emit("move", i6), (_b = (_a = this.callbacks).onMove) == null ? void 0 : _b.call(_a, i6);
  }
  _emitMoveStopEvent(e5, t2) {
    var _a, _b;
    if (null == e5 || null == t2) {
      const i7 = this._activeOperationInfo;
      if (!i7) return;
      e5 = i7.totalDx, t2 = i7.totalDy;
    }
    const i6 = new q(this.graphic, e5, t2);
    this.emit("move-stop", i6), (_b = (_a = this.callbacks).onMoveStop) == null ? void 0 : _b.call(_a, i6);
  }
  _emitReshapeStartEvent(e5) {
    var _a, _b;
    const t2 = new Z(this.graphic, e5, this.selectedVertices.toArray());
    this.emit("reshape-start", t2), (_b = (_a = this.callbacks).onReshapeStart) == null ? void 0 : _b.call(_a, t2);
  }
  _emitReshapeEvent(e5) {
    var _a, _b;
    const t2 = new X(this.graphic, e5, this.selectedVertices.toArray());
    this.emit("reshape", t2), (_b = (_a = this.callbacks).onReshape) == null ? void 0 : _b.call(_a, t2);
  }
  _emitReshapeStopEvent(e5) {
    var _a, _b;
    const t2 = new Y(this.graphic, e5, this.selectedVertices.toArray());
    this.emit("reshape-stop", t2), (_b = (_a = this.callbacks).onReshapeStop) == null ? void 0 : _b.call(_a, t2);
  }
  _emitSelectEvent(e5) {
    var _a, _b;
    const t2 = new B(e5);
    this.emit("select", t2), (_b = (_a = this.callbacks).onVertexSelect) == null ? void 0 : _b.call(_a, t2);
  }
  _emitDeselectEvent(e5) {
    var _a, _b;
    const t2 = new J(e5);
    this.emit("deselect", t2), (_b = (_a = this.callbacks).onVertexDeselect) == null ? void 0 : _b.call(_a, t2);
  }
  _emitVertexAddEvent(e5, t2, i6) {
    var _a, _b;
    const s2 = new Q(e5, this.graphic, t2, i6);
    this.emit("vertex-add", s2), (_b = (_a = this.callbacks).onVertexAdd) == null ? void 0 : _b.call(_a, s2);
  }
  _emitVertexRemoveEvent(e5, t2, i6) {
    var _a, _b;
    const s2 = new W(e5, this.graphic, t2, i6);
    this.emit("vertex-remove", s2), (_b = (_a = this.callbacks).onVertexRemove) == null ? void 0 : _b.call(_a, s2);
  }
  _logGeometryTypeError() {
    n.getLogger(this).error(new s("reshape:invalid-geometry", "Reshape operation not supported for the provided graphic. The geometry type is not supported."));
  }
};
function ie(e5) {
  const t2 = e2(e5.clone());
  if ("polygon" === e5.type) for (const i6 of t2) {
    const e6 = i6[i6.length - 1];
    i6[0][0] === e6[0] && i6[0][1] === e6[1] && i6.length > 2 && i6.pop();
  }
  return t2;
}
function se({ attributes: e5 }) {
  return [(e5 == null ? void 0 : e5.pathIndex) || 0, (e5 == null ? void 0 : e5.pointIndex) || 0];
}
function oe(e5) {
  return e5 instanceof b ? [e5] : [...e5];
}
r([m()], te.prototype, "_activeOperationInfo", void 0), r([m()], te.prototype, "_coordinateHelper", null), r([m()], te.prototype, "_editGeometryOperations", void 0), r([m()], te.prototype, "tooltip", void 0), r([m()], te.prototype, "tooltipInfos", void 0), r([m()], te.prototype, "activeTooltipInfo", void 0), r([m()], te.prototype, "_selectedVertex", null), r([m()], te.prototype, "_tooltipsContext", null), r([m()], te.prototype, "callbacks", void 0), r([m()], te.prototype, "enableMidpoints", void 0), r([m()], te.prototype, "enableMovement", void 0), r([m()], te.prototype, "enableVertices", void 0), r([m()], te.prototype, "graphic", void 0), r([m({ value: true })], te.prototype, "highlightsEnabled", null), r([m()], te.prototype, "layer", void 0), r([m({ readOnly: true })], te.prototype, "midpointGraphics", void 0), r([m()], te.prototype, "midpointSymbol", void 0), r([m({ readOnly: true })], te.prototype, "selectedVertices", void 0), r([m()], te.prototype, "snappingManager", void 0), r([m({ readOnly: true })], te.prototype, "state", null), r([m()], te.prototype, "symbols", void 0), r([m({ type: l2 })], te.prototype, "sketchOptions", void 0), r([m({ readOnly: true })], te.prototype, "type", void 0), r([m({ readOnly: true })], te.prototype, "vertexGraphics", void 0), r([m()], te.prototype, "view", void 0), te = r([a("esri.views.draw.support.Reshape")], te);
var re = te;
export {
  re as default
};
//# sourceMappingURL=Reshape-2GGQWONQ.js.map
