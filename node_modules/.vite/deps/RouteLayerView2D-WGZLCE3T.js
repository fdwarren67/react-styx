import {
  t
} from "./chunk-WXM4FNHD.js";
import "./chunk-SHJSYZ5S.js";
import {
  A as A2
} from "./chunk-JKNB3ZUJ.js";
import "./chunk-7BISKPXG.js";
import "./chunk-IVUWXWSD.js";
import "./chunk-4YDWJUBU.js";
import "./chunk-7M6HCFVM.js";
import "./chunk-DTPSE2SE.js";
import {
  S as S2
} from "./chunk-6ODLL4CO.js";
import {
  y as y2
} from "./chunk-ZMZA5FVA.js";
import "./chunk-IZJLQDI2.js";
import "./chunk-GGSQ5AVK.js";
import "./chunk-AWVDCINM.js";
import {
  S,
  c,
  y
} from "./chunk-7YIEYLZ3.js";
import {
  T,
  T2,
  j,
  w
} from "./chunk-NW57PJGO.js";
import "./chunk-OGE3WOJW.js";
import "./chunk-QT7O73SQ.js";
import "./chunk-R4CRYRS5.js";
import "./chunk-NJX7X3PO.js";
import "./chunk-CXHZI2CJ.js";
import "./chunk-MAX4GY2G.js";
import "./chunk-BUZ7I3MJ.js";
import "./chunk-J2QYVOHP.js";
import "./chunk-NBFYN6KG.js";
import "./chunk-23WGP47N.js";
import "./chunk-PXIP6WLU.js";
import "./chunk-V4U366R3.js";
import "./chunk-V7SQVFRS.js";
import "./chunk-KFLWTVQX.js";
import "./chunk-BXTQHJJG.js";
import "./chunk-T5R43RTD.js";
import "./chunk-7NXOMMLC.js";
import "./chunk-F6YRPEY7.js";
import "./chunk-CCPDXL7V.js";
import "./chunk-2TACZL27.js";
import "./chunk-PKIZUJIH.js";
import "./chunk-LL7BB425.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-B7S3HUFO.js";
import "./chunk-6VF5U3IZ.js";
import "./chunk-E7IFPXEX.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-R2ZUOHHV.js";
import "./chunk-OBVDE24U.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-SNZZPKBU.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-NINPG5JV.js";
import "./chunk-32RP26YL.js";
import "./chunk-NPEU24W6.js";
import "./chunk-I75Q3UU4.js";
import "./chunk-TOU5KPOG.js";
import "./chunk-AU4QUDF3.js";
import "./chunk-5BSH2ZN2.js";
import "./chunk-HQ2GCCLQ.js";
import "./chunk-6ZLHM6GW.js";
import "./chunk-TYJV2BHR.js";
import "./chunk-I6H2R562.js";
import "./chunk-WMLTK6KE.js";
import "./chunk-SURICA27.js";
import "./chunk-PBHST2SF.js";
import "./chunk-PONPGREB.js";
import "./chunk-QNYMCEB7.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-VPRLLNNO.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-YUQ6PSJ2.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-7VGCZZPH.js";
import {
  n
} from "./chunk-FF3WJRKN.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-T52X5K2I.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-C33DSFWF.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import {
  A,
  P,
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import {
  V
} from "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  e2 as e
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import {
  G
} from "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var I = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var k = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t2) {
  return t2 instanceof c || t2 instanceof y || t2 instanceof T || t2 instanceof T2 || t2 instanceof j || t2 instanceof S || t2 instanceof w;
}
function j2(t2) {
  return V.isCollection(t2) && t2.length && M(t2.at(0));
}
function F(t2) {
  return Array.isArray(t2) && t2.length > 0 && M(t2[0]);
}
var V2 = /* @__PURE__ */ new Set(["default"]);
var G2 = class extends S2(y2) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map(), this._interaction = null, this._loadInteractionPromise = null, this.interactive = false;
  }
  get _routeItems() {
    return new n({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.addHandles(d(() => {
      const { interactive: t2, suspended: e2 } = this;
      return { interactive: t2, suspended: e2 };
    }, ({ interactive: t2, suspended: e2 }) => {
      const i = t2 && !e2;
      i && this._getInteractionLoadPromise().then((t3) => {
        t3.enabled = this.interactive && !this.suspended;
      }), this._interaction && (this._interaction.enabled = i);
    }, A)), this._updatingHandles.addOnCollectionChange(() => this._routeItems, (t2) => this._routeItemsChanged(t2), P);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    var _a;
    this._destroyGraphicsView(), ((_a = this._interaction) == null ? void 0 : _a.enabled) && (this._interaction.enabled = false);
  }
  get selectedNetworkFeatures() {
    var _a;
    return ((_a = this._interaction) == null ? void 0 : _a.selectedNetworkFeatures) ?? null;
  }
  async create(t2) {
    if (!this.interactive) return;
    return (await this._getInteractionLoadPromise()).create(t2);
  }
  async fetchPopupFeaturesAtLocation(t2, e2) {
    return this._graphicsView.hitTest(t2).filter(({ popupTemplate: t3 }) => !!t3);
  }
  highlight(t2) {
    let i;
    i = M(t2) ? [this._getNetworkFeatureUid(t2)] : F(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)) : j2(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)).toArray() : [t2.uid];
    const r2 = i.filter(G);
    return r2.length ? (this._addHighlight(r2), e(() => this._removeHighlight(r2))) : e();
  }
  async hitTest(t2, i) {
    if (this.suspended) return null;
    const r2 = this._graphicsView.hitTest(t2).filter(G).map((t3) => this._networkGraphicMap.get(t3));
    if (!r2.length) return null;
    const { layer: s } = this;
    return r2.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveEnd() {
  }
  remove(t2) {
    var _a;
    (_a = this._interaction) == null ? void 0 : _a.remove(t2);
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, t3 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), i = new t(t2.featuresTilingScheme);
    this._graphicsView = new A2({ container: i, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(i), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return I.indexOf(e2.type);
  }
  _getInteractionLoadPromise() {
    return this._loadInteractionPromise || (this._loadInteractionPromise = this._loadInteraction(), this._updatingHandles.addPromise(this._loadInteractionPromise)), this._loadInteractionPromise;
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  async _loadInteraction() {
    const { layer: t2, view: e2 } = this, { RouteLayerInteraction: i } = await import("./RouteLayerInteraction-QJLKHOJK.js");
    return this._interaction = new i({ view: e2, layer: t2 }), this._interaction;
  }
  _removeHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2) - 1;
      0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
    }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t2.removed) this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map((t3) => {
        const e2 = this._createGraphic(t3);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      }).filter(G));
      for (const e2 of t2.added) this.addHandles([d(() => e2.geometry, (t3, i) => {
        this._updateGraphic(e2, "geometry", t3, i);
      }), d(() => e2.symbol, (t3, i) => {
        this._updateGraphic(e2, "symbol", t3, i);
      }), d(() => e2.popupTemplate, (t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).popupTemplate = t3);
      })], e2);
      this._graphics.sort((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t2, e2, i, r2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = i, k.graphic = s, k.property = e2, k.oldValue = r2, k.newValue = i, this._graphicsView.graphicUpdateHandler(k);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(V2.values());
    this._graphicsView.setHighlight(t2.map((t3) => ({ objectId: t3, highlightFlags: e2 })));
  }
};
r([m()], G2.prototype, "_graphics", void 0), r([m()], G2.prototype, "_routeItems", null), r([m()], G2.prototype, "_interaction", void 0), r([m()], G2.prototype, "interactive", void 0), r([m({ readOnly: true })], G2.prototype, "selectedNetworkFeatures", null), G2 = r([a("esri.views.2d.layers.RouteLayerView2D")], G2);
var H = G2;
export {
  H as default
};
//# sourceMappingURL=RouteLayerView2D-WGZLCE3T.js.map
