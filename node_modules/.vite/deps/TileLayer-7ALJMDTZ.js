import {
  f as f3,
  m as m2,
  se
} from "./chunk-RLLWSFJD.js";
import "./chunk-TMXFIMYK.js";
import {
  p as p3
} from "./chunk-QNWGXX56.js";
import "./chunk-XIL65DCI.js";
import "./chunk-3TEY2BPT.js";
import "./chunk-6TKDWEU3.js";
import "./chunk-M76M42H4.js";
import "./chunk-KERBX4PO.js";
import "./chunk-N7FB6BVA.js";
import "./chunk-EKEKHPBG.js";
import "./chunk-36CN7JP2.js";
import "./chunk-WX3BOMD3.js";
import "./chunk-TSFKACKN.js";
import "./chunk-W5QWJI4E.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import {
  o as o2
} from "./chunk-YZNN4Y2U.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-Q44EAKHA.js";
import "./chunk-4HTLBMKF.js";
import "./chunk-3XDQGJHT.js";
import "./chunk-BMOULVP4.js";
import "./chunk-LVHCS2TZ.js";
import "./chunk-YSZGPB5I.js";
import {
  i
} from "./chunk-5GYWQFHA.js";
import "./chunk-QOBHQZYU.js";
import "./chunk-CKW4LZG2.js";
import "./chunk-VYOLHG4T.js";
import "./chunk-RMOE6XHW.js";
import "./chunk-QAXPIBME.js";
import {
  l
} from "./chunk-WOB72RZU.js";
import "./chunk-S4QLDBOB.js";
import {
  e
} from "./chunk-RTA3XNM7.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-XZDT5RTS.js";
import "./chunk-QAP2FVP7.js";
import "./chunk-6EREU4EG.js";
import "./chunk-7DHQ2VMC.js";
import "./chunk-ZXHHBJMH.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-5T3XQRJL.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import {
  j
} from "./chunk-K5B7AETB.js";
import "./chunk-5APVNM2E.js";
import {
  f as f2
} from "./chunk-73NNNHMH.js";
import {
  b
} from "./chunk-C6YDI6QX.js";
import {
  y
} from "./chunk-DJ5HVIE7.js";
import {
  S
} from "./chunk-KPY4ZIC2.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import {
  t
} from "./chunk-THN5CUTS.js";
import "./chunk-FF3WJRKN.js";
import "./chunk-4GYBOMKF.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import {
  p as p2
} from "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import {
  t as t2
} from "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import {
  f
} from "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import {
  g as g2
} from "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import {
  s as s2
} from "./chunk-LSOJIRW6.js";
import {
  o
} from "./chunk-FSFEOCO5.js";
import {
  r as r2
} from "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import {
  P2 as P,
  d,
  g2 as g,
  p2 as p
} from "./chunk-BECTSF5P.js";
import {
  I,
  _,
  v
} from "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  a
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var I2 = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var B = W = class extends p2(t2(m2(p3(f3(b(j(l(S(f2(i(e(f)))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r3) {
    return "string" == typeof e2 ? { url: e2, ...r3 } : e2;
  }
  load(e2) {
    const r3 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(a).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e2 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r3) {
    var _a;
    return (e2 = e2 || ((_a = r3.tileInfo) == null ? void 0 : _a.spatialReference)) && g2.fromJSON(e2);
  }
  writeSublayers(e2, r3, t3, s3) {
    if (!this.loaded || !e2) return;
    const i2 = e2.slice().reverse().flatten(({ sublayers: e3 }) => e3 && e3.toArray().reverse()).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s3 };
    i2.forEach((e3) => {
      const r4 = e3.write({}, a3);
      o3.push(r4);
    });
    o3.some((e3) => Object.keys(e3).length > 1) && (r3.layers = o3);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map((e3) => I(e3).path) : null;
  }
  fetchTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return P(a3, l2).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r3 = await this.fetchTile(e2, t3, s3, i2);
      return o2(r3, e2, t3, s3, o3);
    }
    const a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n } = await P(a3, l2);
    return o2(n, e2, t3, s3, o3);
  }
  getTileUrl(e2, r3, t3) {
    var _a, _b;
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e2}/${r3}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, (e2) => {
      e2(this.allSublayers);
    });
  }
  _fetchService(e2) {
    return new Promise((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl) throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o3 = d(this.parsedUrl.path);
      if (null != o3 && "ImageServer" === o3.serverType) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      P(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s3, i2);
    }).then((r3) => {
      let t3 = this.url;
      if (r3.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(t3)) return this._fetchServerVersion(t3, e2).then((e3) => {
        this.read({ currentVersion: e3 });
      }).catch(() => {
      });
    });
  }
  _fetchServerVersion(e2, s3) {
    if (!p(e2)) return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return P(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then((e3) => {
      if (e3.data && e3.data.currentVersion) return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e2) {
    const r3 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);
    return r3 ? r3[2] : void 0;
  }
  _getDefaultAttribution(e2) {
    if (null == e2) return null;
    let r3;
    e2 = e2.toLowerCase();
    for (let t3 = 0, s3 = I2.length; t3 < s3; t3++) if (r3 = I2[t3], r3.toLowerCase().includes(e2)) return _("//static.arcgis.com/attribution/" + r3);
    return null;
  }
  _getDefaultTileServers(e2) {
    if (null == e2) return [];
    const r3 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t3 ? [e2, e2.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[C];
  }
};
r([m({ readOnly: true })], B.prototype, "attributionDataUrl", null), r([m({ type: ["show", "hide", "hide-children"] })], B.prototype, "listMode", void 0), r([m({ json: { read: true, write: true } })], B.prototype, "blendMode", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], B.prototype, "isReference", void 0), r([m({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], B.prototype, "operationalLayerType", void 0), r([m({ type: Boolean })], B.prototype, "resampling", void 0), r([m()], B.prototype, "sourceJSON", void 0), r([m({ type: g2 })], B.prototype, "spatialReference", void 0), r([o("spatialReference", ["spatialReference", "tileInfo"])], B.prototype, "readSpatialReference", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], B.prototype, "path", void 0), r([m({ readOnly: true })], B.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [se] } })], B.prototype, "writeSublayers", null), r([m({ json: { read: false, write: false } })], B.prototype, "popupEnabled", void 0), r([m()], B.prototype, "tileServers", null), r([s2("tileServers")], B.prototype, "castTileServers", null), r([m({ readOnly: true, json: { read: false } })], B.prototype, "type", void 0), r([m(y)], B.prototype, "url", void 0), B = W = r([a2("esri.layers.TileLayer")], B);
var C = Symbol("default-fetch-tile");
B.prototype.fetchTile[C] = true;
var N = B;
export {
  N as default
};
//# sourceMappingURL=TileLayer-7ALJMDTZ.js.map
