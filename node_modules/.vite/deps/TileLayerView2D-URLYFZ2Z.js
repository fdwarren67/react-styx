import {
  n as n2,
  o,
  r as r3
} from "./chunk-QSB3UKLL.js";
import {
  P,
  S as S2
} from "./chunk-S7ZYQ7Z4.js";
import {
  r as r4
} from "./chunk-4NUJE7UV.js";
import {
  h as h2
} from "./chunk-MU7JKUDJ.js";
import "./chunk-FQNFQXI3.js";
import "./chunk-MVZZVRSZ.js";
import "./chunk-SHJSYZ5S.js";
import {
  A
} from "./chunk-JKNB3ZUJ.js";
import "./chunk-7BISKPXG.js";
import "./chunk-IVUWXWSD.js";
import "./chunk-4YDWJUBU.js";
import "./chunk-7WOCIDMW.js";
import {
  i
} from "./chunk-YISRE3T5.js";
import "./chunk-7M6HCFVM.js";
import "./chunk-DTPSE2SE.js";
import {
  S
} from "./chunk-6ODLL4CO.js";
import {
  y
} from "./chunk-ZMZA5FVA.js";
import "./chunk-IZJLQDI2.js";
import "./chunk-GGSQ5AVK.js";
import "./chunk-AWVDCINM.js";
import "./chunk-M44TFGCQ.js";
import "./chunk-TMXFIMYK.js";
import "./chunk-IVPVPFYU.js";
import "./chunk-QT7O73SQ.js";
import "./chunk-R4CRYRS5.js";
import "./chunk-NJX7X3PO.js";
import "./chunk-P5AGQYYC.js";
import "./chunk-223G2GN7.js";
import "./chunk-CXHZI2CJ.js";
import "./chunk-MAX4GY2G.js";
import "./chunk-55SEMSMA.js";
import "./chunk-BUZ7I3MJ.js";
import "./chunk-J2QYVOHP.js";
import "./chunk-PQUUCIML.js";
import "./chunk-NBFYN6KG.js";
import "./chunk-23WGP47N.js";
import "./chunk-PXIP6WLU.js";
import "./chunk-V4U366R3.js";
import "./chunk-Z2KLKHIE.js";
import "./chunk-V7SQVFRS.js";
import "./chunk-3YC3Z7OQ.js";
import "./chunk-355MBCYM.js";
import "./chunk-KFLWTVQX.js";
import "./chunk-BXTQHJJG.js";
import "./chunk-T5R43RTD.js";
import "./chunk-7NXOMMLC.js";
import "./chunk-F6YRPEY7.js";
import "./chunk-CCPDXL7V.js";
import "./chunk-2TACZL27.js";
import "./chunk-PKIZUJIH.js";
import "./chunk-LL7BB425.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-MVYDN2TM.js";
import "./chunk-B7S3HUFO.js";
import "./chunk-6VF5U3IZ.js";
import "./chunk-E7IFPXEX.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-R2ZUOHHV.js";
import "./chunk-OBVDE24U.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-W5QWJI4E.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-SNZZPKBU.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-NINPG5JV.js";
import "./chunk-32RP26YL.js";
import "./chunk-I2RHXV3Q.js";
import "./chunk-QSDQ7XKD.js";
import "./chunk-HUXEKERJ.js";
import "./chunk-NPEU24W6.js";
import "./chunk-I75Q3UU4.js";
import {
  u2 as u
} from "./chunk-TOU5KPOG.js";
import "./chunk-6D65DCMG.js";
import "./chunk-GTVVYAXM.js";
import "./chunk-AU4QUDF3.js";
import "./chunk-XOXXDYBM.js";
import {
  c
} from "./chunk-5BSH2ZN2.js";
import "./chunk-HQ2GCCLQ.js";
import "./chunk-6ZLHM6GW.js";
import {
  p,
  r as r2
} from "./chunk-74GH4Z6V.js";
import {
  h
} from "./chunk-PXBFVQ6M.js";
import "./chunk-TYJV2BHR.js";
import "./chunk-I6H2R562.js";
import {
  e as e2
} from "./chunk-WMLTK6KE.js";
import "./chunk-SURICA27.js";
import "./chunk-PBHST2SF.js";
import "./chunk-PONPGREB.js";
import "./chunk-QNYMCEB7.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-VPRLLNNO.js";
import {
  g
} from "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-YUQ6PSJ2.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-TKEIF3N7.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-T52X5K2I.js";
import "./chunk-5E5JYM5A.js";
import {
  c as c2
} from "./chunk-I6AFDEJM.js";
import "./chunk-C33DSFWF.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import {
  s
} from "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  D,
  b,
  e2 as e
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var I = [0, 0];
var C = class extends i(r3(S(y))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c2(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, i2 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, i2 == null ? void 0 : i2.effectiveMinLOD, i2 == null ? void 0 : i2.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i3) => this.fetchTile(e4, i3), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), P(this, this.layer)) {
      const e4 = this._highlightView = new A({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new S2({ createFetchPopupFeaturesQueryGeometry: (e5, i3) => r4(e5, i3, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (i3, t) => {
        e4.graphicUpdateHandler({ graphic: i3, property: t });
      }, layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a, _b;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, i2) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, i2) : [];
  }
  highlight(e3, t) {
    const s2 = u(e3);
    if (0 === s2.length) return e();
    const r5 = (t == null ? void 0 : t.name) ?? c;
    return this._addHighlightGraphics(s2, r5), e(() => !this.destroyed && this._removeHighlightGraphics(s2, r5));
  }
  _processHighlight() {
    var _a;
    const e3 = this._getHighlights();
    (_a = this._highlightView) == null ? void 0 : _a.setHighlight(e3);
  }
  _addHighlightGraphics(e3, i2) {
    this._highlightGraphics.addMany(e3), this._addHighlights(e3.map((e4) => e4.uid), i2);
  }
  _removeHighlightGraphics(e3, i2) {
    this._highlightGraphics.removeMany(e3), this._removeHighlights(e3.map((e4) => e4.uid), i2);
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return s((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const i2 = this._bitmapView.createTile(e3), t = i2.bitmap;
    return [t.x, t.y] = this._tileInfoView.getTileCoords(I, i2.key), t.resolution = this._tileInfoView.getTileResolution(i2.key), [t.width, t.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(i2)), this._bitmapView.addChild(i2), this.requestUpdate(), i2;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, i2 = {}) {
    return this.tilemapCache ? this._fetchTileWithTilemapCache(e3, i2) : this._fetchTileWithoutTilemapCache(e3, i2);
  }
  async _fetchTileWithoutTilemapCache(e3, i2 = {}) {
    const { signal: t, resamplingLevel: r5 = 0 } = i2;
    try {
      return await this._fetchImage(e3, t);
    } catch (o2) {
      if (b(o2)) throw o2;
      if (!this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (r5 < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          const s2 = new e2(t2), o3 = await this._fetchTileWithoutTilemapCache(s2, { ...i2, resamplingLevel: r5 + 1 });
          return n2(this._tileInfoView, o3, s2, e3);
        }
      }
      return o(this._tileInfoView.tileInfo.size);
    }
  }
  async _fetchTileWithTilemapCache(e3, i2 = {}) {
    const t = this.tilemapCache, { signal: o2, resamplingLevel: l = 0 } = i2, h3 = new e2(0, 0, 0, 0);
    let a2, n3 = null;
    try {
      if (n3 = await t.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, h3, { signal: o2 }), !this.resampling && h3.level !== e3.level) return await D(i2), o(this._tileInfoView.tileInfo.size);
      a2 = await this._fetchImage(h3, o2);
    } catch (p2) {
      if (b(p2)) throw p2;
      if (this.resampling && "unknown" === n3 && l < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          h3.set(t2);
          try {
            a2 = await this._fetchTileWithTilemapCache(h3, { ...i2, resamplingLevel: l + 1 });
          } catch {
          }
        }
      }
    }
    return a2 ? this.resampling ? n2(this._tileInfoView, a2, h3, e3) : a2 : o(this._tileInfoView.tileInfo.size);
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (i2) {
        b(i2) || n.getLogger(this).error(i2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i2 });
  }
};
r([m()], C.prototype, "resampling", null), r([m()], C.prototype, "tilemapCache", null), C = r([a("esri.views.2d.layers.TileLayerView2D")], C);
var H = C;
export {
  H as default
};
//# sourceMappingURL=TileLayerView2D-URLYFZ2Z.js.map
