import {
  K,
  ee,
  oe
} from "./chunk-HGAE5Y7J.js";
import "./chunk-TRZZZ5YS.js";
import {
  E,
  N
} from "./chunk-5LCZI6ZH.js";
import {
  g
} from "./chunk-GWOCGJJE.js";
import "./chunk-CDBQ673E.js";
import {
  u
} from "./chunk-3RTT2FUJ.js";
import {
  f
} from "./chunk-VC3KNIUZ.js";
import "./chunk-L4EC6LZW.js";
import "./chunk-N6TERPCK.js";
import {
  L
} from "./chunk-SEOVQLIZ.js";
import "./chunk-EUB5OBXG.js";
import "./chunk-5RGDMZ2O.js";
import "./chunk-2UD6J77T.js";
import "./chunk-YYDDGFL6.js";
import {
  j,
  x
} from "./chunk-SNZZPKBU.js";
import {
  st,
  ut
} from "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-3WB47P7Q.js";
import "./chunk-6ZI2HC5K.js";
import "./chunk-WESTCUBG.js";
import "./chunk-IZJWCIYF.js";
import "./chunk-BG4U4RTY.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-LMQPVKGX.js";
import "./chunk-2ZAGB4JV.js";
import "./chunk-B2CK3GCY.js";
import "./chunk-NINPG5JV.js";
import "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-VT63JL2L.js";
import "./chunk-WJNJ43ZU.js";
import "./chunk-MIW7M4LL.js";
import "./chunk-6W3XFTHW.js";
import "./chunk-ZPDG5M3T.js";
import "./chunk-SB6LU3VH.js";
import {
  Z
} from "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-GNZ342SJ.js";
import "./chunk-EO3ETQWH.js";
import "./chunk-QW7P5D76.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-PQVKYMOX.js";
import {
  n as n2
} from "./chunk-DCSYHXZG.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import {
  n as n3
} from "./chunk-P6IUM5K3.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import {
  d
} from "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import {
  s as s4
} from "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import "./chunk-VTWDBFQT.js";
import {
  s as s3
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  b,
  s as s2
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var F = "esri.layers.WFSLayer";
var S = class {
  constructor() {
    this._customParameters = null, this._queryEngine = null, this._supportsPagination = true;
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e, r = {}) {
    const { getFeatureUrl: s5, getFeatureOutputFormat: o, fields: n4, geometryType: i, featureType: u2, maxRecordCount: l, maxTotalRecordCount: m, maxPageCount: g2, objectIdField: d2, customParameters: f2 } = e, { spatialReference: _, getFeatureSpatialReference: x2 } = oe(s5, u2, e.spatialReference);
    try {
      await x(x2, _);
    } catch {
      throw new s("unsupported-projection", "Projection not supported", { inSpatialReference: x2, outSpatialReference: _ });
    }
    s2(r), this._customParameters = f2, this._featureType = u2, this._fieldsIndex = Z.fromLayerJSON({ fields: n4, dateFieldsTimeReference: n4.some((e2) => "esriFieldTypeDate" === e2.type) ? { timeZoneIANA: n2 } : null }), this._geometryType = i, this._getFeatureUrl = s5, this._getFeatureOutputFormat = o, this._getFeatureSpatialReference = x2, this._maxRecordCount = l, this._maxTotalRecordCount = m, this._maxPageCount = g2, this._objectIdField = d2, this._spatialReference = _;
    let C = await this._snapshotFeatures(r);
    if (C.errors.length > 0 && (this._supportsPagination = false, C = await this._snapshotFeatures(r), C.errors.length > 0)) throw C.errors[0];
    return this._queryEngine = new L({ fieldsIndex: this._fieldsIndex, geometryType: i, hasM: false, hasZ: false, objectIdField: d2, spatialReference: _, timeInfo: null, featureStore: new f({ geometryType: i, hasM: false, hasZ: false }) }), this._queryEngine.featureStore.addMany(C.features), { warnings: E2(C), extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    await this._waitSnapshotComplete();
    return (await this._queryEngine.executeQueryForIds(e, t.signal)).filter(n3);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), u(this._queryEngine, e, t.signal);
  }
  async queryAttributeBins(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeAttributeBinsQuery(e, t.signal);
  }
  async refresh(t) {
    var _a;
    return this._customParameters = t.customParameters, this._maxRecordCount = t.maxRecordCount, this._maxTotalRecordCount = t.maxTotalRecordCount, this._maxPageCount = t.maxPageCount, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d((e) => this._snapshotFeatures({ signal: e })), this._snapshotTask.promise.then((e) => {
      var _a2;
      this._queryEngine.featureStore.clear(), this._queryEngine.featureStore.addMany(e.features);
      for (const t2 of E2(e)) n.getLogger(F).warn(new s3("wfs-layer:refresh-warning", t2.message, t2.details));
      ((_a2 = e.errors) == null ? void 0 : _a2.length) && n.getLogger(F).warn(new s3("wfs-layer:refresh-error", "Refresh completed with errors", { errors: e.errors }));
    }, () => {
      this._queryEngine.featureStore.clear();
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _snapshotFeatures(e) {
    const t = e == null ? void 0 : e.signal, r = this._maxTotalRecordCount, o = this._maxPageCount, n4 = this._supportsPagination ? await ee(this._getFeatureUrl, this._featureType.typeName, { customParameters: this._customParameters, signal: t }) : void 0;
    let i = [];
    const u2 = [];
    if (null == n4) try {
      i = await this._singleQuery(t);
    } catch (l) {
      b(l) || u2.push(l);
    }
    else {
      const e2 = Math.min(n4, r), a = T(this, Math.max(1, Math.min(Math.ceil(e2 / this._maxRecordCount), o)), t);
      await Promise.allSettled(Array.from({ length: 10 }).map(() => j2(a, i, u2)));
    }
    return s2(t), { features: i, totalRecordCount: n4, maxTotalRecordCount: r, maxPageCount: o, errors: u2 };
  }
  async _singleQuery(e) {
    const t = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, signal: e });
    return this._processGeoJSON(t, { signal: e });
  }
  async _pageQuery(e, t) {
    const r = e * this._maxRecordCount, a = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, startIndex: r, count: this._maxRecordCount, signal: t });
    return this._processGeoJSON(a, { startIndex: r, signal: t });
  }
  _processGeoJSON(e, t) {
    E(e, this._getFeatureSpatialReference.wkid);
    const { startIndex: r, signal: s5 } = t;
    s2(s5);
    const o = N(e, { geometryType: this._geometryType, hasZ: false, objectIdField: this._objectIdField });
    if (!s4(this._spatialReference, this._getFeatureSpatialReference)) for (const a of o) null != a.geometry && (a.geometry = st(j(ut(a.geometry, this._geometryType, false, false), this._getFeatureSpatialReference, this._spatialReference)));
    let l = r ?? 1;
    for (const a of o) {
      const e2 = {};
      g(this._fieldsIndex, e2, a.attributes, true), a.attributes = e2, null == e2[this._objectIdField] && (a.objectId = e2[this._objectIdField] = l++);
    }
    return o;
  }
};
function* T(e, t, r) {
  for (let a = 0; a < t; a++) yield e._pageQuery(a, r);
}
async function j2(e, t, r) {
  let a = e.next();
  for (; !a.done; ) {
    try {
      const e2 = await a.value;
      t.push(...e2);
    } catch (o) {
      b(o) || r.push(o);
    }
    a = e.next();
  }
}
function E2(e) {
  const t = [];
  return null != e.totalRecordCount && (e.features.length < e.totalRecordCount && t.push({ name: "wfs-layer:maxRecordCount-too-low", message: `Could only fetch ${e.features.length} of ${e.totalRecordCount} in ${e.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount } }), e.totalRecordCount > e.maxTotalRecordCount && t.push({ name: "wfs-layer:large-dataset", message: `The number of ${e.totalRecordCount} features exceeds the maximum allowed of ${e.maxTotalRecordCount}.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount, maxTotalRecordCount: e.maxTotalRecordCount } })), t;
}
export {
  S as default
};
//# sourceMappingURL=WFSSourceWorker-TZZQOR23.js.map
