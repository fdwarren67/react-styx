import {
  i as i2
} from "./chunk-TYPEWHVW.js";
import {
  _
} from "./chunk-E7MXPG2R.js";
import {
  r as r2
} from "./chunk-YABYS5KB.js";
import "./chunk-7WOCIDMW.js";
import {
  i
} from "./chunk-YISRE3T5.js";
import "./chunk-7M6HCFVM.js";
import "./chunk-DTPSE2SE.js";
import {
  S
} from "./chunk-6ODLL4CO.js";
import {
  y
} from "./chunk-ZMZA5FVA.js";
import "./chunk-IZJLQDI2.js";
import "./chunk-GGSQ5AVK.js";
import "./chunk-AWVDCINM.js";
import {
  a as a2
} from "./chunk-MMLJTKWA.js";
import "./chunk-NJX7X3PO.js";
import "./chunk-CXHZI2CJ.js";
import "./chunk-MAX4GY2G.js";
import "./chunk-BUZ7I3MJ.js";
import "./chunk-J2QYVOHP.js";
import "./chunk-NBFYN6KG.js";
import "./chunk-BXTQHJJG.js";
import "./chunk-T5R43RTD.js";
import "./chunk-CCPDXL7V.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-R2ZUOHHV.js";
import "./chunk-OBVDE24U.js";
import "./chunk-6PQMUQJV.js";
import "./chunk-JDUGBJ57.js";
import "./chunk-3HA4XA2C.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-DGDYI2GQ.js";
import "./chunk-PJIFP7OJ.js";
import "./chunk-NPEU24W6.js";
import "./chunk-I75Q3UU4.js";
import "./chunk-TOU5KPOG.js";
import "./chunk-5BSH2ZN2.js";
import "./chunk-HQ2GCCLQ.js";
import "./chunk-PXBFVQ6M.js";
import "./chunk-TYJV2BHR.js";
import "./chunk-I6H2R562.js";
import "./chunk-WMLTK6KE.js";
import "./chunk-SURICA27.js";
import "./chunk-PBHST2SF.js";
import "./chunk-PONPGREB.js";
import "./chunk-QNYMCEB7.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import "./chunk-VPRLLNNO.js";
import "./chunk-Q44EAKHA.js";
import "./chunk-4HTLBMKF.js";
import "./chunk-YUQ6PSJ2.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-C33DSFWF.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-GY7XU54K.js";
import "./chunk-D3P3E2RE.js";
import {
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  m
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  b,
  s as s2,
  u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var m2 = (m3) => {
  let n2 = class extends m3 {
    initialize() {
      this.exportImageParameters = new a2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = u(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    get timeExtent() {
      var _a;
      return i2(this.layer, (_a = this.view) == null ? void 0 : _a.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e, r3) {
      const { layer: s3 } = this;
      if (!e) throw new s("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a3 } = s3;
      if (!a3) throw new s("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: a3 });
      const p = this.createFetchPopupFeaturesQuery(e);
      if (!p) return [];
      const { extent: i3, width: m4, height: n3, x: c, y: u2 } = p;
      if (!(i3 && m4 && n3)) throw new s("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: i3, width: m4, height: n3 });
      const h = await s3.fetchFeatureInfo(i3, m4, n3, c, u2);
      return s2(r3), h;
    }
  };
  return r([m()], n2.prototype, "exportImageParameters", void 0), r([m({ readOnly: true })], n2.prototype, "exportImageVersion", null), r([m()], n2.prototype, "layer", void 0), r([m({ readOnly: true })], n2.prototype, "timeExtent", null), n2 = r([a("esri.views.layers.WMSLayerView")], n2), n2;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var g = class extends m2(i(S(y))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new r2();
  }
  supportsSpatialReference(e) {
    return this.layer.serviceSupportsSpatialReference(e);
  }
  update(e) {
    this.strategy.update(e).catch((e2) => {
      b(e2) || n.getLogger(this).error(e2);
    });
  }
  attach() {
    const { layer: e } = this, { imageMaxHeight: t, imageMaxWidth: r3 } = e;
    this.bitmapContainer = new r2(), this.container.addChild(this.bitmapContainer), this.strategy = new _({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r3, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(d(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = u(this.strategy), this.container.removeAllChildren();
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e) {
    const { view: t, bitmapContainer: r3 } = this, { x: i3, y: s3 } = e, { spatialReference: a3 } = t;
    let o, p = 0, m3 = 0;
    if (r3.children.some((e2) => {
      const { width: t2, height: r4, resolution: h2, x: c2, y: d3 } = e2, u2 = c2 + h2 * t2, g2 = d3 - h2 * r4;
      return i3 >= c2 && i3 <= u2 && s3 <= d3 && s3 >= g2 && (o = new w({ xmin: c2, ymin: g2, xmax: u2, ymax: d3, spatialReference: a3 }), p = t2, m3 = r4, true);
    }), !o) return null;
    const h = o.width / p, c = Math.round((i3 - o.xmin) / h), d2 = Math.round((o.ymax - s3) / h);
    return { extent: o, width: p, height: m3, x: c, y: d2 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e, t, r3, i3) {
    return this.layer.fetchImageBitmap(e, t, r3, { timeExtent: this.timeExtent, ...i3 });
  }
};
r([m()], g.prototype, "strategy", void 0), r([m()], g.prototype, "updating", void 0), g = r([a("esri.views.2d.layers.WMSLayerView2D")], g);
var y2 = g;
export {
  y2 as default
};
//# sourceMappingURL=WMSLayerView2D-L6BRKCXG.js.map
