import {
  t
} from "./chunk-LFIFTYRG.js";
import {
  i,
  r
} from "./chunk-NINPG5JV.js";
import {
  Ye
} from "./chunk-HPA5LQSZ.js";
import "./chunk-3SU7BOQG.js";
import "./chunk-JED5CITL.js";
import "./chunk-TRBU6WLM.js";
import "./chunk-XBF3Q5CM.js";
import "./chunk-BSQH3I7W.js";
import "./chunk-PHUXOQ5V.js";
import "./chunk-7LZ547RY.js";
import "./chunk-3XDQGJHT.js";
import "./chunk-BMOULVP4.js";
import "./chunk-LVHCS2TZ.js";
import "./chunk-YSZGPB5I.js";
import "./chunk-5GYWQFHA.js";
import "./chunk-MR2DYNTG.js";
import "./chunk-65Z5LAMC.js";
import "./chunk-IFZYBBFM.js";
import "./chunk-WYOFTVUU.js";
import "./chunk-S4AV6MOI.js";
import "./chunk-QOBHQZYU.js";
import "./chunk-CKW4LZG2.js";
import "./chunk-VYOLHG4T.js";
import "./chunk-TKEIF3N7.js";
import "./chunk-RMOE6XHW.js";
import "./chunk-QAXPIBME.js";
import "./chunk-ISRSQJQR.js";
import "./chunk-WOB72RZU.js";
import "./chunk-HKTC3ZVY.js";
import "./chunk-MQ3WYGQ2.js";
import "./chunk-S4QLDBOB.js";
import "./chunk-RTA3XNM7.js";
import "./chunk-NUJWMWJZ.js";
import "./chunk-5ZCYRESW.js";
import "./chunk-XZDT5RTS.js";
import "./chunk-QAP2FVP7.js";
import {
  d
} from "./chunk-6EREU4EG.js";
import "./chunk-7DHQ2VMC.js";
import "./chunk-Z5UGTZ3C.js";
import "./chunk-ZXHHBJMH.js";
import "./chunk-5JWPKXQI.js";
import "./chunk-4GBYHIKO.js";
import "./chunk-ZDLUQDDX.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-RP6IGXYU.js";
import "./chunk-5T3XQRJL.js";
import "./chunk-MRPAGZVF.js";
import "./chunk-VIBOZNXV.js";
import "./chunk-NBXBK3QW.js";
import "./chunk-K5B7AETB.js";
import "./chunk-KLCKQJVO.js";
import "./chunk-5APVNM2E.js";
import "./chunk-73NNNHMH.js";
import "./chunk-C6YDI6QX.js";
import "./chunk-DJ5HVIE7.js";
import "./chunk-KPY4ZIC2.js";
import "./chunk-HGWPGAUL.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-WO43UGNC.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-LTFI343D.js";
import "./chunk-FVMWI3UB.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-4GYBOMKF.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-RO66CZDO.js";
import "./chunk-KMVZXZBR.js";
import "./chunk-7HSZJLYU.js";
import "./chunk-BMGYJDE7.js";
import "./chunk-WHOXQQMB.js";
import "./chunk-YQH3DXBZ.js";
import "./chunk-T52X5K2I.js";
import "./chunk-VE2K63DA.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-GSNLF6RP.js";
import "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import {
  b
} from "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import {
  o
} from "./chunk-PHADC6NW.js";
import {
  m
} from "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import {
  C
} from "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  p
} from "./chunk-VTWDBFQT.js";
import "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import "./chunk-SCZRL2WP.js";
import {
  s
} from "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import {
  a,
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/arcade.js
var y = null;
function f(e, t2, a2, n2 = {}) {
  const o2 = t2.elementType, c = "value", i2 = "array" === o2.type ? [{ name: c, type: o2.type, elementType: o2.elementType }] : "dictionary" === o2.type ? [{ name: c, type: o2.type, properties: o2.properties }] : [{ name: c, type: o2.type }];
  return new t(e.map((e2) => {
    const t3 = {};
    return g(t3, i2, { [c]: e2 }, a2, n2), t3[c];
  }));
}
function d2(e, t2, r2 = {}) {
  const a2 = e instanceof d ? new Ye({ source: e.features, geometryType: e.geometryType, fields: e.fields, spatialReference: e.spatialReference }) : e;
  return t2.constructFeatureSet(a2, r2.spatialReference, null, true, r2.lruCache, r2.interceptor);
}
function b2(e, t2, r2 = {}) {
  const { spatialReference: a2, interceptor: n2, lruCache: o2 } = r2;
  return "string" == typeof e ? t2.createFeatureSetCollectionFromService(e, a2, o2, n2) : t2.createFeatureSetCollectionFromMap(e, a2, o2, n2);
}
function v(e, t2, r2, a2 = {}) {
  const n2 = {};
  return g(n2, t2.properties, e, r2, a2), new y.Dictionary(n2);
}
function g(e, r2, a2, n2, o2 = {}) {
  const c = {};
  for (const t2 of Object.keys(a2)) c[t2.toLowerCase()] = a2[t2];
  for (const s2 of r2) {
    const r3 = s2.name.toLowerCase();
    if (o2.variablesPreProcessed) e[r3] = c[r3];
    else switch (s2.type) {
      case "array": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : f(t2, s2, n2, o2);
        break;
      }
      case "feature": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : y.Feature.createFromGraphic(t2, o2 == null ? void 0 : o2.timeZone);
        break;
      }
      case "featureSet": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : n2 ? d2(t2, n2, o2) : null;
        break;
      }
      case "featureSetCollection": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : n2 ? b2(t2, n2, o2) : null;
        break;
      }
      case "dictionary": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : v(t2, s2, n2, o2);
        break;
      }
      case "date": {
        const a3 = c[r3];
        e[r3] = a3 ? a3 instanceof m ? a3 : (o2 == null ? void 0 : o2.timeZone) ? m.dateJSAndZoneToArcadeDate(a3, o2 == null ? void 0 : o2.timeZone) : m.dateJSToArcadeDate(a3) : null;
        break;
      }
      case "dateOnly": {
        const t2 = c[r3];
        e[r3] = t2 ? t2 instanceof i ? t2 : i.fromReader(t2) : null;
        break;
      }
      case "time": {
        const t2 = c[r3];
        e[r3] = t2 ? t2 instanceof r ? t2 : r.fromReader(t2) : null;
        break;
      }
      case "knowledgeGraph":
      case "geometry":
      case "boolean":
      case "text":
      case "number":
        e[r3] = c[r3];
        break;
      case "voxel": {
        const t2 = c[r3];
        e[r3] = null == t2 ? null : new y.Voxel(t2, o2 == null ? void 0 : o2.timeZone);
        break;
      }
    }
  }
}
function S(e, t2) {
  for (const r2 of e) t2.push(r2), "dictionary" === r2.type && S(r2.properties, t2);
  return t2;
}
function w(e, t2, r2, a2, n2) {
  const { spatialReference: o2, interceptor: c, lruCache: i2, console: p2, abortSignal: s2, timeZone: l, services: m2 = { portal: C.getDefault() } } = r2, y2 = { vars: {}, spatialReference: o2, interceptor: c, timeZone: l, lrucache: i2, useAsync: n2, services: m2, console: p2, abortSignal: s2 };
  return t2 ? (g(y2.vars, e.variables, t2, a2, r2), y2) : y2;
}
function $(t2, r2) {
  switch (r2.getArcadeType(t2)) {
    case "number":
    case "text":
    case "boolean":
    case "point":
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
      return t2;
    case "date":
      return t2.toJSDate();
    case "time":
    case "dateOnly":
      return t2.toString();
    case "feature": {
      const r3 = (t2.type, t2), a2 = "geometry" in r3 ? r3.geometry() : null, n2 = "readAttributes" in r3 ? r3.readAttributes() : r3.attributes;
      return new b({ geometry: a2, attributes: n2 });
    }
    case "dictionary": {
      const e = t2, a2 = e.attributes, n2 = {};
      for (const t3 of Object.keys(a2)) n2[t3] = $(e.field(t3), r2);
      return n2;
    }
    case "array":
      return ("toArray" in t2 ? t2.toArray() : t2).map((e) => $(e, r2));
  }
  return t2;
}
var h = { variables: [{ name: "$feature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$userInput", type: "geometry" }, { name: "$graph", type: "knowledgeGraph" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var C2 = { variables: [{ name: "$feature", type: "feature" }, { name: "$aggregatedFeatures", type: "featureSet" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var x = { variables: [{ name: "$voxel", type: "voxel" }] };
var j = /* @__PURE__ */ new Map([["aggregate-field", { variables: [{ name: "$feature", type: "feature" }] }], ["form-constraint", { variables: [{ name: "$feature", type: "feature" }] }], ["feature-z", { variables: [{ name: "$feature", type: "feature" }] }], ["field-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$datastore", type: "featureSetCollection" }] }], ["form-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$originalFeature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$featureSet", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$editContext", type: "dictionary", properties: [{ name: "editType", type: "text" }] }] }], ["labeling", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup", h], ["popup-element", h], ["popup-feature-reduction", C2], ["popup-element-feature-reduction", C2], ["visualization", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup-voxel", x], ["popup-element-voxel", x]]);
function A(e) {
  "feature-reduction-popup" === e ? (p(n.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup"', { replacement: '"popup-feature-reduction"', version: "4.32", warnOnce: true }), e = "popup-feature-reduction") : "feature-reduction-popup-element" === e && (p(n.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup-element"', { replacement: '"popup-element-feature-reduction"', version: "4.32", warnOnce: true }), e = "popup-element-feature-reduction");
  const t2 = j.get(e);
  if (!t2) {
    const t3 = Array.from(j.keys()).map((e2) => `'${e2}'`).join(", ");
    throw new s("createArcadeProfile:invalid-profile-name", `Invalid profile name '${e}'. You must specify one of the following values: ${t3}`);
  }
  return a(t2);
}
async function k(e, t2, r2 = {}) {
  y || (y = await o());
  const { arcade: a2, arcadeUtils: o2 } = y, { loadScriptDependencies: c, referencesMember: i2, scriptIsAsync: p2 } = a2, s2 = S(t2.variables, []), u = s2.filter((e2) => "featureSet" === e2.type || "featureSetCollection" === e2.type).map((e2) => e2.name.toLowerCase()), l = a2.parseScript(e, u);
  if (!l) throw new s("arcade:invalid-script", "Unable to create SyntaxTree");
  const f2 = o2.extractFieldNames(l), d3 = a2.scriptTouchesGeometry(l), b3 = s2.map((e2) => e2.name.toLowerCase()).filter((e2) => i2(l, e2)), v2 = p2(l, u);
  await c(l, v2, u);
  const g2 = { vars: {}, spatialReference: null, useAsync: v2 };
  for (const n2 of b3) g2.vars[n2] = "any";
  const { lruCache: h2 } = r2, C3 = a2.compileScript(l, g2), x2 = a2.featureSetUtils(), { services: j2 } = r2;
  return { execute: (e2, r3 = {}) => {
    if (v2) throw new s("arcade:invalid-execution-mode", "Cannot execute the script in synchronous mode");
    const a3 = C3(w(t2, e2, { lruCache: h2, ...r3 }, x2, v2));
    return r3.rawOutput ? a3 : $(a3, o2);
  }, executeAsync: async (e2, r3 = {}) => {
    const a3 = await C3(w(t2, e2, { lruCache: h2, services: j2, ...r3 }, x2, v2));
    return r3.rawOutput ? a3 : $(a3, o2);
  }, isAsync: v2, variablesUsed: b3, fieldsUsed: f2, geometryUsed: d3, syntaxTree: l };
}
export {
  k as createArcadeExecutor,
  A as createArcadeProfile
};
//# sourceMappingURL=arcade-TSPLVDUI.js.map
