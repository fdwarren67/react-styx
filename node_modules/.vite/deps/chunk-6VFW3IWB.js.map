{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/HighlightDownsample.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DDrawUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";import{NoParameters as r}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as l}from\"../views/webgl/ShaderBuilder.js\";class u extends r{}function o(){const r=new l,{outputs:u,fragment:o}=r;return r.include(e),o.uniforms.add(new i(\"textureInput\",(e=>e.input))),o.constants.add(\"outlineWidth\",\"int\",Math.ceil(n)),o.constants.add(\"cellSize\",\"int\",c),u.add(\"fragGrid\",\"vec2\"),o.main.add(t`ivec2 inputTextureSize = textureSize(textureInput, 0);\nivec2 cellBottomLeftCornerInput = ivec2(floor(gl_FragCoord.xy) * vec2(cellSize));\nivec2 coordMid =  cellBottomLeftCornerInput + ivec2(cellSize >> 1);\nuvec2 centreTexel = uvec2( texelFetch(textureInput, coordMid, 0).rg * 255.0) & uvec2(0x55u);\nfloat marginSquare = float(outlineWidth*outlineWidth);\nuvec2 outputValue = centreTexel & uvec2(0x55u);\nfor(int y = -outlineWidth; y <= cellSize + outlineWidth; y+=2) {\nint dy = y < 0 ? -y : y > cellSize ? y-cellSize : 0;\nint xMargin = dy > 0 ? int(ceil(sqrt(marginSquare - float(dy*dy)))) : outlineWidth;\nfor(int x = -xMargin; x <= cellSize + xMargin; x+=2) {\nivec2 coord = cellBottomLeftCornerInput + ivec2(x, y);\nuvec2[4] texels = uvec2[4] (\nuvec2(texelFetch(textureInput,coord+ivec2(0,0),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(1,0),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(0,1),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(1,1),0).rg * 255.0) & uvec2(0x55u)\n);\nif (texels[0] == texels[1] && texels[1] == texels[2] && texels[2] == texels[3] && texels[3] ==  centreTexel) {\ncontinue;\n}\nfor (int i=0; i<4; ++i){\noutputValue |= ((texels[i] ^ centreTexel) << 1);\noutputValue |= texels[i];\n}\n}\n}\nfragGrid = vec2(outputValue) / 255.0;`),r}const c=32,n=9,a=.4,s=Object.freeze(Object.defineProperty({__proto__:null,HighlightDownsampleDrawParameters:u,blurSize:a,build:o,gridCellPixelSize:c,outlineSize:n},Symbol.toStringTag,{value:\"Module\"}));export{u as H,s as a,a as b,o as c,c as g,n as o};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAI0Z,IAAM,IAAN,cAAgB,EAAC;AAAC;AAAC,SAASA,KAAG;AAAC,QAAM,IAAE,IAAI,KAAE,EAAC,SAAQC,IAAE,UAASD,GAAC,IAAE;AAAE,SAAO,EAAE,QAAQ,CAAC,GAAEA,GAAE,SAAS,IAAI,IAAI,EAAE,gBAAgB,CAAAE,OAAGA,GAAE,KAAM,CAAC,GAAEF,GAAE,UAAU,IAAI,gBAAe,OAAM,KAAK,KAAKG,EAAC,CAAC,GAAEH,GAAE,UAAU,IAAI,YAAW,OAAMI,EAAC,GAAEH,GAAE,IAAI,YAAW,MAAM,GAAED,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA0B7nB,GAAE;AAAC;AAAC,IAAMI,KAAE;AAAR,IAAWD,KAAE;AAAb,IAAe,IAAE;AAAjB,IAAoB,IAAE,OAAO,OAAO,OAAO,eAAe,EAAC,WAAU,MAAK,mCAAkC,GAAE,UAAS,GAAE,OAAMH,IAAE,mBAAkBI,IAAE,aAAYD,GAAC,GAAE,OAAO,aAAY,EAAC,OAAM,SAAQ,CAAC,CAAC;",
  "names": ["o", "u", "e", "n", "c"]
}
