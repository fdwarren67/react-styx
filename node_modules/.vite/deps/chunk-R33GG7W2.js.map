{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/materials/pbrUtils.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/AnalyticalSkyModel.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ScreenSpaceConstants.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{p as l}from\"../../../../chunks/vec32.js\";import{ZEROS as e,freeze as u}from\"../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";function n({normalTexture:u,metallicRoughnessTexture:n,metallicFactor:r,roughnessFactor:t,emissiveTexture:o,emissiveFactor:s,occlusionTexture:c}){return null==u&&null==n&&null==o&&(null==s||l(s,e))&&null==c&&(null==t||1===t)&&(null==r||1===r)}function r({normalTexture:u,metallicRoughnessTexture:n,metallicFactor:r,roughnessFactor:t,emissiveTexture:o,emissiveFactor:s,occlusionTexture:c}){return null==u&&null==n&&null==o&&(null==s||l(s,e))&&null==c&&(null==t||1===t)&&(null==r||1===r||0===r)}const t=u(1,1,.5),o=u(0,.6,.2),s=u(0,1,.2);export{t as advancedMRRFactors,s as esriSymbologyMRRFactors,o as schematicMRRFactors,n as useSchematicPBR,r as useSchematicPBRI3S};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{VertexTextureCoordinates as e}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{Float3DrawUniform as r}from\"../../shaderModules/Float3DrawUniform.js\";import{Float3PassUniform as o}from\"../../shaderModules/Float3PassUniform.js\";import{glsl as s,If as t}from\"../../shaderModules/glsl.js\";import{Texture2DDrawUniform as a}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as i}from\"../../shaderModules/Texture2DPassUniform.js\";import{GLTextureMaterialBindParameters as c}from\"../../../lib/GLTextureMaterial.js\";import{schematicMRRFactors as l}from\"../../../materials/pbrUtils.js\";import{BindType as u}from\"../../../../../webgl/BindType.js\";var n;!function(e){e[e.Disabled=0]=\"Disabled\",e[e.Normal=1]=\"Normal\",e[e.Schematic=2]=\"Schematic\",e[e.Water=3]=\"Water\",e[e.WaterOnIntegratedMesh=4]=\"WaterOnIntegratedMesh\",e[e.Simplified=5]=\"Simplified\",e[e.TerrainWithWater=6]=\"TerrainWithWater\",e[e.COUNT=7]=\"COUNT\"}(n||(n={}));class d extends c{constructor(){super(...arguments),this.mrrFactors=l}}function m(c,l){const d=l.pbrMode,m=c.fragment;if(d!==n.Schematic&&d!==n.Disabled&&d!==n.Normal)return void m.code.add(s`void applyPBRFactors() {}`);if(d===n.Disabled)return void m.code.add(s`void applyPBRFactors() {}\nfloat getBakedOcclusion() { return 1.0; }`);if(d===n.Schematic)return void m.code.add(s`vec3 mrr = vec3(0.0, 0.6, 0.2);\nfloat occlusion = 1.0;\nvoid applyPBRFactors() {}\nfloat getBakedOcclusion() { return 1.0; }`);const{hasMetallicRoughnessTexture:p,hasMetallicRoughnessTextureTransform:f,hasOcclusionTexture:h,hasOcclusionTextureTransform:g,bindType:v}=l;(p||h)&&c.include(e,l),m.code.add(s`vec3 mrr;\nfloat occlusion;`),p&&m.uniforms.add(v===u.Pass?new i(\"texMetallicRoughness\",(e=>e.textureMetallicRoughness)):new a(\"texMetallicRoughness\",(e=>e.textureMetallicRoughness))),h&&m.uniforms.add(v===u.Pass?new i(\"texOcclusion\",(e=>e.textureOcclusion)):new a(\"texOcclusion\",(e=>e.textureOcclusion))),m.uniforms.add(v===u.Pass?new o(\"mrrFactors\",(e=>e.mrrFactors)):new r(\"mrrFactors\",(e=>e.mrrFactors))),m.code.add(s`\n    ${t(p,s`void applyMetallicRoughness(vec2 uv) {\n            vec3 metallicRoughness = textureLookup(texMetallicRoughness, uv).rgb;\n            mrr[0] *= metallicRoughness.b;\n            mrr[1] *= metallicRoughness.g;\n          }`)}\n\n    ${t(h,\"void applyOcclusion(vec2 uv) { occlusion *= textureLookup(texOcclusion, uv).r; }\")}\n\n    float getBakedOcclusion() {\n      return ${h?\"occlusion\":\"1.0\"};\n    }\n\n    void applyPBRFactors() {\n      mrr = mrrFactors;\n      occlusion = 1.0;\n\n      ${t(p,`applyMetallicRoughness(${f?\"metallicRoughnessUV\":\"vuv0\"});`)}\n      ${t(h,`applyOcclusion(${g?\"occlusionUV\":\"vuv0\"});`)}\n    }\n  `)}export{n as PBRMode,d as PBRRenderingParameters,m as PhysicallyBasedRenderingParameters};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{Float3BindUniform as i}from\"../../shaderModules/Float3BindUniform.js\";import{glsl as n}from\"../../shaderModules/glsl.js\";function t(n){n.uniforms.add(new i(\"mainLightDirection\",(i=>i.lighting.mainLight.direction)))}function o(n){n.uniforms.add(new i(\"mainLightIntensity\",(i=>i.lighting.mainLight.intensity)))}function a(i){t(i.fragment),o(i.fragment),i.fragment.code.add(n`vec3 applyShading(vec3 shadingNormalWorld, float shadow) {\nfloat dotVal = clamp(dot(shadingNormalWorld, mainLightDirection), 0.0, 1.0);\nreturn mainLightIntensity * ((1.0 - shadow) * dotVal);\n}`)}export{t as addMainLightDirection,o as addMainLightIntensity,a as applyShading};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/glsl.js\";function t(t){const a=t.fragment.code;a.add(e`vec3 evaluateDiffuseIlluminationHemisphere(vec3 ambientGround, vec3 ambientSky, float NdotNG)\n{\nreturn ((1.0 - NdotNG) * ambientGround + (1.0 + NdotNG) * ambientSky) * 0.5;\n}`),a.add(e`float integratedRadiance(float cosTheta2, float roughness)\n{\nreturn (cosTheta2 - 1.0) / (cosTheta2 * (1.0 - roughness * roughness) - 1.0);\n}`),a.add(e`vec3 evaluateSpecularIlluminationHemisphere(vec3 ambientGround, vec3 ambientSky, float RdotNG, float roughness)\n{\nfloat cosTheta2 = 1.0 - RdotNG * RdotNG;\nfloat intRadTheta = integratedRadiance(cosTheta2, roughness);\nfloat ground = RdotNG < 0.0 ? 1.0 - intRadTheta : 1.0 + intRadTheta;\nfloat sky = 2.0 - ground;\nreturn (ground * ambientGround + sky * ambientSky) * 0.5;\n}`)}export{t as AnalyticalSkyModel};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{AnalyticalSkyModel as e}from\"./AnalyticalSkyModel.glsl.js\";import{PBRMode as o}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as t}from\"./PiUtils.glsl.js\";import{glsl as a}from\"../../shaderModules/glsl.js\";function n(n,r){const l=n.fragment.code;n.include(t),r.pbrMode!==o.Normal&&r.pbrMode!==o.Schematic&&r.pbrMode!==o.Simplified&&r.pbrMode!==o.TerrainWithWater||(l.add(a`float normalDistribution(float NdotH, float roughness)\n{\nfloat a = NdotH * roughness;\nfloat b = roughness / (1.0 - NdotH * NdotH + a * a);\nreturn b * b * INV_PI;\n}`),l.add(a`const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\nconst vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\nconst vec2 c2 = vec2(-1.04, 1.04);\nvec2 prefilteredDFGAnalytical(float roughness, float NdotV) {\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NdotV)) * r.x + r.y;\nreturn c2 * a004 + r.zw;\n}`)),r.pbrMode!==o.Normal&&r.pbrMode!==o.Schematic||(n.include(e),l.add(a`struct PBRShadingInfo\n{\nfloat NdotV;\nfloat LdotH;\nfloat NdotNG;\nfloat RdotNG;\nfloat NdotAmbDir;\nfloat NdotH_Horizon;\nvec3 skyRadianceToSurface;\nvec3 groundRadianceToSurface;\nvec3 skyIrradianceToSurface;\nvec3 groundIrradianceToSurface;\nfloat averageAmbientRadiance;\nfloat ssao;\nvec3 albedoLinear;\nvec3 f0;\nvec3 f90;\nvec3 diffuseColor;\nfloat metalness;\nfloat roughness;\n};`),l.add(a`vec3 evaluateEnvironmentIllumination(PBRShadingInfo inputs) {\nvec3 indirectDiffuse = evaluateDiffuseIlluminationHemisphere(inputs.groundIrradianceToSurface, inputs.skyIrradianceToSurface, inputs.NdotNG);\nvec3 indirectSpecular = evaluateSpecularIlluminationHemisphere(inputs.groundRadianceToSurface, inputs.skyRadianceToSurface, inputs.RdotNG, inputs.roughness);\nvec3 diffuseComponent = inputs.diffuseColor * indirectDiffuse * INV_PI;\nvec2 dfg = prefilteredDFGAnalytical(inputs.roughness, inputs.NdotV);\nvec3 specularColor = inputs.f0 * dfg.x + inputs.f90 * dfg.y;\nvec3 specularComponent = specularColor * indirectSpecular;\nreturn (diffuseComponent + specularComponent);\n}`),l.add(a`float gamutMapChanel(float x, vec2 p){\nreturn (x < p.x) ? mix(0.0, p.y, x/p.x) : mix(p.y, 1.0, (x - p.x) / (1.0 - p.x) );\n}`),l.add(a`vec3 blackLevelSoftCompression(vec3 inColor, PBRShadingInfo inputs){\nvec3 outColor;\nvec2 p = vec2(0.02 * (inputs.averageAmbientRadiance), 0.0075 * (inputs.averageAmbientRadiance));\noutColor.x = gamutMapChanel(inColor.x, p) ;\noutColor.y = gamutMapChanel(inColor.y, p) ;\noutColor.z = gamutMapChanel(inColor.z, p) ;\nreturn outColor;\n}`))}function r(e,o){const n=e.fragment.code;e.include(t),n.add(a`\n  struct PBRShadingWater\n  {\n      float NdotL;   // cos angle between normal and light direction\n      float NdotV;   // cos angle between normal and view direction\n      float NdotH;   // cos angle between normal and half vector\n      float VdotH;   // cos angle between view direction and half vector\n      float LdotH;   // cos angle between light direction and half vector\n      float VdotN;   // cos angle between view direction and normal vector\n  };\n\n  float dtrExponent = ${o.useCustomDTRExponentForWater?\"2.2\":\"2.0\"};\n  `),n.add(a`vec3 fresnelReflection(float angle, vec3 f0, float f90) {\nreturn f0 + (f90 - f0) * pow(1.0 - angle, 5.0);\n}`),n.add(a`float normalDistributionWater(float NdotH, float roughness)\n{\nfloat r2 = roughness * roughness;\nfloat NdotH2 = NdotH * NdotH;\nfloat denom = pow((NdotH2 * (r2 - 1.0) + 1.0), dtrExponent) * PI;\nreturn r2 / denom;\n}`),n.add(a`float geometricOcclusionKelemen(float LoH)\n{\nreturn 0.25 / (LoH * LoH);\n}`),n.add(a`vec3 brdfSpecularWater(in PBRShadingWater props, float roughness, vec3 F0, float F0Max)\n{\nvec3  F = fresnelReflection(props.VdotH, F0, F0Max);\nfloat dSun = normalDistributionWater(props.NdotH, roughness);\nfloat V = geometricOcclusionKelemen(props.LdotH);\nfloat diffusionSunHaze = mix(roughness + 0.045, roughness + 0.385, 1.0 - props.VdotH);\nfloat strengthSunHaze  = 1.2;\nfloat dSunHaze = normalDistributionWater(props.NdotH, diffusionSunHaze) * strengthSunHaze;\nreturn ((dSun + dSunHaze) * V) * F;\n}`)}export{n as PhysicallyBasedRendering,r as PhysicallyBasedRenderingWater};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst e=3e5,o=5e5;export{o as distanceFadeEnd,e as distanceFadeStart};\n"],
  "mappings": "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",
  "names": ["n", "u", "r", "t", "o", "s", "t", "o", "s", "n", "e", "m", "n", "e", "o", "t", "n", "o", "a", "t", "a", "n", "r", "t", "e", "o", "e", "o"]
}
