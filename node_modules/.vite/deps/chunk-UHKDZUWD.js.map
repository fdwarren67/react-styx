{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js", "../../@arcgis/core/chunks/Pattern.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nvar a;!function(a){a[a.Horizontal=0]=\"Horizontal\",a[a.Vertical=1]=\"Vertical\",a[a.Cross=2]=\"Cross\",a[a.ForwardDiagonal=3]=\"ForwardDiagonal\",a[a.BackwardDiagonal=4]=\"BackwardDiagonal\",a[a.DiagonalCross=5]=\"DiagonalCross\",a[a.COUNT=6]=\"COUNT\"}(a||(a={}));export{a as Style};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{VertexColor as a}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{terrainDepthTest as i}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{ColorConversion as n}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as c,addCameraPosition as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{glsl as g}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as p}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{Style as m}from\"../views/3d/webgl-engine/materials/PatternStyle.js\";import{outputColorHighlightOID as f}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as u}from\"../views/webgl/ShaderBuilder.js\";const w=.70710678118,b=w,h=.08715574274,y=10,S=1;function j(j){const C=new u,{vertex:T,fragment:P,attributes:R,varyings:V}=C,D=j.output===e.Highlight;c(T,j),C.include(r,j),C.include(a,j),C.include(l,j),C.include(t,j),C.fragment.include(o,j),C.include(f,j),C.include(i,j),j.draped?T.uniforms.add(new v(\"worldToScreenRatio\",(e=>1/e.screenToPCSRatio))):R.add(p.BOUNDINGRECT,\"mat3\"),R.add(p.POSITION,\"vec3\"),R.add(p.UVMAPSPACE,\"vec4\"),j.vvColor&&R.add(p.COLORFEATUREATTRIBUTE,\"float\"),j.hasVertexColors||V.add(\"vColor\",\"vec4\"),V.add(\"vpos\",\"vec3\"),V.add(\"vuv\",\"vec2\"),T.uniforms.add(new s(\"uColor\",(e=>e.color)));const O=j.style===m.ForwardDiagonal||j.style===m.BackwardDiagonal||j.style===m.DiagonalCross;return O&&T.code.add(g`\n      const mat2 rotate45 = mat2(${g.float(w)}, ${g.float(-.70710678118)},\n                                 ${g.float(b)}, ${g.float(w)});\n    `),j.draped||(d(T,j),T.uniforms.add(new v(\"worldToScreenPerDistanceRatio\",(e=>1/e.camera.perScreenPixelRatio))),T.code.add(g`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {\nfloat projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);\nreturn center + halfVector * clamp(projectedLength, -1.0, 1.0);\n}`),T.code.add(g`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {\nfloat d = dot(planeNormal, planePoint);\nfloat t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);\nreturn rayOrigin + t * rayDir;\n}`),T.code.add(g`\n      float boundingRectDistanceToCamera() {\n        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);\n        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);\n        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);\n        vec3 n = normalize(cross(halfU, halfV));\n\n        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);\n\n        float viewAngle = dot(viewDir, n);\n        float minViewAngle = ${g.float(h)};\n\n        if (abs(viewAngle) < minViewAngle) {\n          // view direction is (almost) parallel to plane -> clamp it to min angle\n          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;\n          viewDir = normalize(viewDir + normalComponent * n);\n        }\n\n        // intersect view direction with infinite plane that contains bounding rect\n        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);\n\n        // clip to bounds by projecting to u and v line segments individually\n        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);\n        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);\n\n        // use to calculate the closest point to camera on bounding rect\n        vec3 closestPoint = uProjected + vProjected - center;\n\n        return length(closestPoint - cameraPosition);\n      }\n    `)),T.code.add(g`\n    vec2 scaledUV() {\n      vec2 uv = uvMapSpace.xy ${O?\" * rotate45\":\"\"};\n      vec2 uvCellOrigin = uvMapSpace.zw ${O?\" * rotate45\":\"\"};\n\n      ${j.draped?\"\":g`\n            float distanceToCamera = boundingRectDistanceToCamera();\n            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;\n          `}\n\n      // Logarithmically discretize ratio to avoid jittering\n      float step = 0.1;\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n\n      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${g.float(y)});\n      return uvOffset + (uv * discreteWorldToScreenRatio);\n    }\n  `),T.main.add(g`\n    vuv = scaledUV();\n    vpos = position;\n    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n    forwardNormalizedVertexColor();\n    forwardObjectAndLayerIdColor();\n    ${j.hasVertexColors?\"vColor *= uColor;\":j.vvColor?\"vColor = uColor * interpolateVVColor(colorFeatureAttribute);\":\"vColor = uColor;\"}\n    gl_Position = transformPosition(proj, view, vpos);\n  `),P.include(n),j.draped&&P.uniforms.add(new v(\"texelSize\",(e=>1/e.camera.pixelRatio))),D||(P.code.add(g`\n      const float lineWidth = ${g.float(S)};\n      const float spacing = ${g.float(y)};\n      const float spacingINV = ${g.float(1/y)};\n\n      float coverage(float p, float txlSize) {\n        p = mod(p, spacing);\n\n        float halfTxlSize = txlSize / 2.0;\n\n        float start = p - halfTxlSize;\n        float end = p + halfTxlSize;\n\n        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;\n        coverage -= min(lineWidth, mod(start, spacing));\n        coverage -= max(lineWidth - mod(end, spacing), 0.0);\n\n        return coverage / txlSize;\n      }\n    `),j.draped||P.code.add(g`const int maxSamples = 5;\nfloat sampleAA(float p) {\nvec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));\nfloat fwidth = dxdy.x + dxdy.y;\nivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));\nvec2 invSamples = 1.0 / vec2(samples);\nfloat accumulator = 0.0;\nfor (int j = 0; j < maxSamples; j++) {\nif(j >= samples.y) {\nbreak;\n}\nfor (int i = 0; i < maxSamples; i++) {\nif(i >= samples.x) {\nbreak;\n}\nvec2 step = vec2(i,j) * invSamples - 0.5;\naccumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);\n}\n}\naccumulator /= float(samples.x * samples.y);\nreturn accumulator;\n}`)),P.main.add(g`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n    vec4 color = vColor;\n    ${D?\"\":g`color.a *= ${x(j)};`}\n    outputColorHighlightOID(color, vpos);\n  `),C}function x(e){function o(o){return e.draped?g`coverage(vuv.${o}, texelSize)`:g`sampleAA(vuv.${o})`}switch(e.style){case m.ForwardDiagonal:case m.Horizontal:return o(\"y\");case m.BackwardDiagonal:case m.Vertical:return o(\"x\");case m.DiagonalCross:case m.Cross:return g`1.0 - (1.0 - ${o(\"x\")}) * (1.0 - ${o(\"y\")})`;default:return\"0.0\"}}const C=Object.freeze(Object.defineProperty({__proto__:null,build:j},Symbol.toStringTag,{value:\"Module\"}));export{C as P,j as b};\n"],
  "mappings": "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",
  "names": ["a", "j", "C", "n", "e", "p", "d", "o"]
}
