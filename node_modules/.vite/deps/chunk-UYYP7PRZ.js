import {
  D,
  I
} from "./chunk-BMTY6R7M.js";
import {
  a,
  c,
  h,
  i as i2,
  o,
  p as p3
} from "./chunk-IXXT2HKO.js";
import {
  n
} from "./chunk-HOGZXY5V.js";
import {
  q
} from "./chunk-ZHGVMVCT.js";
import {
  m,
  p as p2
} from "./chunk-VBBJGZOS.js";
import {
  debounce_default
} from "./chunk-F5MHH7JA.js";
import {
  keyed
} from "./chunk-KZXUV47B.js";
import {
  m as m2
} from "./chunk-2GIEDWQ6.js";
import {
  ref
} from "./chunk-LTKIMXCE.js";
import {
  s
} from "./chunk-RZAGQ6CT.js";
import {
  b
} from "./chunk-6JIDXA46.js";
import {
  ot,
  p
} from "./chunk-VQ5234AM.js";
import {
  i
} from "./chunk-S3EVYUV4.js";
import {
  M,
  S
} from "./chunk-B7E2AREE.js";
import {
  LitElement,
  createEvent,
  css,
  html,
  safeClassMap
} from "./chunk-MALSDV7D.js";

// node_modules/@esri/calcite-components/dist/components/calcite-list/customElement.js
var f = {
  container: "container",
  table: "table",
  scrim: "scrim",
  stack: "stack",
  tableContainer: "table-container",
  sticky: "sticky-pos",
  assistiveText: "assistive-text"
};
var E = {
  filterNoResults: "filter-no-results",
  filterActionsStart: "filter-actions-start",
  filterActionsEnd: "filter-actions-end"
};
var q2 = css`:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:block}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}.container{position:relative;background-color:var(--calcite-list-background-color, var(--calcite-color-foreground-1))}.table-container{box-sizing:border-box;display:flex;inline-size:100%;flex-direction:column;background-color:transparent}.table-container *{box-sizing:border-box}.table{inline-size:100%}.stack{--calcite-stack-padding-inline: 0;--calcite-stack-padding-block: 0}.sticky-pos{position:sticky;inset-block-start:0px;z-index:var(--calcite-z-index-sticky);background-color:var(--calcite-list-background-color, var(--calcite-color-foreground-1))}.assistive-text{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}:host([hidden]){display:none}[hidden]{display:none}`;
var B = `${a}, ${i2}`;
var _W = class _W extends LitElement {
  // #endregion
  // #region Lifecycle
  constructor() {
    super(), this.dragSelector = i2, this.focusableItems = [], this.handleSelector = "calcite-sort-handle", this.listItems = [], this.listItemGroups = [], this.mutationObserver = b("mutation", () => {
      this.willPerformFilter = true, this.updateListItems();
    }), this.updateListItems = debounce_default(() => {
      this.updateGroupItems();
      const { selectionAppearance: t, selectionMode: e, interactionMode: i3, dragEnabled: l, el: s2, filterEl: n2, moveToItems: a2, displayMode: r, scale: c2 } = this, m3 = Array.from(this.el.querySelectorAll(i2));
      if (m3.forEach((o2) => {
        o2.scale = c2, o2.selectionAppearance = t, o2.selectionMode = e, o2.interactionMode = i3, o2.closest(c) === s2 && (o2.moveToItems = a2.filter((S2) => S2.element !== s2 && !o2.contains(S2.element)), o2.dragHandle = l, o2.displayMode = r);
      }), this.parentListEl) {
        this.setUpSorting();
        return;
      }
      this.listItems = m3, this.filterEnabled && this.willPerformFilter && (this.willPerformFilter = false, this.dataForFilter = this.getItemData(), n2 && (n2.items = this.dataForFilter, this.filterAndUpdateData())), this.visibleItems = this.listItems.filter((o2) => !o2.closed && !o2.hidden), this.updateFilteredItems(), this.borderItems(), this.focusableItems = this.filteredItems.filter((o2) => !o2.disabled), this.setActiveListItem(), this.updateSelectedItems(), this.setUpSorting();
    }, M.nextTick), this.visibleItems = [], this.willFilterEmit = false, this.willPerformFilter = false, this.dataForFilter = [], this.hasFilterActionsEnd = false, this.hasFilterActionsStart = false, this.hasFilterNoResults = false, this.moveToItems = [], this.disabled = false, this.dragEnabled = false, this.filterEnabled = false, this.filteredData = [], this.filteredItems = [], this.interactionMode = "interactive", this.loading = false, this.messages = s({ blocking: true }), this.displayMode = "flat", this.scale = "m", this.selectedItems = [], this.selectionAppearance = "icon", this.selectionMode = "none", this.calciteInternalListDefaultSlotChange = createEvent({ cancelable: false }), this.calciteListChange = createEvent({ cancelable: false }), this.calciteListDragEnd = createEvent({ cancelable: false }), this.calciteListDragStart = createEvent({ cancelable: false }), this.calciteListFilter = createEvent({ cancelable: false }), this.calciteListOrderChange = createEvent({ cancelable: false }), this.listen("calciteInternalListItemToggle", this.handleCalciteListItemToggle), this.listen("calciteInternalFocusPreviousItem", this.handleCalciteInternalFocusPreviousItem), this.listen("calciteInternalListItemActive", this.handleCalciteInternalListItemActive), this.listen("calciteListItemSelect", this.handleCalciteListItemSelect), this.listen("calciteInternalAssistiveTextChange", this.handleCalciteInternalAssistiveTextChange), this.listen("calciteSortHandleReorder", this.handleSortReorder), this.listen("calciteSortHandleMove", this.handleSortMove), this.listen("calciteInternalListItemSelect", this.handleCalciteInternalListItemSelect), this.listen("calciteInternalListItemSelectMultiple", this.handleCalciteInternalListItemSelectMultiple), this.listen("calciteInternalListItemChange", this.handleCalciteInternalListItemChange), this.listen("calciteInternalListItemGroupDefaultSlotChange", this.handleCalciteInternalListItemGroupDefaultSlotChange);
  }
  get hasActiveFilter() {
    return this.filterEnabled && this.filterText && this.filteredItems.length !== this.visibleItems.length;
  }
  get showNoResultsContainer() {
    return this.filterEnabled && this.filterText && this.hasFilterNoResults && this.visibleItems.length && !this.filteredItems.length;
  }
  // #endregion
  // #region Public Methods
  /**
   * Sets focus on the component's first focusable element.
   *
   * @returns {Promise<void>}
   */
  async setFocus() {
    var _a, _b;
    return await m2(this), this.filterEnabled ? (_a = this.filterEl) == null ? void 0 : _a.setFocus() : (_b = this.focusableItems.find((t) => t.active)) == null ? void 0 : _b.setFocus();
  }
  connectedCallback() {
    super.connectedCallback(), this.connectObserver(), this.willPerformFilter = true, this.updateListItems(), this.setUpSorting(), this.setParentList(), this.setListItemGroups();
  }
  async load() {
    this.handleInteractionModeWarning();
  }
  /**
   * TODO: [MIGRATION] Consider inlining some of the watch functions called inside of this method to reduce boilerplate code
   *
   * @param changes
   */
  willUpdate(t) {
    (t.has("filterText") || t.has("filterProps") || t.has("filterPredicate")) && this.performFilter(), (t.has("filterEnabled") && (this.hasUpdated || this.filterEnabled !== false) || t.has("group") || t.has("dragEnabled") && (this.hasUpdated || this.dragEnabled !== false) || t.has("selectionMode") && (this.hasUpdated || this.selectionMode !== "none") || t.has("selectionAppearance") && (this.hasUpdated || this.selectionAppearance !== "icon") || t.has("displayMode") && this.hasUpdated || t.has("scale") && this.hasUpdated || t.has("filterPredicate") && this.hasUpdated) && this.handleListItemChange();
  }
  updated() {
    m(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.disconnectObserver(), D(this);
  }
  // #endregion
  // #region Private Methods
  handleListItemChange() {
    this.willPerformFilter = true, this.updateListItems();
  }
  handleCalciteListItemToggle(t) {
    this.parentListEl || (t.stopPropagation(), this.borderItems());
  }
  handleCalciteInternalFocusPreviousItem(t) {
    if (this.parentListEl)
      return;
    t.stopPropagation();
    const { focusableItems: e } = this, l = e.findIndex((s2) => s2.active) - 1;
    e[l] && this.focusRow(e[l]);
  }
  handleCalciteInternalListItemActive(t) {
    if (this.parentListEl)
      return;
    t.stopPropagation();
    const e = t.target, { listItems: i3 } = this;
    i3.forEach((l) => {
      l.active = l === e;
    });
  }
  handleCalciteListItemSelect() {
    this.parentListEl || this.updateSelectedItems(true);
  }
  handleCalciteInternalAssistiveTextChange(t) {
    this.assistiveText = t.detail.message, t.stopPropagation();
  }
  handleSortReorder(t) {
    this.parentListEl || this.handleReorder(t);
  }
  handleSortMove(t) {
    this.parentListEl || this.handleMove(t);
  }
  handleCalciteInternalListItemSelect(t) {
    if (this.parentListEl)
      return;
    t.stopPropagation();
    const e = t.target, { listItems: i3, selectionMode: l } = this;
    e.selected && (l === "single" || l === "single-persist") && i3.forEach((s2) => s2.selected = s2 === e), this.updateSelectedItems();
  }
  handleCalciteInternalListItemSelectMultiple(t) {
    if (this.parentListEl)
      return;
    t.stopPropagation();
    const { target: e, detail: i3 } = t, { focusableItems: l, lastSelectedInfo: s2 } = this, n2 = e;
    if (i3.selectMultiple && s2) {
      const a2 = l.indexOf(n2), r = l.indexOf(s2.selectedItem), c2 = Math.min(r, a2), m3 = Math.max(r, a2);
      l.slice(c2, m3 + 1).forEach((o2) => o2.selected = s2.selected);
    } else
      this.lastSelectedInfo = { selectedItem: n2, selected: n2.selected };
  }
  handleCalciteInternalListItemChange(t) {
    this.parentListEl || (t.stopPropagation(), this.updateListItems());
  }
  handleCalciteInternalListItemGroupDefaultSlotChange(t) {
    t.stopPropagation();
  }
  connectObserver() {
    var _a;
    (_a = this.mutationObserver) == null ? void 0 : _a.observe(this.el, { childList: true, subtree: true });
  }
  disconnectObserver() {
    var _a;
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  setUpSorting() {
    const { dragEnabled: t } = this;
    t && I(this);
  }
  onGlobalDragStart() {
    this.disconnectObserver();
  }
  onGlobalDragEnd() {
    this.connectObserver();
  }
  onDragEnd(t) {
    this.calciteListDragEnd.emit(t);
  }
  onDragMove({ relatedEl: t }) {
    t.expanded = true;
  }
  onDragStart(t) {
    t.dragEl.sortHandleOpen = false, this.calciteListDragStart.emit(t);
  }
  onDragSort(t) {
    this.setParentList(), this.updateListItems(), this.calciteListOrderChange.emit(t);
  }
  setParentList() {
    var _a;
    this.parentListEl = (_a = this.el.parentElement) == null ? void 0 : _a.closest(c);
  }
  handleDefaultSlotChange(t) {
    h(t.target), this.parentListEl && this.calciteInternalListDefaultSlotChange.emit();
  }
  setListItemGroups() {
    this.listItemGroups = Array.from(this.el.querySelectorAll(a));
  }
  handleFilterActionsStartSlotChange(t) {
    this.hasFilterActionsStart = ot(t);
  }
  handleFilterActionsEndSlotChange(t) {
    this.hasFilterActionsEnd = ot(t);
  }
  handleFilterNoResultsSlotChange(t) {
    this.hasFilterNoResults = ot(t);
  }
  setActiveListItem() {
    const { focusableItems: t } = this;
    t.some((e) => e.active) || t[0] && (t[0].active = true);
  }
  async updateSelectedItems(t = false) {
    await this.updateComplete, this.selectedItems = this.visibleItems.filter((e) => e.selected), t && this.calciteListChange.emit();
  }
  filterElements({ el: t, filteredItems: e, visibleParents: i3 }) {
    const l = !i3.has(t) && !e.includes(t);
    t.filterHidden = l;
    const s2 = t.parentElement.closest(B);
    s2 && (l || i3.add(s2), this.filterElements({
      el: s2,
      filteredItems: e,
      visibleParents: i3
    }));
  }
  allParentListItemsExpanded(t) {
    var _a;
    const e = (_a = t.parentElement) == null ? void 0 : _a.closest(i2);
    if (e) {
      if (!e.expanded)
        return false;
    } else return true;
    return this.allParentListItemsExpanded(e);
  }
  borderItems() {
    const t = this.visibleItems.filter((e) => !e.filterHidden && this.allParentListItemsExpanded(e));
    t.forEach((e) => e.bordered = e !== t[t.length - 1]);
  }
  updateFilteredItems() {
    const { visibleItems: t, filteredData: e, filterText: i3, filterPredicate: l } = this, s2 = t == null ? void 0 : t.filter((r) => t.every((c2) => c2 === r || !r.contains(c2))), n2 = l ? t.filter(l) : i3 ? e.map((r) => r.el) : t || [], a2 = /* @__PURE__ */ new WeakSet();
    s2.forEach((r) => this.filterElements({ el: r, filteredItems: n2, visibleParents: a2 })), this.filteredItems = n2, this.willFilterEmit && (this.willFilterEmit = false, this.calciteListFilter.emit());
  }
  updateFilteredData() {
    const { filterEl: t } = this;
    t && (t.filteredItems && (this.filteredData = t.filteredItems), this.updateListItems());
  }
  async filterAndUpdateData() {
    var _a;
    await ((_a = this.filterEl) == null ? void 0 : _a.filter(this.filterText)), this.updateFilteredData();
  }
  get effectiveFilterProps() {
    return this.filterProps ? this.filterProps.filter((t) => t !== "el") : ["description", "label", "metadata", "heading"];
  }
  performFilter() {
    const { filterEl: t, filterText: e, effectiveFilterProps: i3 } = this;
    t && (t.value = e, t.filterProps = i3, this.filterAndUpdateData());
  }
  setFilterEl(t) {
    this.filterEl = t, this.performFilter();
  }
  handleFilterChange(t) {
    t.stopPropagation();
    const { value: e } = t.currentTarget;
    this.filterText = e, this.willFilterEmit = true, this.updateFilteredData();
  }
  getItemData() {
    return this.listItems.map((t) => ({
      label: t.label,
      description: t.description,
      metadata: t.metadata,
      heading: this.getGroupHeading(t),
      el: t
    }));
  }
  getGroupHeading(t) {
    return this.listItemGroups.filter((i3) => i3.contains(t)).map((i3) => i3.heading);
  }
  updateGroupItems() {
    const { el: t, group: e, scale: i3 } = this, l = p(t), s2 = e ? Array.from(l.querySelectorAll(`${c}[group="${e}"]`)).filter((a2) => !a2.disabled && a2.dragEnabled) : [];
    this.moveToItems = s2.map((a2) => ({
      element: a2,
      label: a2.label ?? a2.id,
      id: i()
    })), Array.from(this.el.querySelectorAll(a)).forEach((a2) => {
      a2.scale = i3;
    });
  }
  focusRow(t) {
    const { focusableItems: e } = this;
    t && (e.forEach((i3) => i3.active = i3 === t), t.setFocus());
  }
  isNavigable(t) {
    var _a;
    const e = (_a = t.parentElement) == null ? void 0 : _a.closest(i2);
    return e ? e.expanded && this.isNavigable(e) : true;
  }
  handleListKeydown(t) {
    var _a;
    if (t.defaultPrevented || this.parentListEl)
      return;
    const { key: e } = t, i3 = this.focusableItems.filter((s2) => this.isNavigable(s2)), l = i3.findIndex((s2) => s2.active);
    if (e === "ArrowDown") {
      t.preventDefault();
      const s2 = t.target === this.filterEl ? 0 : l + 1;
      i3[s2] && this.focusRow(i3[s2]);
    } else if (e === "ArrowUp") {
      if (t.preventDefault(), l === 0 && this.filterEnabled) {
        (_a = this.filterEl) == null ? void 0 : _a.setFocus();
        return;
      }
      const s2 = l - 1;
      i3[s2] && this.focusRow(i3[s2]);
    } else if (e === "Home") {
      t.preventDefault();
      const s2 = i3[0];
      s2 && this.focusRow(s2);
    } else if (e === "End") {
      t.preventDefault();
      const s2 = i3[i3.length - 1];
      s2 && this.focusRow(s2);
    }
  }
  handleInteractionModeWarning() {
    this.interactionMode === "static" && this.selectionMode !== "none" && this.selectionAppearance === "border" && console.warn('selection-appearance="border" requires interaction-mode="interactive"');
  }
  handleMove(t) {
    const { moveTo: e } = t.detail, i3 = t.target, l = i3 == null ? void 0 : i3.parentElement, s2 = e.element, a2 = Array.from(l.children).filter(p3).indexOf(i3);
    if (!l)
      return;
    i3.sortHandleOpen = false, this.disconnectObserver(), s2.prepend(i3), o(i3);
    const c2 = Array.from(s2.children).filter(p3).indexOf(i3);
    this.updateListItems(), this.connectObserver(), this.calciteListOrderChange.emit({
      dragEl: i3,
      fromEl: l,
      toEl: s2,
      newIndex: c2,
      oldIndex: a2
    });
  }
  handleReorder(t) {
    const { reorder: e } = t.detail, i3 = t.target, l = i3 == null ? void 0 : i3.parentElement;
    if (!l)
      return;
    i3.sortHandleOpen = false;
    const s2 = Array.from(l.children).filter(p3), n2 = s2.length - 1, a2 = s2.indexOf(i3);
    let r = a2;
    switch (e) {
      case "top":
        r = 0;
        break;
      case "bottom":
        r = n2;
        break;
      case "up":
        r = a2 === 0 ? 0 : a2 - 1;
        break;
      case "down":
        r = a2 === n2 ? n2 : a2 + 1;
        break;
    }
    this.disconnectObserver();
    const c2 = e === "up" || e === "top" ? s2[r] : s2[r].nextSibling;
    l.insertBefore(i3, c2), this.updateListItems(), this.connectObserver(), this.calciteListOrderChange.emit({
      dragEl: i3,
      fromEl: l,
      toEl: l,
      newIndex: r,
      oldIndex: a2
    });
  }
  // #endregion
  // #region Rendering
  render() {
    const { loading: t, label: e, disabled: i3, dataForFilter: l, filterEnabled: s2, filterPlaceholder: n2, filterText: a2, filterLabel: r, hasFilterActionsStart: c2, hasFilterActionsEnd: m3, effectiveFilterProps: o2 } = this;
    return p2({ disabled: this.disabled, children: html`<div class=${safeClassMap(f.container)}>${this.dragEnabled ? html`<span aria-live=assertive class=${safeClassMap(f.assistiveText)}>${this.assistiveText}</span>` : null}${this.renderItemAriaLive()}${t ? html`<calcite-scrim class=${safeClassMap(f.scrim)} .loading=${t}></calcite-scrim>` : null}<div .ariaBusy=${t} .ariaLabel=${e || ""} class=${safeClassMap(f.table)} @keydown=${this.handleListKeydown} role=treegrid>${s2 || c2 || m3 ? html`<div class=${safeClassMap(f.sticky)} role=rowgroup><div role=row><div role=columnheader><calcite-stack class=${safeClassMap(f.stack)}><slot name=${E.filterActionsStart} @slotchange=${this.handleFilterActionsStartSlotChange} slot=${n.actionsStart}></slot><calcite-filter .ariaLabel=${n2} .disabled=${i3} .filterProps=${o2} .items=${l} .label=${r} @calciteFilterChange=${this.handleFilterChange} .placeholder=${n2} .scale=${this.scale} .value=${a2} ${ref(this.setFilterEl)}></calcite-filter><slot name=${E.filterActionsEnd} @slotchange=${this.handleFilterActionsEndSlotChange} slot=${n.actionsEnd}></slot></calcite-stack></div></div></div>` : null}<div class=${safeClassMap(f.tableContainer)} role=rowgroup><slot @slotchange=${this.handleDefaultSlotChange}></slot></div></div><div aria-live=polite data-test-id=no-results-container .hidden=${!this.showNoResultsContainer}><slot name=${E.filterNoResults} @slotchange=${this.handleFilterNoResultsSlotChange}></slot></div></div>` });
  }
  renderItemAriaLive() {
    const { messages: t, filteredItems: e, parentListEl: i3, messages: { _lang: l }, numberingSystem: s2 } = this;
    return q.numberFormatOptions = {
      locale: l,
      numberingSystem: s2
    }, i3 ? null : html`<div aria-live=polite class=${safeClassMap(f.assistiveText)}>${this.hasActiveFilter ? keyed("aria-filter-enabled", html`<div>${t.filterEnabled}</div>`) : null}${keyed("aria-item-count", html`<div>${t.total.replace("{count}", q.localize(e.length.toString()))}</div>`)}${e.length ? keyed("aria-item-list", html`<ol>${e.map((n2) => html`<li>${n2.label}</li>`)}</ol>`) : null}</div>`;
  }
};
_W.properties = { assistiveText: 16, dataForFilter: 16, hasFilterActionsEnd: 16, hasFilterActionsStart: 16, hasFilterNoResults: 16, moveToItems: 16, hasActiveFilter: 16, showNoResultsContainer: 16, canPull: 0, canPut: 0, disabled: 7, dragEnabled: 7, filterEnabled: 7, filterPredicate: 0, filterLabel: 3, filterPlaceholder: 3, filterProps: 0, filterText: 3, filteredData: 0, filteredItems: 0, group: 3, interactionMode: 3, label: 1, loading: 7, messageOverrides: 0, displayMode: 3, numberingSystem: 1, scale: 3, selectedItems: 0, selectionAppearance: 3, selectionMode: 3 };
_W.styles = q2;
var W = _W;
S("calcite-list", W);

export {
  W
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-list/customElement.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.1.0 *)
*/
//# sourceMappingURL=chunk-UYYP7PRZ.js.map
