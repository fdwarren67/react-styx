import {
  s
} from "./chunk-7KANSCZF.js";
import {
  H,
  Q,
  W,
  f,
  q
} from "./chunk-ZHGVMVCT.js";

// node_modules/@esri/calcite-components/dist/chunks/time.js
var U = 5;
function p({
  locale: t,
  numberingSystem: e,
  includeSeconds: n = true,
  fractionalSecondDigits: r,
  hour12: i
}) {
  const o = {
    hour: "2-digit",
    minute: "2-digit",
    timeZone: "UTC",
    numberingSystem: H(e)
  };
  return typeof i == "boolean" && (o.hour12 = i), n && (o.second = "2-digit", r && (o.fractionalSecondDigits = r)), Q(t, o);
}
function S(t, e) {
  if (t == null)
    return;
  const n = t.toString(), r = s(t);
  if (t < 1 && r > 0 && r < 4) {
    const i = n.replace("0.", "");
    return !e || i.length === e ? i : i.length < e ? i.padEnd(e, "0") : i;
  }
  if (t >= 0 && t < 10)
    return n.padStart(2, "0");
  if (t >= 10)
    return n;
}
function V(t) {
  if (!g(t))
    return null;
  const { hour: e, minute: n, second: r, fractionalSecond: i } = x(t);
  let o = `${S(parseInt(e))}:${S(parseInt(n))}`;
  return r && (o += `:${S(parseInt(r))}`, i && (o += `.${i}`)), o;
}
function O(t) {
  return parseInt((parseFloat(`0.${t}`) / 1e-3).toFixed(3));
}
function b(t) {
  const e = { locale: t };
  t === "mk" ? e.hour12 = false : t.toLowerCase() === "es-mx" && (e.hour12 = true);
  const r = p(e).formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));
  return l("meridiem", r) ? "12" : "24";
}
function H2(t) {
  return b(t) === "24" ? "12" : "24";
}
function P(t, e, n = "latn") {
  const r = p({ hour12: true, locale: t, numberingSystem: n }), i = 6, o = 18, u = new Date(
    Date.UTC(0, 0, 0, e === "AM" ? i : o, 0)
  ), c = r.formatToParts(u);
  return l("meridiem", c);
}
function D(t, e) {
  return q.numberFormatOptions = {
    locale: t,
    numberingSystem: e
  }, q.localize("1.1").split("")[1];
}
function k(t, e, n = "latn") {
  const i = p({ locale: e, numberingSystem: n }).formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));
  return l(`${t}Suffix`, i);
}
function l(t, e) {
  var _a, _b, _c, _d;
  if (!t || !e)
    return null;
  if (t === "hourSuffix") {
    const n = e.indexOf(e.find(({ type: o }) => o === "hour")), r = e.indexOf(e.find(({ type: o }) => o === "minute")), i = e[n + 1];
    return i && i.type === "literal" && r - n === 2 && ((_a = i.value) == null ? void 0 : _a.trim()) || null;
  }
  if (t === "minuteSuffix") {
    const n = e.indexOf(e.find(({ type: o }) => o === "minute")), r = e.indexOf(e.find(({ type: o }) => o === "second")), i = e[n + 1];
    return i && i.type === "literal" && r - n === 2 && ((_b = i.value) == null ? void 0 : _b.trim()) || null;
  }
  if (t === "secondSuffix") {
    const n = e.indexOf(e.find(({ type: i }) => i === "second")), r = e[n + 1];
    return r && r.type === "literal" && ((_c = r.value) == null ? void 0 : _c.trim()) || null;
  }
  return ((_d = e.find(({ type: n }) => t == "meridiem" ? n === "dayPeriod" : n === t)) == null ? void 0 : _d.value) || null;
}
function W2(t) {
  if (!f(t))
    return null;
  const e = parseInt(t);
  return e >= 0 && e <= 11 ? "AM" : "PM";
}
function E(t) {
  var _a;
  const e = P(t, "AM"), n = P(t, "PM"), r = L(t), i = z({
    hour12: true,
    value: "00:00:00",
    locale: t,
    numberingSystem: "latn"
  }), o = i[r === 0 ? 1 : r - 1].type === "hour" || ((_a = i[r - 1]) == null ? void 0 : _a.type) === "second" ? "" : " ";
  return (
    // Unknown dayjs parsing bug with norwegian.  Dayjs only accepts uppercase meridiems for some reason, despite the LT/LTS config
    t !== "no" && e === e.toLocaleLowerCase(t) && n === n.toLocaleLowerCase(t) ? r === 0 ? `a${o}` : `${o}a` : r === 0 ? `A${o}` : `${o}A`
  );
}
function L(t) {
  return z({
    hour12: true,
    value: "00:00:00",
    locale: t,
    numberingSystem: "latn"
  }).findIndex((n) => n.type === "dayPeriod");
}
function Z(t, e) {
  return t === H2(e);
}
function g(t) {
  if (!t || t.startsWith(":") || t.endsWith(":"))
    return false;
  const e = t.split(":");
  if (!(e.length > 1 && e.length < 4))
    return false;
  const [r, i, o] = e, u = parseInt(e[0]), c = parseInt(e[1]), f2 = parseInt(e[2]), d = f(r) && u >= 0 && u < 24, a = f(i) && c >= 0 && c < 60, m = f(o) && f2 >= 0 && f2 < 60;
  if (d && a && !o || d && a && m)
    return true;
}
function w(t, e) {
  if (e === "meridiem")
    return t === "AM" || t === "PM";
  if (!f(t))
    return false;
  const n = Number(t);
  return e === "hour" ? n >= 0 && n < 24 : n >= 0 && n < 60;
}
function y({
  value: t,
  part: e,
  locale: n,
  numberingSystem: r = "latn",
  hour12: i
}) {
  if (e === "fractionalSecond") {
    const d = D(n, r);
    let a = null;
    if (t) {
      q.numberFormatOptions = {
        locale: n,
        numberingSystem: r
      };
      const m = q.localize("0");
      parseInt(t) === 0 ? a = "".padStart(t.length, m) : (a = q.localize(`0.${t}`).replace(`${m}${d}`, ""), a.length < t.length && (a = a.padEnd(t.length, m)));
    }
    return a;
  }
  if (!w(t, e))
    return;
  const o = parseInt(t), u = new Date(
    Date.UTC(
      0,
      0,
      0,
      e === "hour" ? o : e === "meridiem" ? t === "AM" ? 0 : 12 : 0,
      e === "minute" ? o : 0,
      e === "second" ? o : 0
    )
  );
  if (!u)
    return;
  const f2 = p({ hour12: i, locale: n, numberingSystem: r }).formatToParts(u);
  return l(e, f2);
}
function j({
  value: t,
  locale: e,
  numberingSystem: n = "latn",
  includeSeconds: r = true,
  fractionalSecondDigits: i,
  hour12: o
}) {
  if (!g(t))
    return null;
  const { hour: u, minute: c, second: f2 = "0", fractionalSecond: d } = x(t), a = new Date(
    Date.UTC(
      0,
      0,
      0,
      parseInt(u),
      parseInt(c),
      parseInt(f2),
      d && O(d)
    )
  );
  let s2 = p({
    locale: e,
    numberingSystem: n,
    includeSeconds: r,
    fractionalSecondDigits: i,
    hour12: o
  }).format(a) || null;
  if (s2 && e === "bg" && s2.includes(" ч.") && (s2 = s2.replaceAll(" ч.", "")), e === "bs" || e === "mk") {
    const I = W.get(e);
    s2.includes("AM") ? s2 = s2.replaceAll("AM", I.am) : s2.includes("PM") && (s2 = s2.replaceAll("PM", I.pm)), s2.indexOf(".") !== s2.length - 1 && (s2 = s2.replace(".", ","));
  }
  return s2;
}
function B({
  value: t,
  locale: e,
  numberingSystem: n = "latn",
  hour12: r
}) {
  if (!g(t))
    return null;
  const { hour: i, minute: o, second: u = "0", fractionalSecond: c } = x(t), f2 = new Date(Date.UTC(0, 0, 0, parseInt(i), parseInt(o), parseInt(u)));
  if (f2) {
    const a = p({ locale: e, numberingSystem: n, hour12: r }).formatToParts(f2);
    let m = l("meridiem", a);
    if (r && (e === "bs" || e === "mk")) {
      const s2 = W.get(e);
      m = f2.getHours() > 11 ? s2.am : s2.pm;
    }
    return {
      localizedHour: l("hour", a),
      localizedHourSuffix: l("hourSuffix", a),
      localizedMinute: l("minute", a),
      localizedMinuteSuffix: l("minuteSuffix", a),
      localizedSecond: l("second", a),
      localizedDecimalSeparator: D(e, n),
      localizedFractionalSecond: y({
        value: c,
        part: "fractionalSecond",
        locale: e,
        numberingSystem: n
      }),
      localizedSecondSuffix: l("secondSuffix", a),
      localizedMeridiem: m
    };
  }
  return null;
}
function z({
  hour12: t,
  value: e,
  locale: n,
  numberingSystem: r
}) {
  if (!g(e))
    return null;
  const { hour: i, minute: o, second: u = "0" } = x(e), c = new Date(Date.UTC(0, 0, 0, parseInt(i), parseInt(o), parseInt(u)));
  return c ? p({ hour12: t, locale: n, numberingSystem: r }).formatToParts(c) : null;
}
function x(t) {
  if (g(t)) {
    const [e, n, r] = t.split(":");
    let i = r, o = null;
    return (r == null ? void 0 : r.includes(".")) && ([i, o] = r.split(".")), {
      fractionalSecond: o,
      hour: e,
      minute: n,
      second: i
    };
  }
  return {
    fractionalSecond: null,
    hour: null,
    minute: null,
    second: null
  };
}
function q2(t, e = true) {
  if (!g(t))
    return "";
  const { hour: n, minute: r, second: i, fractionalSecond: o } = x(t);
  let u = `${S(parseInt(n))}:${S(parseInt(r))}`;
  return e && (u += `:${S(parseInt(e && i || "0"))}`, o && (u += `.${o}`)), u;
}

export {
  U,
  S,
  V,
  b,
  H2 as H,
  D,
  k,
  W2 as W,
  E,
  L,
  Z,
  g,
  y,
  j,
  B,
  x,
  q2 as q
};
/*! Bundled license information:

@esri/calcite-components/dist/chunks/time.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.1.0 *)
*/
//# sourceMappingURL=chunk-Y5WMMCVN.js.map
