import {
  a,
  c,
  e
} from "./chunk-V3ODZOFX.js";
import {
  keyed
} from "./chunk-KZXUV47B.js";
import {
  ref
} from "./chunk-LTKIMXCE.js";
import {
  s
} from "./chunk-RZAGQ6CT.js";
import {
  b
} from "./chunk-6JIDXA46.js";
import {
  St,
  gt,
  xt
} from "./chunk-VQ5234AM.js";
import "./chunk-S3EVYUV4.js";
import {
  D,
  S
} from "./chunk-B7E2AREE.js";
import {
  LitElement,
  createEvent,
  css,
  html,
  safeClassMap
} from "./chunk-MALSDV7D.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@esri/calcite-components/dist/components/calcite-tab-nav/customElement.js
var g = {
  chevronRight: "chevron-right",
  chevronLeft: "chevron-left"
};
var o = {
  container: "tab-nav",
  containerHasEndTabTitleOverflow: "tab-nav--end-overflow",
  containerHasStartTabTitleOverflow: "tab-nav--start-overflow",
  scrollButton: "scroll-button",
  scrollButtonContainer: "scroll-button-container",
  scrollBackwardContainerButton: "scroll-button-container--backward",
  scrollForwardContainerButton: "scroll-button-container--forward",
  tabTitleSlotWrapper: "tab-titles-slot-wrapper"
};
var F = css`:host{--calcite-internal-tab-nav-gradient-start-side: left;--calcite-internal-tab-nav-gradient-end-side: right;position:relative;display:flex}.scale-s{--calcite-internal-tab-nav-scroller-button-width: 24px;min-block-size:1.5rem}.scale-m{--calcite-internal-tab-nav-scroller-button-width: 32px;min-block-size:2rem}.scale-l{--calcite-internal-tab-nav-scroller-button-width: 44px;min-block-size:2.75rem}.calcite--rtl{--calcite-internal-tab-nav-gradient-start-side: right;--calcite-internal-tab-nav-gradient-end-side: left}.tab-nav--start-overflow .tab-titles-slot-wrapper{mask-image:linear-gradient(to var(--calcite-internal-tab-nav-gradient-end-side),transparent,transparent var(--calcite-internal-tab-nav-scroller-button-width),white var(--calcite-internal-tab-nav-scroller-button-width),white 51%)}.tab-nav--end-overflow .tab-titles-slot-wrapper{mask-image:linear-gradient(to var(--calcite-internal-tab-nav-gradient-start-side),transparent,transparent var(--calcite-internal-tab-nav-scroller-button-width),white var(--calcite-internal-tab-nav-scroller-button-width),white 51%)}.tab-nav--start-overflow.tab-nav--end-overflow .tab-titles-slot-wrapper{mask-image:linear-gradient(to var(--calcite-internal-tab-nav-gradient-end-side),transparent,transparent var(--calcite-internal-tab-nav-scroller-button-width),white var(--calcite-internal-tab-nav-scroller-button-width),white 51%,transparent 51%),linear-gradient(to var(--calcite-internal-tab-nav-gradient-start-side),transparent,transparent var(--calcite-internal-tab-nav-scroller-button-width),white var(--calcite-internal-tab-nav-scroller-button-width),white 51%,transparent 51%)}.tab-nav::-webkit-scrollbar{display:none;-ms-overflow-style:none;scrollbar-width:none}:host([layout=center]) ::slotted(calcite-tab-title){display:flex;flex-grow:1;flex-shrink:0;min-inline-size:auto;white-space:nowrap}:host([layout=center]) ::slotted(calcite-tab-title[selected]){overflow:unset}:host(:not([bordered])) .scale-l{--calcite-internal-tab-nav-gap: var(--calcite-spacing-xxl)}:host(:not([bordered])) .scale-m{--calcite-internal-tab-nav-gap: var(--calcite-spacing-xl)}:host(:not([bordered])) .scale-s{--calcite-internal-tab-nav-gap: var(--calcite-spacing-lg)}:host(:not([bordered])) .tab-titles-slot-wrapper{gap:var(--calcite-internal-tab-nav-gap)}:host([layout=center]:not([bordered])) .tab-titles-slot-wrapper{padding-inline:var(--calcite-spacing-xl)}.tab-nav,.tab-titles-slot-wrapper{display:flex;inline-size:100%;justify-content:flex-start;overflow:hidden;white-space:nowrap}.scroll-button-container{position:absolute;inset-block:0px}.scroll-button-container calcite-button{--calcite-offset-invert-focus: 1;--calcite-color-text-1: var(--calcite-color-text-3);block-size:100%}.scroll-button-container calcite-button:hover{--calcite-color-text-1: unset;--calcite-color-foreground-1: var(--calcite-color-transparent-hover);--calcite-color-foreground-3: var(--calcite-color-transparent)}.scroll-button-container--forward{inset-inline-end:0;z-index:var(--calcite-z-index)}.scroll-button-container--backward{inset-inline-start:0;z-index:var(--calcite-z-index)}:host(:not([bordered])) .scroll-button-container--backward:before,:host(:not([bordered])) .scroll-button-container--forward:before{background-color:var(--calcite-color-border-3);content:"";inline-size:var(--calcite-border-width-sm);inset-block-start:var(--calcite-border-width-md);inset-block-end:var(--calcite-border-width-md);position:absolute}:host(:not([bordered])) .scroll-button-container--backward:before{inset-inline-end:0}:host(:not([bordered])) .scroll-button-container--forward:before{inset-inline-start:0}:host([hidden]){display:none}[hidden]{display:none}`;
var _H = class _H extends LitElement {
  // #endregion
  // #region Lifecycle
  constructor() {
    super(), this.effectiveDir = "ltr", this.lastScrollWheelAxis = "x", this.resizeObserver = b("resize", () => {
      this.updateScrollingState();
    }), this.makeFirstVisibleTabClosable = false, this.hasOverflowingEndTabTitle = false, this.hasOverflowingStartTabTitle = false, this.bordered = false, this.layout = "inline", this.messages = s(), this.position = "bottom", this.scale = "m", this.selectedTitle = null, this.calciteInternalTabChange = createEvent({ cancelable: false }), this.calciteInternalTabNavSlotChange = createEvent(), this.calciteTabChange = createEvent({ cancelable: false }), this.listen("calciteInternalTabsFocusPrevious", this.focusPreviousTabHandler), this.listen("calciteInternalTabsFocusNext", this.focusNextTabHandler), this.listen("calciteInternalTabsFocusFirst", this.focusFirstTabHandler), this.listen("calciteInternalTabsFocusLast", this.focusLastTabHandler), this.listen("calciteInternalTabsActivate", this.internalActivateTabHandler), this.listen("calciteTabsActivate", this.activateTabHandler), this.listen("calciteInternalTabsClose", this.internalCloseTabHandler), this.listen("calciteInternalTabTitleRegister", this.updateTabTitles), this.listenOn(document.body, "calciteInternalTabChange", this.globalInternalTabChangeHandler);
  }
  get enabledTabTitles() {
    return St(this.el, "calcite-tab-title:not([disabled])").filter((t) => !t.closed);
  }
  get scrollerButtonWidth() {
    const { scale: t } = this;
    return parseInt(t === "s" ? c : t === "m" ? a : e);
  }
  get tabTitles() {
    return St(this.el, "calcite-tab-title");
  }
  connectedCallback() {
    var _a;
    super.connectedCallback(), this.parentTabsEl = this.el.closest("calcite-tabs"), (_a = this.resizeObserver) == null ? void 0 : _a.observe(this.el);
  }
  async load() {
    const t = `calcite-tab-nav-${this.storageId}`;
    if (localStorage && this.storageId && localStorage.getItem(t)) {
      const e2 = JSON.parse(localStorage.getItem(t));
      this.selectedTabId = e2;
    }
  }
  willUpdate(t) {
    t.has("selectedTitle") && (this.hasUpdated || this.selectedTitle !== null) && this.calciteInternalTabChange.emit({
      tab: this.selectedTabId
    }), t.has("selectedTabId") && this.selectedTabIdChanged();
    const { parentTabsEl: e2 } = this;
    this.layout = e2 == null ? void 0 : e2.layout, this.bordered = e2 == null ? void 0 : e2.bordered, this.effectiveDir = gt(this.el);
  }
  loaded() {
    this.scrollTabTitleIntoView(this.selectedTitle, "instant"), this.tabTitles.length && this.tabTitles.every((t) => !t.selected) && !this.selectedTabId && this.tabTitles[0].getTabIdentifier().then((t) => {
      this.calciteInternalTabChange.emit({
        tab: t
      });
    });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback(), (_a = this.resizeObserver) == null ? void 0 : _a.disconnect();
  }
  // #endregion
  // #region Private Methods
  focusPreviousTabHandler(t) {
    this.handleTabFocus(t, t.target, "previous");
  }
  focusNextTabHandler(t) {
    this.handleTabFocus(t, t.target, "next");
  }
  focusFirstTabHandler(t) {
    this.handleTabFocus(t, t.target, "first");
  }
  focusLastTabHandler(t) {
    this.handleTabFocus(t, t.target, "last");
  }
  internalActivateTabHandler(t) {
    const e2 = t.target;
    this.selectedTabId = t.detail.tab ? t.detail.tab : this.getIndexOfTabTitle(e2), t.stopPropagation(), this.selectedTitle = e2, this.scrollTabTitleIntoView(e2);
  }
  scrollTabTitleIntoView(t, e2 = "smooth") {
    t && requestAnimationFrame(() => {
      const i = this.effectiveDir === "ltr", a2 = this.tabTitleContainerEl, n = a2.getBoundingClientRect(), l = t.getBoundingClientRect(), s2 = a2.scrollLeft, r = i ? this.hasOverflowingStartTabTitle : this.hasOverflowingEndTabTitle, c2 = i ? this.hasOverflowingEndTabTitle : this.hasOverflowingStartTabTitle;
      if (l.left < n.left + (r ? this.scrollerButtonWidth : 0)) {
        const d = s2 + (l.left - n.left) - this.scrollerButtonWidth;
        a2.scrollTo({ left: d, behavior: e2 });
      } else if (l.right > n.right - (c2 ? this.scrollerButtonWidth : 0)) {
        const d = s2 + (l.right - n.right) + this.scrollerButtonWidth;
        a2.scrollTo({ left: d, behavior: e2 });
      }
    });
  }
  activateTabHandler(t) {
    this.calciteTabChange.emit(), t.stopPropagation();
  }
  internalCloseTabHandler(t) {
    const e2 = t.target;
    this.handleTabTitleClose(e2), t.stopPropagation();
  }
  /**
   * Check for active tabs on register and update selected
   *
   * @param event
   */
  async updateTabTitles(t) {
    t.target.selected && (this.selectedTabId = t.detail, this.selectedTitle = await this.getTabTitleById(this.selectedTabId));
  }
  globalInternalTabChangeHandler(t) {
    this.syncId && t.target !== this.el && t.target.syncId === this.syncId && this.selectedTabId !== t.detail.tab && (this.selectedTabId = t.detail.tab), t.stopPropagation();
  }
  async selectedTabIdChanged() {
    await this.componentOnReady(), localStorage && this.storageId && this.selectedTabId !== void 0 && this.selectedTabId !== null && localStorage.setItem(`calcite-tab-nav-${this.storageId}`, JSON.stringify(this.selectedTabId)), this.calciteInternalTabChange.emit({
      tab: this.selectedTabId
    });
  }
  onTabTitleWheel(t) {
    t.preventDefault();
    const { deltaX: e2, deltaY: i } = t, a2 = Math.abs(e2), n = Math.abs(i);
    let l;
    a2 === n ? l = this.lastScrollWheelAxis === "x" ? e2 : i : a2 > n ? (l = e2, this.lastScrollWheelAxis = "x") : (l = i, this.lastScrollWheelAxis = "y");
    const s2 = (this.effectiveDir === "rtl" ? -1 : 1) * l;
    t.currentTarget.scrollBy(s2, 0);
  }
  onSlotChange() {
    var _a;
    (_a = this.intersectionObserver) == null ? void 0 : _a.disconnect();
    const t = this.tabTitles;
    t.forEach((a2) => {
      var _a2;
      (_a2 = this.intersectionObserver) == null ? void 0 : _a2.observe(a2);
    });
    const e2 = this.getVisibleTabTitlesIndices(t);
    e2.length > 1 && this.makeFirstVisibleTabClosable && (t[e2[0]].closable = true, this.makeFirstVisibleTabClosable = false), this.calciteInternalTabNavSlotChange.emit(t);
  }
  storeTabTitleWrapperRef(t) {
    t && (this.tabTitleContainerEl = t, this.intersectionObserver = b("intersection", () => this.updateScrollingState(), {
      root: t,
      threshold: [0, 0.5, 1]
    }));
  }
  updateScrollingState() {
    const t = this.tabTitleContainerEl;
    if (!t)
      return;
    let e2, i;
    const a2 = t.scrollLeft, n = t.clientWidth, l = t.scrollWidth;
    this.effectiveDir === "ltr" ? (e2 = a2 > 0, i = a2 + n < l) : (e2 = a2 < 0, i = a2 !== -(l - n)), this.hasOverflowingStartTabTitle = e2, this.hasOverflowingEndTabTitle = i;
  }
  scrollToTabTitles(t) {
    requestAnimationFrame(() => {
      const e2 = this.tabTitleContainerEl, i = e2.getBoundingClientRect(), a2 = Array.from(this.el.querySelectorAll("calcite-tab-title")), { effectiveDir: n } = this;
      t === "forward" && a2.reverse();
      let l = null;
      if (a2.forEach((s2) => {
        const r = s2.getBoundingClientRect(), c2 = i.x + i.width, d = r.x + r.width;
        t === "forward" && n === "ltr" || t === "backward" && n === "rtl" ? (r.x > c2 || d > c2 && r.x > i.x) && (l = s2) : (d < i.x || d < c2 && r.x < i.x) && (l = s2);
      }), l) {
        const { scrollerButtonWidth: s2 } = this, r = t === "forward" && n === "ltr" || t === "backward" && n === "rtl" ? -s2 : l.offsetWidth - e2.clientWidth + s2, c2 = l.offsetLeft + r;
        e2.scrollTo({
          left: c2,
          behavior: "smooth"
        });
      }
    });
  }
  scrollToNextTabTitles() {
    this.scrollToTabTitles("forward");
  }
  scrollToPreviousTabTitles() {
    this.scrollToTabTitles("backward");
  }
  handleTabFocus(t, e2, i) {
    const a2 = xt(this.enabledTabTitles, e2, i);
    this.scrollTabTitleIntoView(a2, "instant"), t.stopPropagation();
  }
  getIndexOfTabTitle(t, e2 = this.tabTitles) {
    return e2.indexOf(t);
  }
  onTabTitleScroll() {
    this.updateScrollingState();
  }
  async getTabTitleById(t) {
    return Promise.all(this.tabTitles.map((e2) => e2.getTabIdentifier())).then((e2) => this.tabTitles[e2.indexOf(t)]);
  }
  getVisibleTabTitlesIndices(t) {
    return t.reduce((e2, i, a2) => i.closed ? e2 : [...e2, a2], []);
  }
  handleTabTitleClose(t) {
    const { tabTitles: e2 } = this, i = t.selected, a2 = this.getVisibleTabTitlesIndices(e2), n = a2.length;
    if (n === 1 && e2[a2[0]].closable)
      this.makeFirstVisibleTabClosable = true, e2[a2[0]].closable = false, this.selectedTabId = a2[0], i && e2[a2[0]].activateTab();
    else if (n > 1) {
      const l = e2.findIndex((r) => r === t), s2 = a2.find((r) => r > l);
      this.selectedTabId === l && (this.selectedTabId = s2 || n - 1, e2[this.selectedTabId].activateTab());
    }
    requestAnimationFrame(() => {
      e2[this.selectedTabId].focus();
    });
  }
  // #endregion
  // #region Rendering
  render() {
    return this.el.role = "tablist", html`<div class=${safeClassMap({
      [o.container]: true,
      [o.containerHasStartTabTitleOverflow]: !!this.hasOverflowingStartTabTitle,
      [o.containerHasEndTabTitleOverflow]: !!this.hasOverflowingEndTabTitle,
      [`scale-${this.scale}`]: true,
      [`position-${this.position}`]: true,
      [D.rtl]: this.effectiveDir === "rtl"
    })}>${this.renderScrollButton("start")}<div class=${safeClassMap({
      [o.tabTitleSlotWrapper]: true
    })} @scroll=${this.onTabTitleScroll} @wheel=${this.onTabTitleWheel} ${ref(this.storeTabTitleWrapperRef)}><slot @slotchange=${this.onSlotChange}></slot></div>${this.renderScrollButton("end")}</div>`;
  }
  renderScrollButton(t) {
    const { bordered: e2, messages: i, hasOverflowingStartTabTitle: a2, hasOverflowingEndTabTitle: n, scale: l } = this, s2 = t === "end";
    return keyed(t, html`<div class=${safeClassMap({
      [o.scrollButtonContainer]: true,
      [o.scrollBackwardContainerButton]: !s2,
      [o.scrollForwardContainerButton]: s2
    })} .hidden=${s2 && !n || !s2 && !a2}><calcite-button .appearance=${e2 ? "outline-fill" : "transparent"} .ariaLabel=${s2 ? i.nextTabTitles : i.previousTabTitles} class=${safeClassMap({
      [o.scrollButton]: true
    })} icon-flip-rtl=both .iconStart=${s2 ? g.chevronRight : g.chevronLeft} kind=neutral @click=${s2 ? this.scrollToNextTabTitles : this.scrollToPreviousTabTitles} .scale=${l} tabindex=-1></calcite-button></div>`);
  }
};
_H.properties = { hasOverflowingEndTabTitle: 16, hasOverflowingStartTabTitle: 16, selectedTabId: 16, bordered: 7, layout: 3, messageOverrides: 0, position: 1, scale: 1, selectedTitle: 0, storageId: 3, syncId: 3 };
_H.styles = F;
var H = _H;
S("calcite-tab-nav", H);
export {
  H as TabNav
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-tab-nav/customElement.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.1.0 *)
*/
//# sourceMappingURL=customElement-CACRQKSI.js.map
