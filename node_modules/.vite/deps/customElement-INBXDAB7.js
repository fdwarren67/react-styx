import {
  l,
  m as m4
} from "./chunk-ODA522JV.js";
import {
  A,
  L,
  N,
  O,
  R,
  m as m3,
  p,
  v,
  x
} from "./chunk-BYGGXTK7.js";
import {
  Q,
  q
} from "./chunk-ZHGVMVCT.js";
import "./chunk-A7MNUVGI.js";
import {
  m as m2
} from "./chunk-2GIEDWQ6.js";
import {
  s
} from "./chunk-RZAGQ6CT.js";
import {
  mt
} from "./chunk-VQ5234AM.js";
import "./chunk-PXZ2RU65.js";
import "./chunk-S3EVYUV4.js";
import {
  S,
  m
} from "./chunk-B7E2AREE.js";
import {
  LitElement,
  createEvent,
  css,
  html
} from "./chunk-MALSDV7D.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@esri/calcite-components/dist/components/calcite-date-picker/customElement.js
var M = 2;
var $ = { dateStyle: "full" };
var P = css`:host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host{display:inline-block;inline-size:100%;overflow:visible;border-width:1px;border-style:solid;vertical-align:top;border-color:var(--calcite-date-picker-border-color, var(--calcite-color-border-1));border-radius:var(--calcite-date-picker-corner-radius, 0)}:host([scale=s]){inline-size:236px;min-inline-size:216px;max-inline-size:380px}:host([scale=s][range][layout=horizontal]){inline-size:480px;min-inline-size:432px;max-inline-size:772px}:host([scale=m]){inline-size:298px;min-inline-size:272px;max-inline-size:480px}:host([scale=m][range][layout=horizontal]){inline-size:608px;min-inline-size:544px;max-inline-size:972px}:host([scale=l]){inline-size:334px;min-inline-size:320px;max-inline-size:600px}:host([scale=l][range][layout=horizontal]){inline-size:684px;min-inline-size:640px;max-inline-size:1212px}:host([hidden]){display:none}[hidden]{display:none}`;
var _w = class _w extends LitElement {
  // #endregion
  // #region Lifecycle
  constructor() {
    super(), this.rangeValueChangedByUser = false, this.layout = "horizontal", this.messages = s({ blocking: true }), this.monthStyle = "wide", this.proximitySelectionDisabled = false, this.range = false, this.scale = "m", this.calciteDatePickerChange = createEvent({ cancelable: false }), this.calciteDatePickerRangeChange = createEvent({ cancelable: false }), this.listen("keydown", this.keyDownHandler);
  }
  // #endregion
  // #region Public Methods
  /**
   * Resets active date state.
   *
   * @private
   */
  async reset() {
    this.resetActiveDates(), this.rangeValueChangedByUser = false;
  }
  /** Sets focus on the component's first focusable element. */
  async setFocus() {
    await m2(this), mt(this.el);
  }
  connectedCallback() {
    super.connectedCallback(), Array.isArray(this.value) ? this.valueAsDate = m4(this.value) : this.value && (this.valueAsDate = O(this.value)), this.min && (this.minAsDate = O(this.min)), this.max && (this.maxAsDate = O(this.max)), this.setActiveStartAndEndDates();
  }
  async load() {
    await this.loadLocaleData(), this.onMinChanged(this.min), this.onMaxChanged(this.max);
  }
  willUpdate(t) {
    t.has("activeDate") && this.activeDateWatcher(this.activeDate), t.has("value") && this.valueHandler(this.value), t.has("valueAsDate") && this.valueAsDateWatcher(this.valueAsDate), t.has("min") && this.onMinChanged(this.min), t.has("max") && this.onMaxChanged(this.max), t.has("messages") && this.hasUpdated && this.loadLocaleData().catch(console.error);
  }
  // #endregion
  // #region Private Methods
  activeDateWatcher(t) {
    this.range && (this.rangeValueChangedByUser || (t ? (this.activeStartDate = t, this.activeEndDate = N(this.activeStartDate)) : this.resetActiveDates()));
  }
  valueHandler(t) {
    Array.isArray(t) ? (this.valueAsDate = m4(t), this.rangeValueChangedByUser || this.resetActiveDates()) : t && (this.valueAsDate = O(t));
  }
  valueAsDateWatcher(t) {
    this.range && Array.isArray(t) && !this.rangeValueChangedByUser ? this.setActiveStartAndEndDates() : t && t !== this.activeDate && (this.activeDate = t);
  }
  onMinChanged(t) {
    this.minAsDate = O(t), this.range && this.setActiveStartAndEndDates();
  }
  onMaxChanged(t) {
    this.maxAsDate = O(t), this.range && this.setActiveStartAndEndDates();
  }
  keyDownHandler(t) {
    t.key === "Escape" && this.resetActiveDates();
  }
  async loadLocaleData() {
    m() && (q.numberFormatOptions = {
      numberingSystem: this.numberingSystem,
      locale: this.messages._lang,
      useGrouping: false
    }, this.localeData = await l(this.messages._lang), this.dateTimeFormat = Q(this.messages._lang, $));
  }
  monthHeaderSelectChange(t) {
    const e = new Date(t.detail.date), a = t.detail.position;
    this.range ? a === "end" ? (this.activeEndDate = e, this.activeStartDate = A(e)) : (this.activeStartDate = e, this.activeEndDate = N(e)) : this.activeDate = e, t.stopPropagation();
  }
  monthActiveDateChange(t) {
    const e = new Date(t.detail);
    if (!this.range)
      this.activeDate = e;
    else {
      const a = e.getMonth(), i = a !== this.activeStartDate.getMonth() && a !== N(this.activeStartDate).getMonth();
      this.activeRange === "end" ? (!this.activeEndDate || this.activeStartDate && i) && (this.activeEndDate = e, this.activeStartDate = A(e)) : (this.activeStartDate && i || !this.activeStartDate) && (this.activeStartDate = e, this.activeEndDate = N(e));
    }
    t.stopPropagation();
  }
  monthHoverChange(t) {
    if (!this.range) {
      this.hoverRange = void 0;
      return;
    }
    const { valueAsDate: e } = this, a = Array.isArray(e) && e[0], i = Array.isArray(e) && e[1], s2 = new Date(t.detail);
    if (this.hoverRange = {
      focused: this.activeRange || "start",
      start: a,
      end: i
    }, this.proximitySelectionDisabled)
      i && a || !i && s2 >= a ? (this.hoverRange.focused = "end", this.hoverRange.end = s2) : !i && s2 < a ? this.hoverRange = {
        focused: "start",
        start: s2,
        end: a
      } : this.hoverRange = void 0;
    else if (this.activeRange)
      this.activeRange === "end" ? (this.hoverRange.end = s2, this.hoverRange.focused = "end") : (this.hoverRange.start = s2, this.hoverRange.focused = "start");
    else if (a && i) {
      const c = Math.abs(R(s2, a)), l2 = Math.abs(R(s2, i));
      s2 > i ? (this.hoverRange.end = s2, this.hoverRange.focused = "end") : s2 < a ? (this.hoverRange.start = s2, this.hoverRange.focused = "start") : s2 > a && s2 < i && (c < l2 ? (this.hoverRange.start = s2, this.hoverRange.focused = "start") : (this.hoverRange.end = s2, this.hoverRange.focused = "end"));
    } else
      a && (s2 < a ? this.hoverRange = {
        focused: "start",
        start: s2,
        end: a
      } : (this.hoverRange.end = s2, this.hoverRange.focused = "end"));
    t.stopPropagation();
  }
  monthMouseOutChange(t) {
    this.hoverRange && (this.hoverRange = void 0), t.stopPropagation();
  }
  resetActiveDates() {
    const { valueAsDate: t } = this;
    !Array.isArray(t) && t && t !== this.activeDate && (this.activeDate = new Date(t)), Array.isArray(t) && (t[0] && t[0] !== this.activeStartDate && (this.activeStartDate = new Date(t[0])), t[1] && t[1] !== this.activeEndDate && (this.activeEndDate = new Date(t[1]))), this.hoverRange = void 0;
  }
  getEndDate() {
    return Array.isArray(this.valueAsDate) && this.valueAsDate[1] || void 0;
  }
  setEndDate(t) {
    const e = this.getStartDate();
    this.rangeValueChangedByUser = true, this.value = [x(e), x(t)], this.valueAsDate = [e, t], t && this.calciteDatePickerRangeChange.emit();
  }
  getStartDate() {
    return Array.isArray(this.valueAsDate) && this.valueAsDate[0];
  }
  setStartDate(t) {
    const e = this.getEndDate();
    this.rangeValueChangedByUser = true, this.value = [x(t), x(e)], this.valueAsDate = [t, e], this.calciteDatePickerRangeChange.emit();
  }
  /**
   * Event handler for when the selected date changes
   *
   * @param event
   */
  monthDateChange(t) {
    const e = new Date(t.detail), a = x(e);
    if (!this.range && a === x(this.valueAsDate))
      return;
    if (!this.range) {
      this.value = a || "", this.valueAsDate = e || null, this.activeDate = e || null, this.calciteDatePickerChange.emit();
      return;
    }
    const i = this.getStartDate(), s2 = this.getEndDate();
    if (!i || !s2 && e < i)
      i && this.setEndDate(new Date(i)), this.activeRange == "end" ? this.setEndDate(e) : this.setStartDate(e);
    else if (!s2)
      this.setEndDate(e);
    else if (this.proximitySelectionDisabled)
      this.setStartDate(e), this.setEndDate(null);
    else if (this.activeRange)
      this.activeRange == "end" ? this.setEndDate(e) : (e > s2 && (this.setEndDate(null), this.activeEndDate = null), this.setStartDate(e));
    else {
      const c = R(e, i), l2 = R(e, s2);
      l2 === 0 || c < 0 ? this.setStartDate(e) : c === 0 || l2 < 0 ? this.setEndDate(e) : c < l2 ? this.setStartDate(e) : this.setEndDate(e);
    }
    t.stopPropagation(), this.calciteDatePickerChange.emit();
  }
  /**
   * Get an active date using the value, or current date as default
   *
   * @param value
   * @param min
   * @param max
   */
  getActiveDate(t, e, a) {
    const i = p(/* @__PURE__ */ new Date(), e, a);
    return p(this.activeDate, e, a) || t || (v(a, i) && !this.range ? L(i, e, a) : i);
  }
  getActiveEndDate(t, e, a) {
    return p(this.activeEndDate, e, a) || t || p(N(/* @__PURE__ */ new Date()), e, a);
  }
  setActiveStartAndEndDates() {
    if (this.range) {
      const t = p(Array.isArray(this.valueAsDate) ? this.valueAsDate[0] : this.valueAsDate, this.minAsDate, this.maxAsDate), e = p(Array.isArray(this.valueAsDate) ? this.valueAsDate[1] : null, this.minAsDate, this.maxAsDate);
      if (this.activeStartDate = this.getActiveDate(t, this.minAsDate, this.maxAsDate), this.activeEndDate = this.getActiveEndDate(e, this.minAsDate, this.maxAsDate), v(this.activeStartDate, this.activeEndDate)) {
        const a = L(A(this.activeEndDate), this.minAsDate, this.maxAsDate), i = N(this.activeEndDate);
        m3(a, this.minAsDate, this.maxAsDate) ? this.activeStartDate = a : m3(i, this.minAsDate, this.maxAsDate) && (this.activeEndDate = i);
      }
    }
  }
  // #endregion
  // #region Rendering
  render() {
    const t = p(this.range && Array.isArray(this.valueAsDate) ? this.valueAsDate[0] : this.valueAsDate, this.minAsDate, this.maxAsDate), e = this.getActiveDate(t, this.minAsDate, this.maxAsDate), a = this.range && Array.isArray(this.valueAsDate) ? p(this.valueAsDate[1], this.minAsDate, this.maxAsDate) : null, i = this.range && this.activeRange ? this.activeRange === "start" ? this.minAsDate : t : this.minAsDate, s2 = this.range ? this.activeStartDate : e;
    return this.renderMonth(s2, this.maxAsDate, i, t, a);
  }
  /**
   * Render calcite-date-picker-month-header and calcite-date-picker-month
   *
   * @param activeDate
   * @param maxDate
   * @param minDate
   * @param date
   * @param endDate
   */
  renderMonth(t, e, a, i, s2) {
    return this.localeData && html`<calcite-date-picker-month .activeDate=${t} .dateTimeFormat=${this.dateTimeFormat} .endDate=${this.range ? s2 : void 0} .headingLevel=${this.headingLevel || M} .hoverRange=${this.hoverRange} .layout=${this.layout} .localeData=${this.localeData} .max=${e} .messages=${this.messages} .min=${a} .monthStyle=${this.monthStyle} @calciteInternalDatePickerDayHover=${this.monthHoverChange} @calciteInternalDatePickerDaySelect=${this.monthDateChange} @calciteInternalDatePickerMonthActiveDateChange=${this.monthActiveDateChange} @calciteInternalDatePickerMonthChange=${this.monthHeaderSelectChange} @calciteInternalDatePickerMonthMouseOut=${this.monthMouseOutChange} .range=${this.range} .scale=${this.scale} .selectedDate=${this.activeRange === "end" ? s2 : i} .startDate=${this.range ? i : void 0}></calcite-date-picker-month>` || "";
  }
};
_w.properties = { activeEndDate: 16, activeStartDate: 16, dateTimeFormat: 16, endAsDate: 16, hoverRange: 16, localeData: 16, startAsDate: 16, activeDate: 0, activeRange: 3, headingLevel: 11, layout: 3, max: 3, maxAsDate: 0, messageOverrides: 0, min: 3, minAsDate: 0, monthStyle: 1, numberingSystem: 3, proximitySelectionDisabled: 7, range: 7, scale: 3, value: 1, valueAsDate: 0 };
_w.shadowRootOptions = { mode: "open", delegatesFocus: true };
_w.styles = P;
var w = _w;
S("calcite-date-picker", w);
export {
  w as DatePicker
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-date-picker/customElement.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.1.0 *)
*/
//# sourceMappingURL=customElement-INBXDAB7.js.map
