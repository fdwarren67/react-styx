import {
  t
} from "./chunk-V3ODZOFX.js";
import {
  I as I2,
  O as O2,
  b as b2,
  c,
  d,
  f as f2,
  h,
  i as i2,
  m as m4
} from "./chunk-ZXLOC3GW.js";
import {
  y
} from "./chunk-NT5GNFHC.js";
import {
  m as m3
} from "./chunk-DPQ7TENX.js";
import {
  $,
  B,
  D,
  O,
  W
} from "./chunk-VLJE74YV.js";
import {
  I,
  T,
  v
} from "./chunk-YJUTXVD7.js";
import {
  m,
  p
} from "./chunk-VBBJGZOS.js";
import {
  X,
  Y,
  ct,
  ft,
  lt,
  ot,
  rt
} from "./chunk-T2GPF443.js";
import "./chunk-54EUENDV.js";
import {
  debounce_default,
  escapeRegExp_default
} from "./chunk-F5MHH7JA.js";
import {
  s as s2
} from "./chunk-GL5DQLAU.js";
import {
  keyed
} from "./chunk-KZXUV47B.js";
import {
  f,
  m as m2,
  o
} from "./chunk-2GIEDWQ6.js";
import {
  createRef,
  ref
} from "./chunk-LTKIMXCE.js";
import {
  s
} from "./chunk-RZAGQ6CT.js";
import {
  b
} from "./chunk-6JIDXA46.js";
import {
  bt,
  pt
} from "./chunk-VQ5234AM.js";
import "./chunk-PXZ2RU65.js";
import {
  i
} from "./chunk-S3EVYUV4.js";
import {
  M,
  S
} from "./chunk-B7E2AREE.js";
import {
  LitElement,
  createEvent,
  css,
  html,
  live,
  nothing,
  safeClassMap,
  stringOrBoolean
} from "./chunk-MALSDV7D.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@esri/calcite-components/dist/components/calcite-combobox/customElement.js
var U = {
  button: "x-button"
};
var Se = ({ disabled: k, key: e, label: t2, scale: i3 }) => keyed(e, html`<button .ariaLabel=${t2} class=${safeClassMap(U.button)} .disabled=${k} tabindex=-1 type=button><calcite-icon icon=x .scale=${o(i3)}></calcite-icon></button>`);
var ke = css`:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:block}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([scale=s]) .x-button{inline-size:1rem;block-size:1rem}:host([scale=m]) .x-button{inline-size:1.5rem;block-size:1.5rem}:host([scale=l]) .x-button{inline-size:2rem;block-size:2rem}.x-button{margin:0;display:flex;cursor:pointer;appearance:none;align-content:center;align-items:center;justify-content:center;align-self:center;border-width:2px;background-color:transparent;color:var(--calcite-color-text-3);outline-color:transparent;transition-property:background-color,block-size,border-color,box-shadow,color,inset-block-end,inset-block-start,inset-inline-end,inset-inline-start,inset-size,opacity,outline-color,transform;transition-duration:var(--calcite-animation-timing);transition-timing-function:ease-in-out;border-radius:50%;border-color:transparent;background-color:var(--calcite-color-foreground-2)}.x-button:active,.x-button:hover{color:var(--calcite-color-text-1);background-color:var(--calcite-color-foreground-3)}.x-button:active{border-style:solid;border-color:var(--calcite-color-brand)}.x-button calcite-icon{color:inherit}:host([scale=s]){font-size:var(--calcite-font-size--2);--calcite-combobox-item-spacing-unit-l: .5rem;--calcite-combobox-item-spacing-unit-s: .25rem;--calcite-combobox-input-height: 1rem;--calcite-internal-combobox-input-margin-block: calc(.25rem - 1px) }:host([scale=s]) .x-button{margin-inline:.5rem}:host([scale=m]){font-size:var(--calcite-font-size--1);--calcite-combobox-item-spacing-unit-l: .75rem;--calcite-combobox-item-spacing-unit-s: .5rem;--calcite-combobox-input-height: 1rem;--calcite-internal-combobox-input-margin-block: calc(.5rem - 1px) }:host([scale=m]) .x-button{margin-inline-end:.75rem}:host([scale=l]){font-size:var(--calcite-font-size-0);--calcite-combobox-item-spacing-unit-l: 1rem;--calcite-combobox-item-spacing-unit-s: .75rem;--calcite-combobox-input-height: 1.5rem;--calcite-internal-combobox-input-margin-block: calc(.625rem - 1px) }:host([scale=l]) .x-button{margin-inline-end:1rem}.wrapper{display:flex;border-width:1px;border-style:solid;outline-color:transparent;padding-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);padding-inline:var(--calcite-combobox-item-spacing-unit-l);background-color:var(--calcite-combobox-input-background-color, var(--calcite-color-foreground-1));color:var(--calcite-combobox-input-text-color, var(--calcite-color-text-1));border-color:var(--calcite-combobox-input-border-color, var(--calcite-color-border-input))}.wrapper:hover .icon{color:var(--calcite-combobox-icon-color-hover, var(--calcite-color-text-1))}:host(:focus-within) .wrapper,.wrapper--active{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}:host([read-only]) .wrapper{background-color:var(--calcite-color-background)}:host([read-only]) .label{font-weight:var(--calcite-font-weight-medium)}:host([status=invalid]) .wrapper{border-color:var(--calcite-color-status-danger)}:host([status=invalid]:focus-within) .wrapper{outline:2px solid var(--calcite-color-status-danger);outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.wrapper--single{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-l);cursor:pointer;flex-wrap:nowrap}.grid-input{position:relative;display:flex;flex-grow:1;flex-wrap:wrap;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0;gap:var(--calcite-combobox-item-spacing-unit-s);margin-inline-end:var(--calcite-combobox-item-spacing-unit-s)}.grid-input.selection-display-fit,.grid-input.selection-display-single{flex-wrap:nowrap;overflow:hidden}.input{flex-grow:1;appearance:none;overflow:hidden;text-overflow:ellipsis;border-style:none;background-color:transparent;padding:0;font-family:inherit;color:var(--calcite-color-text-1);font-size:inherit;block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height);inline-size:100%;margin-block-end:var(--calcite-combobox-item-spacing-unit-s);min-inline-size:4.8125rem}.input:focus{outline:2px solid transparent;outline-offset:2px}.input:placeholder-shown{text-overflow:ellipsis}.input--single{padding:0;margin-block:var(--calcite-internal-combobox-input-margin-block)}.wrapper--active .input-single{cursor:text}.input--hidden{pointer-events:none;width:0px;min-width:0px;opacity:0}.input--icon{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-l)}.placeholder-icon{color:var(--calcite-combobox-icon-color, var(--calcite-color-text-3))}.input-wrap{display:flex;flex-grow:1;align-items:center}.input-wrap--single{flex:1 1 0%;overflow:hidden}.label{pointer-events:none;max-width:100%;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0;font-weight:var(--calcite-font-weight-normal);block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height)}.label--icon{padding-inline:var(--calcite-combobox-item-spacing-unit-l)}.icon-end,.icon-start{display:flex;cursor:pointer;align-items:center}.icon-end{flex:none}.icon-end .icon{color:var(--calcite-combobox-icon-color, var(--calcite-color-text-3))}.floating-ui-container{--calcite-floating-ui-z-index: var(--calcite-z-index-dropdown);inline-size:max-content;display:none;max-inline-size:100vw;max-block-size:100vh;inset-block-start:0;left:0;z-index:var(--calcite-floating-ui-z-index)}.floating-ui-container .calcite-floating-ui-anim{position:relative;transition:var(--calcite-floating-ui-transition);transition-property:inset,left,opacity;opacity:0;box-shadow:0 0 16px #00000029;z-index:var(--calcite-z-index);border-radius:.25rem}.floating-ui-container[data-placement^=bottom] .calcite-floating-ui-anim{inset-block-start:-5px}.floating-ui-container[data-placement^=top] .calcite-floating-ui-anim{inset-block-start:5px}.floating-ui-container[data-placement^=left] .calcite-floating-ui-anim{left:5px}.floating-ui-container[data-placement^=right] .calcite-floating-ui-anim{left:-5px}.floating-ui-container[data-placement] .calcite-floating-ui-anim--active{opacity:1;inset-block-start:0;left:0}@media (forced-colors: active){.wrapper,.floating-ui-container{border:1px solid canvasText}}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.list-container{max-height:45vh;overflow-y:auto;inline-size:var(--calcite-dropdown-width, 100%);background-color:var(--calcite-combobox-background-color, var(--calcite-color-foreground-1))}.list{margin:0;display:block;padding:0}.list--hide{height:0px;overflow:hidden}calcite-chip{--calcite-animation-timing: 0}.chip{margin-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);max-inline-size:100%}.chip--invisible{visibility:hidden;position:absolute}.item{display:block}.validation-container{display:flex;flex-direction:column;align-items:flex-start;align-self:stretch}:host([scale=m]) .validation-container,:host([scale=l]) .validation-container{padding-block-start:.5rem}:host([scale=s]) .validation-container{padding-block-start:.25rem}::slotted(input[slot=hidden-form-input]){margin:0!important;opacity:0!important;outline:none!important;padding:0!important;position:absolute!important;inset:0!important;transform:none!important;-webkit-appearance:none!important;z-index:-1!important}:host([hidden]){display:none}[hidden]{display:none}::slotted(calcite-combobox-item-group:not(:first-child)){padding-block-start:var(--calcite-combobox-item-spacing-unit-l)}`;
var z = "combobox-item-";
var L = "combobox-chip-";
var R = "combobox-label-";
var y2 = "combobox-listbox-";
var B2 = "combobox-input-";
var _De = class _De extends LitElement {
  // #endregion
  // #region Lifecycle
  constructor() {
    super(), this.filterItems = (() => {
      const e = (t2, i3) => t2 && i3.some(({ el: s3 }) => t2 === s3);
      return debounce_default((t2, i3 = false, s3 = true) => {
        const l = y([...this.data, ...this.groupData], t2, this.effectiveFilterProps), o2 = this.getItemsAndGroups(), a = t2 === "";
        o2.forEach((n) => {
          if (a) {
            n.itemHidden = false;
            return;
          }
          const h2 = !e(n, l);
          n.itemHidden = h2;
          const [p2, I3] = n.ancestors;
          (e(p2, l) || e(I3, l)) && (n.itemHidden = false), h2 || n.ancestors.forEach((u) => u.itemHidden = false);
        }), this.filterTextMatchPattern = this.filterText && new RegExp(`(${escapeRegExp_default(this.filterText)})`, "i"), this.filteredItems = this.getFilteredItems(), this.filteredItems.forEach((n) => {
          n.filterTextMatchPattern = this.filterTextMatchPattern;
        }), i3 && (this.open = this.filterText.trim().length > 0 && this.filteredItems.length > 0), s3 && this.calciteComboboxFilterChange.emit();
      }, M.filter);
    })(), this._filterText = "", this.getSelectedItems = () => {
      if (!this.isMulti()) {
        const e = this.items.find(({ selected: t2 }) => t2);
        return e ? [e] : [];
      }
      return this.items.filter((e) => e.selected && (this.selectionMode !== "ancestors" || !h(e))).sort((e, t2) => {
        const i3 = this.selectedItems.indexOf(e), s3 = this.selectedItems.indexOf(t2);
        return i3 > -1 && s3 > -1 ? i3 - s3 : s3 - i3;
      });
    }, this.groupItems = [], this.guid = i(), this.ignoreSelectedEventsFlag = false, this.inputHeight = 0, this.internalValueChangeFlag = false, this.items = [], this.mutationObserver = b("mutation", () => this.updateItems()), this.onLabelClick = () => {
      this.setFocus();
    }, this.transitionProp = "opacity", this.placement = ot, this.resizeObserver = b("resize", () => {
      this.setMaxScrollerHeight(), this.refreshSelectionDisplay();
    }), this._selectedItems = [], this.textInput = createRef(), this._value = null, this.activeChipIndex = -1, this.activeDescendant = "", this.activeItemIndex = -1, this.compactSelectionDisplay = false, this.selectedHiddenChipsCount = 0, this.selectedVisibleChipsCount = 0, this.clearDisabled = false, this.disabled = false, this.filteredItems = [], this.maxItems = 0, this.messages = s(), this.open = false, this.overlayPositioning = "absolute", this.placeholderIconFlipRtl = false, this.readOnly = false, this.required = false, this.scale = "m", this.selectionDisplay = "all", this.selectionMode = "multiple", this.status = "idle", this.validity = {
      valid: false,
      badInput: false,
      customError: false,
      patternMismatch: false,
      rangeOverflow: false,
      rangeUnderflow: false,
      stepMismatch: false,
      tooLong: false,
      tooShort: false,
      typeMismatch: false,
      valueMissing: false
    }, this.calciteComboboxBeforeClose = createEvent({ cancelable: false }), this.calciteComboboxBeforeOpen = createEvent({ cancelable: false }), this.calciteComboboxChange = createEvent({ cancelable: false }), this.calciteComboboxChipClose = createEvent({ cancelable: false }), this.calciteComboboxClose = createEvent({ cancelable: false }), this.calciteComboboxFilterChange = createEvent({ cancelable: false }), this.calciteComboboxOpen = createEvent({ cancelable: false }), this.listenOn(document, "click", this.documentClickHandler), this.listen("calciteComboboxItemChange", this.calciteComboboxItemChangeHandler), this.listen("calciteInternalComboboxItemChange", this.calciteInternalComboboxItemChangeHandler), this.listen("click", this.comboboxFocusHandler);
  }
  emitComboboxChange() {
    this.calciteComboboxChange.emit();
  }
  get effectiveFilterProps() {
    return this.filterProps ? this.filterProps.filter((e) => e !== "el") : ["description", "label", "metadata", "shortHeading", "textLabel"];
  }
  get showingInlineIcon() {
    const { placeholderIcon: e, selectionMode: t2, selectedItems: i3, open: s3 } = this, l = i3[0], o2 = l == null ? void 0 : l.icon, a = I2(t2);
    return !s3 && l ? !!o2 && a : !!e && (!l || a);
  }
  /** Text for the component's filter input field. */
  get filterText() {
    return this._filterText;
  }
  set filterText(e) {
    const t2 = this._filterText;
    e !== t2 && (this._filterText = e, this.filterTextChange(e));
  }
  /**
   * Specifies the component's selected items.
   *
   * @readonly
   */
  get selectedItems() {
    return this._selectedItems;
  }
  set selectedItems(e) {
    const t2 = this._selectedItems;
    e !== t2 && (this._selectedItems = e, this.selectedItemsHandler());
  }
  /** The component's value(s) from the selected `calcite-combobox-item`(s). */
  get value() {
    return this._value;
  }
  set value(e) {
    const t2 = this._value;
    e !== t2 && (this._value = e, this.valueHandler(e));
  }
  // #endregion
  // #region Public Methods
  /**
   * Updates the position of the component.
   *
   * @param delayed Reposition the component after a delay
   * @returns Promise
   */
  async reposition(e = false) {
    const { floatingEl: t2, referenceEl: i3, placement: s3, overlayPositioning: l, filteredFlipPlacements: o2 } = this;
    return ft(this, {
      floatingEl: t2,
      referenceEl: i3,
      overlayPositioning: l,
      placement: s3,
      flipPlacements: o2,
      type: "menu"
    }, e);
  }
  /** Sets focus on the component. */
  async setFocus() {
    var _a;
    await m2(this), (_a = this.textInput.value) == null ? void 0 : _a.focus(), this.activeChipIndex = -1, this.activeItemIndex = -1;
  }
  connectedCallback() {
    var _a;
    super.connectedCallback(), v(this), D(this), this.internalValueChangeFlag = true, this.value = this.getValue(), this.internalValueChangeFlag = false, (_a = this.mutationObserver) == null ? void 0 : _a.observe(this.el, { childList: true, subtree: true }), this.setFilteredPlacements(), ct(this);
  }
  willUpdate(e) {
    e.has("open") && (this.hasUpdated || this.open !== false) && this.openHandler(), e.has("disabled") && (this.hasUpdated || this.disabled !== false) && this.handleDisabledChange(this.disabled), e.has("maxItems") && (this.hasUpdated || this.maxItems !== 0) && this.setMaxScrollerHeight(), e.has("overlayPositioning") && (this.hasUpdated || this.overlayPositioning !== "absolute") && this.reposition(true), (e.has("selectionMode") || e.has("scale")) && this.updateItems(), e.has("flipPlacements") && this.flipPlacementsHandler();
  }
  updated() {
    this.el.offsetHeight !== this.inputHeight && (this.reposition(true), this.inputHeight = this.el.offsetHeight), m(this), this.refreshSelectionDisplay();
  }
  loaded() {
    O(this, this.getValue()), ct(this), this.updateItems(), this.filterItems(this.filterText, false, false);
  }
  disconnectedCallback() {
    var _a, _b;
    super.disconnectedCallback(), (_a = this.mutationObserver) == null ? void 0 : _a.disconnect(), (_b = this.resizeObserver) == null ? void 0 : _b.disconnect(), T(this), W(this), Y(this);
  }
  // #endregion
  // #region Private Methods
  filterTextChange(e) {
    this.updateActiveItemIndex(-1), this.filterItems(e, true);
  }
  openHandler() {
    s2(this), !this.disabled && this.setMaxScrollerHeight();
  }
  handleDisabledChange(e) {
    e || (this.open = false);
  }
  valueHandler(e) {
    this.internalValueChangeFlag || (this.getItems().forEach((t2) => {
      t2.selected = Array.isArray(e) ? e.includes(t2.value) : e === t2.value;
    }), this.updateItems());
  }
  flipPlacementsHandler() {
    this.setFilteredPlacements(), this.reposition(true);
  }
  selectedItemsHandler() {
    this.internalValueChangeFlag = true, this.value = this.getValue(), this.internalValueChangeFlag = false;
  }
  async documentClickHandler(e) {
    this.disabled || e.composedPath().includes(this.el) || (await this.componentOnReady(), !this.allowCustomValues && this.filterText && (this.clearInputValue(), this.filterItems(""), this.updateActiveItemIndex(-1)), this.allowCustomValues && this.filterText.trim().length && this.addCustomChip(this.filterText), this.open = false);
  }
  calciteComboboxItemChangeHandler(e) {
    if (this.ignoreSelectedEventsFlag)
      return;
    const t2 = e.target, i3 = this.filteredItems.indexOf(t2);
    this.updateActiveItemIndex(i3), this.toggleSelection(t2, t2.selected);
  }
  calciteInternalComboboxItemChangeHandler(e) {
    e.stopPropagation(), this.hasUpdated && this.updateItems();
  }
  clearValue() {
    this.ignoreSelectedEventsFlag = true, this.items.forEach((e) => e.selected = false), this.ignoreSelectedEventsFlag = false, this.selectedItems = [], this.emitComboboxChange(), this.open = false, this.updateActiveItemIndex(-1), this.resetText(), this.filterItems(""), this.setFocus();
  }
  clearInputValue() {
    this.textInput.value.value = "", this.filterText = "";
  }
  setFilteredPlacements() {
    const { el: e, flipPlacements: t2 } = this;
    this.filteredFlipPlacements = t2 ? lt(t2, e) : null;
  }
  getValue() {
    const e = this.selectedItems.map((t2) => {
      var _a;
      return (_a = t2.value) == null ? void 0 : _a.toString();
    });
    return e.length ? e.length > 1 ? e : e[0] : "";
  }
  comboboxInViewport() {
    const e = this.el.getBoundingClientRect();
    return e.top >= 0 && e.left >= 0 && e.right <= (window.innerWidth || document.documentElement.clientWidth) && e.bottom <= (window.innerHeight || document.documentElement.clientHeight);
  }
  keyDownHandler(e) {
    if (this.readOnly)
      return;
    const { key: t2 } = e;
    switch (t2) {
      case "Tab":
        this.activeChipIndex = -1, this.activeItemIndex = -1, this.allowCustomValues && this.filterText ? (this.addCustomChip(this.filterText, true), e.preventDefault()) : this.open ? (this.open = false, e.preventDefault()) : !this.allowCustomValues && this.filterText && (this.clearInputValue(), this.filterItems(""), this.updateActiveItemIndex(-1));
        break;
      case "ArrowLeft":
        (this.activeChipIndex !== -1 || this.textInput.value.selectionStart === 0) && (this.previousChip(), e.preventDefault());
        break;
      case "ArrowRight":
        this.activeChipIndex !== -1 && (this.nextChip(), e.preventDefault());
        break;
      case "ArrowUp":
        this.filteredItems.length && (e.preventDefault(), this.open && this.shiftActiveItemIndex(-1), this.comboboxInViewport() || this.el.scrollIntoView());
        break;
      case "ArrowDown":
        this.filteredItems.length && (e.preventDefault(), this.open ? this.shiftActiveItemIndex(1) : (this.open = true, this.ensureRecentSelectedItemIsActive()), this.comboboxInViewport() || this.el.scrollIntoView());
        break;
      case " ":
        !this.textInput.value.value && !e.defaultPrevented && (this.open || (this.open = true, this.shiftActiveItemIndex(1)), e.preventDefault());
        break;
      case "Home":
        if (!this.open)
          return;
        e.preventDefault(), this.updateActiveItemIndex(0), this.scrollToActiveOrSelectedItem(), this.comboboxInViewport() || this.el.scrollIntoView();
        break;
      case "End":
        if (!this.open)
          return;
        e.preventDefault(), this.updateActiveItemIndex(this.filteredItems.length - 1), this.scrollToActiveOrSelectedItem(), this.comboboxInViewport() || this.el.scrollIntoView();
        break;
      case "Escape":
        !this.clearDisabled && !this.open && this.clearValue(), this.open = false, e.preventDefault();
        break;
      case "Enter":
        if (this.open && this.activeItemIndex > -1) {
          const i3 = this.filteredItems[this.activeItemIndex];
          this.toggleSelection(i3, !i3.selected), e.preventDefault();
        } else this.activeChipIndex > -1 ? (this.removeActiveChip(), e.preventDefault()) : this.allowCustomValues && this.filterText ? (this.addCustomChip(this.filterText, true), e.preventDefault()) : e.defaultPrevented || $(this) && e.preventDefault();
        break;
      case "Delete":
      case "Backspace": {
        if (this.selectionDisplay === "single" || this.selectionDisplay === "fit" && this.selectedHiddenChipsCount > 0)
          return;
        this.activeChipIndex > -1 ? (e.preventDefault(), this.removeActiveChip()) : !this.filterText && this.isMulti() && (e.preventDefault(), this.removeLastChip());
        break;
      }
    }
  }
  onBeforeOpen() {
    this.scrollToActiveOrSelectedItem(), this.calciteComboboxBeforeOpen.emit();
  }
  onOpen() {
    this.scrollToActiveOrSelectedItem(true), this.calciteComboboxOpen.emit();
  }
  onBeforeClose() {
    this.calciteComboboxBeforeClose.emit();
  }
  onClose() {
    this.calciteComboboxClose.emit(), X(this);
  }
  async setMaxScrollerHeight() {
    const { listContainerEl: e, open: t2, referenceEl: i3 } = this;
    if (!e || !t2)
      return;
    await this.reposition(true);
    const s3 = this.getMaxScrollerHeight();
    e.style.maxBlockSize = s3 > 0 ? `${s3}px` : "", e.style.inlineSize = `${i3.clientWidth}px`, await this.reposition(true);
  }
  calciteChipCloseHandler(e) {
    this.open = false;
    const t2 = this.items.find((i3) => i3 === e);
    t2 && this.toggleSelection(t2, false), this.calciteComboboxChipClose.emit();
  }
  clickHandler(e) {
    if (this.readOnly)
      return;
    const t2 = e.composedPath();
    if (t2.some((i3) => i3.tagName === "CALCITE-CHIP")) {
      this.open = false, e.preventDefault();
      return;
    }
    if (t2.some((i3) => {
      var _a;
      return (_a = i3.classList) == null ? void 0 : _a.contains(U.button);
    })) {
      this.clearValue(), e.preventDefault();
      return;
    }
    this.open = !this.open, this.ensureRecentSelectedItemIsActive();
  }
  ensureRecentSelectedItemIsActive() {
    const { selectedItems: e } = this, t2 = e.length === 0 ? 0 : this.items.indexOf(e[e.length - 1]);
    this.updateActiveItemIndex(t2);
  }
  hideChip(e) {
    e.classList.add(d.chipInvisible);
  }
  showChip(e) {
    e.classList.remove(d.chipInvisible);
  }
  refreshChipDisplay({ chipEls: e, availableHorizontalChipElSpace: t2, chipContainerElGap: i3 }) {
    e.forEach((s3) => {
      if (!s3.selected)
        this.hideChip(s3);
      else {
        const l = bt(s3);
        if (l && l < t2) {
          t2 -= l + i3, this.showChip(s3);
          return;
        }
      }
      this.hideChip(s3);
    });
  }
  async refreshSelectionDisplay() {
    if (this.componentOnReady(), I2(this.selectionMode) || !this.textInput.value)
      return;
    const { allSelectedIndicatorChipEl: e, chipContainerEl: t2, selectionDisplay: i3, placeholder: s3, selectedIndicatorChipEl: l, textInput: { value: o2 } } = this, a = parseInt(getComputedStyle(t2).gap.replace("px", "")), n = bt(t2), { fontSize: h2, fontFamily: p2 } = getComputedStyle(o2), u = (pt(s3, `${h2} ${p2}`) || parseInt(t)) + a, w = bt(e), D2 = bt(l), G = Math.max(w, D2);
    if (this.setCompactSelectionDisplay({
      chipContainerElGap: a,
      chipContainerElWidth: n,
      inputWidth: u,
      largestSelectedIndicatorChipWidth: G
    }), i3 === "fit") {
      const A = Array.from(this.el.shadowRoot.querySelectorAll("calcite-chip")).filter((_) => _.closable), W2 = Math.round(n - ((this.selectedHiddenChipsCount > 0 ? D2 : 0) + a + u + a));
      this.refreshChipDisplay({ availableHorizontalChipElSpace: W2, chipContainerElGap: a, chipEls: A }), this.setVisibleAndHiddenChips(A);
    }
  }
  setFloatingEl(e) {
    this.floatingEl = e, ct(this);
  }
  setCompactSelectionDisplay({ chipContainerElGap: e, chipContainerElWidth: t2, inputWidth: i3, largestSelectedIndicatorChipWidth: s3 }) {
    const l = Math.round(s3 + e + i3);
    (!this.maxCompactBreakpoint || this.maxCompactBreakpoint < l) && (this.maxCompactBreakpoint = l), this.compactSelectionDisplay = t2 < this.maxCompactBreakpoint;
  }
  setContainerEl(e) {
    var _a;
    e && ((_a = this.resizeObserver) == null ? void 0 : _a.observe(e), this.listContainerEl = e, this.transitionEl = e);
  }
  setChipContainerEl(e) {
    var _a;
    e && ((_a = this.resizeObserver) == null ? void 0 : _a.observe(e)), this.chipContainerEl = e;
  }
  setReferenceEl(e) {
    this.referenceEl = e, ct(this);
  }
  setAllSelectedIndicatorChipEl(e) {
    this.allSelectedIndicatorChipEl = e;
  }
  setSelectedIndicatorChipEl(e) {
    this.selectedIndicatorChipEl = e;
  }
  setVisibleAndHiddenChips(e) {
    let t2 = 0;
    e.forEach((s3) => {
      s3.selected && !s3.classList.contains(d.chipInvisible) && t2++;
    }), t2 !== this.selectedVisibleChipsCount && (this.selectedVisibleChipsCount = t2);
    const i3 = this.getSelectedItems().length - t2;
    i3 !== this.selectedHiddenChipsCount && (this.selectedHiddenChipsCount = i3);
  }
  getMaxScrollerHeight() {
    const t2 = [...this.groupItems, ...this.getItems(true)].filter((o2) => !f(o2)), { maxItems: i3 } = this;
    let s3 = 0, l = 0;
    return t2.length >= i3 && t2.forEach((o2) => {
      if (s3 < i3) {
        const a = this.calculateScrollerHeight(o2);
        l += a, s3 += 1;
      }
    }), l;
  }
  calculateScrollerHeight(e) {
    if (!e)
      return 0;
    const t2 = e.getBoundingClientRect().height, i3 = `:scope > ${c}, :scope > ${i2}`, s3 = Array.from(e.querySelectorAll(i3)).reduce((l, o2) => l + o2.getBoundingClientRect().height, 0);
    return t2 - s3;
  }
  inputHandler(e) {
    const t2 = e.target.value;
    this.filterText = t2;
  }
  getItemsAndGroups() {
    return [...this.groupItems, ...this.items];
  }
  toggleSelection(e, t2) {
    !e || this.selectionMode === "single-persist" && e.selected && e.value === this.value && !t2 || (this.isMulti() ? (e.selected = t2, this.updateAncestors(e), this.selectedItems = this.getSelectedItems(), this.emitComboboxChange(), this.resetText(), this.filterItems("")) : (this.ignoreSelectedEventsFlag = true, this.items.forEach((i3) => i3.selected = i3 === e ? t2 : false), this.ignoreSelectedEventsFlag = false, this.selectedItems = this.getSelectedItems(), this.emitComboboxChange(), this.textInput.value && (this.textInput.value.value = O2(e)), this.open = false, this.updateActiveItemIndex(-1), this.resetText(), this.filterItems("")));
  }
  updateAncestors(e) {
    if (this.selectionMode !== "ancestors")
      return;
    const t2 = b2(e), i3 = f2(e);
    e.selected ? t2.forEach((s3) => {
      s3.selected = true;
    }) : (i3.forEach((s3) => s3.selected = false), [...t2].forEach((s3) => {
      h(s3) || (s3.selected = false);
    }));
  }
  getFilteredItems() {
    return this.filterText === "" ? this.items : this.items.filter((e) => !f(e));
  }
  updateItems() {
    this.items = this.getItems(), this.groupItems = this.getGroupItems(), this.data = this.getData(), this.groupData = this.getGroupData(), this.updateItemProps(), this.selectedItems = this.getSelectedItems(), this.filteredItems = this.getFilteredItems();
  }
  updateItemProps() {
    this.getItems(true).forEach((e) => {
      e.selectionMode = this.selectionMode, e.scale = this.scale;
    }), this.groupItems.forEach((e) => e.scale = this.scale), this.allowCustomValues || this.setMaxScrollerHeight(), this.groupItems.forEach((e, t2, i3) => {
      t2 === 0 && (e.afterEmptyGroup = false);
      const s3 = i3[t2 + 1];
      s3 && (s3.afterEmptyGroup = e.children.length === 0);
    });
  }
  getData() {
    return this.items.map((e) => ({
      description: e.description,
      filterDisabled: e.filterDisabled,
      label: e.heading,
      metadata: e.metadata,
      shortHeading: e.shortHeading,
      textLabel: e.textLabel,
      el: e
      // used for matching items to data
    }));
  }
  getGroupData() {
    return this.groupItems.map((e) => ({
      label: e.label,
      el: e
    }));
  }
  resetText() {
    this.textInput.value && (this.textInput.value.value = ""), this.filterText = "";
  }
  getItems(e = false) {
    return Array.from(this.el.querySelectorAll(c)).filter((i3) => e || !i3.disabled);
  }
  getGroupItems() {
    return Array.from(this.el.querySelectorAll(i2));
  }
  addCustomChip(e, t2) {
    const i3 = this.items.find((s3) => (s3.heading || s3.textLabel) === e);
    if (i3)
      this.toggleSelection(i3, true);
    else {
      const s3 = document.createElement(
        // TODO: [MIGRATION] If this is dynamically creating a web component, please read the docs: https://qawebgis.esri.com/arcgis-components/?path=/docs/lumina-jsx--docs#rendering-jsx-outside-the-component
        "calcite-combobox-item"
      );
      s3.value = e, s3.heading = e, this.el.prepend(s3), this.updateItems(), this.toggleSelection(s3, true), this.open = true, t2 && this.setFocus();
    }
  }
  removeActiveChip() {
    this.toggleSelection(this.selectedItems[this.activeChipIndex], false), this.setFocus();
  }
  removeLastChip() {
    this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false), this.setFocus();
  }
  previousChip() {
    const e = this.selectedItems.length - 1, t2 = this.activeChipIndex;
    this.activeChipIndex = t2 === -1 ? e : Math.max(t2 - 1, 0), this.updateActiveItemIndex(-1), this.focusChip();
  }
  nextChip() {
    const e = this.selectedItems.length - 1, t2 = this.activeChipIndex + 1;
    t2 > e ? (this.activeChipIndex = -1, this.setFocus()) : (this.activeChipIndex = t2, this.focusChip()), this.updateActiveItemIndex(-1);
  }
  focusChip() {
    var _a, _b;
    const e = (_a = this.selectedItems[this.activeChipIndex]) == null ? void 0 : _a.guid;
    (_b = e ? this.referenceEl.querySelector(`#${L}${e}`) : null) == null ? void 0 : _b.setFocus();
  }
  scrollToActiveOrSelectedItem(e = false) {
    var _a;
    const t2 = e && ((_a = this.selectedItems) == null ? void 0 : _a.length) ? this.selectedItems[0] : this.filteredItems[this.activeItemIndex];
    t2 && t2.scrollIntoView({ block: "nearest" });
  }
  shiftActiveItemIndex(e) {
    const { length: t2 } = this.filteredItems, i3 = (this.activeItemIndex + t2 + e) % t2;
    this.updateActiveItemIndex(i3), this.scrollToActiveOrSelectedItem();
  }
  updateActiveItemIndex(e) {
    this.activeItemIndex = e;
    let t2 = null;
    this.filteredItems.forEach((i3, s3) => {
      s3 === e ? (i3.active = true, t2 = `${z}${i3.guid}`) : i3.active = false;
    }), this.activeDescendant = t2, this.activeItemIndex > -1 && (this.activeChipIndex = -1);
  }
  isAllSelected() {
    return this.getItems().length === this.getSelectedItems().length;
  }
  isMulti() {
    return !I2(this.selectionMode);
  }
  comboboxFocusHandler() {
    var _a;
    this.disabled || ((_a = this.textInput.value) == null ? void 0 : _a.focus());
  }
  // #endregion
  // #region Rendering
  renderChips() {
    const { activeChipIndex: e, readOnly: t2, scale: i3, selectionMode: s3, messages: l } = this;
    return this.selectedItems.map((o2, a) => {
      const n = {
        [d.chip]: true
      }, h2 = [...b2(o2)].reverse(), p2 = O2(o2), I3 = [...h2, o2].map((w) => O2(w)), u = s3 !== "ancestors" ? p2 : I3.join(" / ");
      return keyed(p2, html`<calcite-chip .appearance=${t2 ? "outline" : "solid"} class=${safeClassMap(n)} .closable=${!t2} data-test-id=${`chip-${a}`} .icon=${o2.icon} .iconFlipRtl=${o2.iconFlipRtl} id=${(o2.guid ? `${L}${o2.guid}` : null) ?? nothing} .label=${u} .messageOverrides=${{ dismissLabel: l.removeTag }} @focusin=${() => this.activeChipIndex = a} @calciteChipClose=${() => this.calciteChipCloseHandler(o2)} .scale=${i3} .selected=${o2.selected} .tabIndex=${e === a ? 0 : -1} title=${u ?? nothing} .value=${o2.value}>${u}</calcite-chip>`);
    });
  }
  renderAllSelectedIndicatorChip() {
    const { compactSelectionDisplay: e, scale: t2, selectedVisibleChipsCount: i3, setAllSelectedIndicatorChipEl: s3 } = this, l = this.messages.allSelected;
    return html`<calcite-chip class=${safeClassMap({
      chip: true,
      [d.chipInvisible]: !(this.isAllSelected() && !i3 && !e)
    })} .label=${l} .scale=${t2} title=${l ?? nothing} value ${ref(s3)}>${l}</calcite-chip>`;
  }
  renderAllSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay: e, scale: t2, selectedVisibleChipsCount: i3 } = this, s3 = this.messages.all || "All";
    return html`<calcite-chip class=${safeClassMap({
      chip: true,
      [d.chipInvisible]: !(this.isAllSelected() && !i3 && e)
    })} .label=${s3} .scale=${t2} title=${s3} value>${s3}</calcite-chip>`;
  }
  renderSelectedIndicatorChip() {
    const { compactSelectionDisplay: e, selectionDisplay: t2, getSelectedItems: i3, scale: s3, selectedHiddenChipsCount: l, selectedVisibleChipsCount: o2, setSelectedIndicatorChipEl: a } = this;
    let n, h2;
    if (e)
      n = true;
    else if (t2 === "single") {
      const p2 = i3().length;
      this.isAllSelected() ? n = true : p2 > 0 ? n = false : n = true, h2 = `${p2} ${this.messages.selected}`;
    } else t2 === "fit" && (n = !!(this.isAllSelected() && o2 === 0 || l === 0), h2 = o2 > 0 ? `+${l}` : `${l} ${this.messages.selected}`);
    return html`<calcite-chip class=${safeClassMap({
      chip: true,
      [d.chipInvisible]: n
    })} .label=${h2} .scale=${s3} title=${h2 ?? nothing} value ${ref(a)}>${h2}</calcite-chip>`;
  }
  renderSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay: e, selectionDisplay: t2, getSelectedItems: i3, scale: s3, selectedHiddenChipsCount: l } = this;
    let o2, a;
    if (e) {
      const n = i3().length;
      this.isAllSelected() ? o2 = true : t2 === "fit" ? (o2 = !(l > 0), a = `${l || 0}`) : t2 === "single" && (o2 = !(n > 0), a = `${n}`);
    } else
      o2 = true;
    return html`<calcite-chip class=${safeClassMap({
      chip: true,
      [d.chipInvisible]: o2
    })} .label=${a} .scale=${s3} title=${a ?? nothing} value>${a}</calcite-chip>`;
  }
  renderInput() {
    const { guid: e, disabled: t2, placeholder: i3, selectionMode: s3, selectedItems: l, open: o2 } = this, a = I2(s3), n = l[0], h2 = !o2 && a && !!n && !this.filterText;
    return html`<span class=${safeClassMap({
      "input-wrap": true,
      "input-wrap--single": a
    })}>${h2 && keyed("label", html`<span class=${safeClassMap({
      label: true,
      "label--icon": !!(n == null ? void 0 : n.icon)
    })}>${O2(n)}</span>`) || ""}${keyed("input", html`<input aria-activedescendant=${this.activeDescendant ?? nothing} aria-controls=${`${y2}${e}`} aria-errormessage=${m4.validationMessage} aria-owns=${`${y2}${e}`} aria-autocomplete=list .ariaExpanded=${o2} aria-haspopup=listbox .ariaInvalid=${this.status === "invalid"} .ariaLabel=${I(this)} class=${safeClassMap({
      [d.input]: true,
      "input--single": true,
      [d.inputHidden]: h2,
      "input--icon": this.showingInlineIcon && !!this.placeholderIcon
    })} data-test-id=input .disabled=${t2} .id=${`${B2}${e}`} @focus=${this.comboboxFocusHandler} @input=${this.inputHandler} placeholder=${i3 ?? nothing} .readOnly=${this.readOnly} role=combobox .tabIndex=${this.activeChipIndex === -1 ? 0 : -1} type=text .value=${live(this.filterText ?? "")} ${ref(this.textInput)}>`)}</span>`;
  }
  renderListBoxOptions() {
    return this.filteredItems.map((e) => html`<li .ariaLabel=${e.label} .ariaSelected=${e.selected} id=${(e.guid ? `${z}${e.guid}` : null) ?? nothing} role=option tabindex=-1>${e.heading || e.textLabel}</li>`);
  }
  renderFloatingUIContainer() {
    const { setFloatingEl: e, setContainerEl: t2, open: i3 } = this, s3 = {
      [d.listContainer]: true,
      [rt.animation]: true,
      [rt.animationActive]: i3
    };
    return html`<div aria-hidden=true class=${safeClassMap(d.floatingUIContainer)} ${ref(e)}><div class=${safeClassMap(s3)} ${ref(t2)}><ul class=${safeClassMap({ list: true, "list--hide": !i3 })}><slot></slot></ul></div></div>`;
  }
  renderSelectedOrPlaceholderIcon() {
    const { open: e, placeholderIcon: t2, placeholderIconFlipRtl: i3, selectedItems: s3 } = this, l = s3[0], o2 = l == null ? void 0 : l.icon, a = t2 && (e || !l);
    return this.showingInlineIcon && keyed("selected-placeholder-icon", html`<span class="icon-start"><calcite-icon class=${safeClassMap({
      [d.selectedIcon]: !a,
      [d.placeholderIcon]: a
    })} .flipRtl=${a ? i3 : l.iconFlipRtl} .icon=${a ? t2 : o2} .scale=${o(this.scale)}></calcite-icon></span>`) || "";
  }
  renderChevronIcon() {
    const { open: e } = this;
    return keyed("chevron", html`<span class="icon-end"><calcite-icon class=${safeClassMap(d.icon)} .icon=${e ? "chevron-up" : "chevron-down"} .scale=${o(this.scale)}></calcite-icon></span>`);
  }
  render() {
    var _a;
    const { selectionDisplay: e, guid: t2, label: i3, open: s3, readOnly: l } = this, o2 = I2(this.selectionMode), a = e === "all", n = e === "single", h2 = !o2 && e === "fit", p2 = !this.clearDisabled && ((_a = this.value) == null ? void 0 : _a.length) > 0;
    return p({ disabled: this.disabled, children: html`<div aria-live=polite class=${safeClassMap({
      [d.wrapper]: true,
      [d.wrapperSingle]: o2 || !this.selectedItems.length,
      [d.wrapperActive]: s3
    })} @click=${this.clickHandler} @keydown=${this.keyDownHandler} ${ref(this.setReferenceEl)}>${this.renderSelectedOrPlaceholderIcon()}${keyed("grid", html`<div class=${safeClassMap({
      "grid-input": true,
      [d.selectionDisplayFit]: h2,
      [d.selectionDisplaySingle]: n
    })} ${ref(this.setChipContainerEl)}>${!o2 && !n && this.renderChips() || ""}${!o2 && !a && [
      this.renderSelectedIndicatorChip(),
      this.renderSelectedIndicatorChipCompact(),
      this.renderAllSelectedIndicatorChip(),
      this.renderAllSelectedIndicatorChipCompact()
    ] || ""}<label class=${safeClassMap(d.screenReadersOnly)} .htmlFor=${`${B2}${t2}`} .id=${`${R}${t2}`}>${i3}</label>${this.renderInput()}</div>`)}${!l && p2 ? keyed("close-button", Se({ disabled: this.disabled, label: this.messages.clear, scale: this.scale })) : null}${!l && this.renderChevronIcon() || ""}</div><ul aria-labelledby=${`${R}${t2}`} aria-multiselectable=true class=${safeClassMap(d.screenReadersOnly)} .id=${`${y2}${t2}`} role=listbox tabindex=-1>${this.renderListBoxOptions()}</ul>${this.renderFloatingUIContainer()}${B({ component: this })}${this.validationMessage && this.status === "invalid" ? m3({ icon: this.validationIcon, id: m4.validationMessage, message: this.validationMessage, scale: this.scale, status: this.status }) : null}` });
  }
};
_De.properties = { activeChipIndex: 16, activeDescendant: 16, activeItemIndex: 16, compactSelectionDisplay: 16, selectedHiddenChipsCount: 16, selectedVisibleChipsCount: 16, allowCustomValues: 7, clearDisabled: 7, disabled: 7, filterText: 3, filterProps: 0, filteredItems: 0, flipPlacements: 0, form: 3, label: 1, maxItems: 11, messageOverrides: 0, name: 3, open: 7, overlayPositioning: 3, placeholder: 1, placeholderIcon: 3, placeholderIconFlipRtl: 7, readOnly: 7, required: 7, scale: 3, selectedItems: 0, selectionDisplay: 3, selectionMode: 3, status: 3, validationIcon: [3, { converter: stringOrBoolean }], validationMessage: 1, validity: 0, value: 1 };
_De.styles = ke;
var De = _De;
S("calcite-combobox", De);
export {
  De as Combobox
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-combobox/customElement.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.1.0 *)
*/
//# sourceMappingURL=customElement-MA47RZAU.js.map
