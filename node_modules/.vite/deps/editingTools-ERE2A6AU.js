import {
  d as d4
} from "./chunk-ECJ6LH6K.js";
import {
  r as r4
} from "./chunk-ATPQ4DKO.js";
import {
  m as m2
} from "./chunk-OF4NE3Q4.js";
import {
  E as E4,
  F,
  I as I3,
  M as M2,
  S2 as S3,
  V,
  h as h4,
  n as n4,
  p as p2,
  w
} from "./chunk-PZCZWILS.js";
import {
  E as E2,
  E2 as E3,
  e as e3,
  p
} from "./chunk-AARMY6EJ.js";
import "./chunk-PSCLWEFE.js";
import "./chunk-FNUMBJBP.js";
import {
  S as S2,
  s as s4
} from "./chunk-F4533UJ7.js";
import "./chunk-4NO34UCA.js";
import "./chunk-OSI4PMXO.js";
import "./chunk-3CDYGNLL.js";
import "./chunk-UP7QX3XX.js";
import "./chunk-XDIFNUKU.js";
import "./chunk-G577QQ6E.js";
import "./chunk-3O7K7CQL.js";
import "./chunk-3T6XYN2R.js";
import "./chunk-6IYG6BTI.js";
import {
  d as d5,
  h as h3
} from "./chunk-TWM4KR2X.js";
import "./chunk-4NUJE7UV.js";
import "./chunk-L4C25LTQ.js";
import "./chunk-TOKEYLZA.js";
import "./chunk-EIS6L6FC.js";
import {
  I as I2
} from "./chunk-VBE5VFL5.js";
import "./chunk-LULXSZFE.js";
import "./chunk-QU4L2TYC.js";
import "./chunk-QBDJCOUK.js";
import "./chunk-AD3QCYSE.js";
import "./chunk-IDAFLWQ6.js";
import {
  W,
  Z
} from "./chunk-QQGGEN5E.js";
import "./chunk-QEAQVAMR.js";
import "./chunk-OITDZHA4.js";
import "./chunk-ZGGC3KHK.js";
import "./chunk-I7JIAECC.js";
import "./chunk-ZXD5CGBL.js";
import {
  E
} from "./chunk-23WGP47N.js";
import "./chunk-V4U366R3.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-HX6OAJGI.js";
import "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import "./chunk-WWF2HQCF.js";
import "./chunk-VGMYHNBL.js";
import "./chunk-MRUZJ4BJ.js";
import "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-EKEKHPBG.js";
import "./chunk-UW4LHCKY.js";
import "./chunk-JJFGBM54.js";
import "./chunk-QY6LLTZM.js";
import {
  n as n3
} from "./chunk-U2GWJJ3P.js";
import "./chunk-K455QPXF.js";
import {
  t
} from "./chunk-QSDQ7XKD.js";
import "./chunk-HUXEKERJ.js";
import "./chunk-PJIFP7OJ.js";
import "./chunk-NGATSB6R.js";
import "./chunk-GTVVYAXM.js";
import "./chunk-XOXXDYBM.js";
import "./chunk-I6H2R562.js";
import {
  l
} from "./chunk-6WERKJTM.js";
import {
  _,
  n as n2
} from "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import {
  e as e2,
  o,
  v
} from "./chunk-4ACM2XXN.js";
import {
  A,
  I,
  P as P2,
  c,
  g as g2,
  q,
  r as r3,
  s as s3,
  u as u3
} from "./chunk-ON7GWFUW.js";
import "./chunk-VPRLLNNO.js";
import "./chunk-64ZXKK6G.js";
import "./chunk-UCM2ZG62.js";
import "./chunk-4LJ2OSKC.js";
import "./chunk-FLGJHA67.js";
import "./chunk-FJTIPVNU.js";
import "./chunk-SXKP4T6J.js";
import "./chunk-SB6LU3VH.js";
import "./chunk-B7E2AREE.js";
import "./chunk-MALSDV7D.js";
import "./chunk-XAZEJYKE.js";
import "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-GPMU6IW4.js";
import "./chunk-4JVIG75S.js";
import "./chunk-HZLSEOMW.js";
import "./chunk-L2AVI4MN.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import {
  O,
  Q as Q2
} from "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-BBPRJCMB.js";
import "./chunk-7VGCZZPH.js";
import "./chunk-PMTDIWAP.js";
import "./chunk-ACBQ6NOA.js";
import "./chunk-QW7P5D76.js";
import "./chunk-T52X5K2I.js";
import "./chunk-5E5JYM5A.js";
import {
  h as h2
} from "./chunk-M4LYLB6W.js";
import "./chunk-I6AFDEJM.js";
import "./chunk-SVWZAOD7.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import "./chunk-MILRZFWI.js";
import "./chunk-RPPIM555.js";
import "./chunk-4FQDWSFN.js";
import "./chunk-JOQ2ZFQV.js";
import "./chunk-3UBDE4PK.js";
import "./chunk-LILYILCM.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-OJGPUKVG.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-B6ORYDBK.js";
import {
  b
} from "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import {
  d4 as d3
} from "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import {
  y
} from "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import {
  n
} from "./chunk-D3P3E2RE.js";
import {
  P,
  d
} from "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import {
  S
} from "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import {
  h
} from "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-QRM4IRDF.js";
import "./chunk-CAN2PXNV.js";
import "./chunk-BDOGPNOY.js";
import {
  u as u2
} from "./chunk-552ZCNNH.js";
import {
  j as j2
} from "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import {
  j2 as j
} from "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import {
  N,
  Q,
  d as d2,
  s as s2
} from "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import {
  M,
  s
} from "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import {
  g,
  m,
  r as r2
} from "./chunk-VTWDBFQT.js";
import {
  a2 as a
} from "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import {
  e2 as e,
  u
} from "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import {
  r
} from "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/views/2d/interactive/editingTools/draw/symbols.js
var t2 = new d3({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", effects: [{ type: "CIMGeometricEffectDashes", dashTemplate: [3.75, 3.75], lineDashEnding: "HalfPattern", controlPointEnding: "NoConstraint" }], enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: 1.6, color: [255, 255, 255, 255] }, { type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: 2, color: [0, 0, 0, 255] }] } } });
var l2 = new y({ style: "circle", size: 6, color: [127, 127, 127, 1], outline: { color: [50, 50, 50], width: 1 } });
var i = new y({ style: "circle", size: 6, color: [255, 127, 0, 1], outline: { color: [50, 50, 50], width: 1 } });

// node_modules/@arcgis/core/views/2d/interactive/editingTools/draw/DrawGraphicTool2D.js
var E5 = class extends I3 {
  constructor(e4) {
    super(e4), this._visualElementGraphics = { regularVertices: null, activeVertex: null, activeEdge: null }, this.activeFillSymbol = null, this.type = "draw-2d", this._visualElementSymbols = { outline: e4.activeLineSymbol ?? t2, regularVertices: e4.regularVerticesSymbol ?? l2, activeVertex: e4.activeVertexSymbol ?? i, fill: e4.activeFillSymbol }, e4.activeVertexSymbol || this.addHandles(d(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.effectiveTheme) == null ? void 0 : _b.accentColor;
    }, (e5) => {
      var _a;
      if (!e5) return;
      const t4 = this._visualElementSymbols.activeVertex.clone().set({ color: e5 });
      (_a = this._visualElementGraphics.activeVertex) == null ? void 0 : _a.set("symbol", t4), this._visualElementSymbols = { ...this._visualElementSymbols, activeVertex: t4 };
    }, P));
  }
  normalizeCtorArgs(e4) {
    const t4 = { ...e4 };
    return delete t4.activeFillSymbol, delete t4.activeVertexSymbol, delete t4.regularVerticesSymbol, delete t4.activeLineSymbol, t4;
  }
  initializeGraphic(e4) {
    return null != this._visualElementSymbols.fill && (e4.symbol = this._visualElementSymbols.fill), this.internalGraphicsLayer.graphics.sort(G), e();
  }
  makeDrawOperation() {
    const { defaultZ: e4, hasZ: t4, view: i2 } = this;
    return this._createOrUpdateGraphic(null), new F({ view: i2, manipulators: this.manipulators, geometryType: M2(this.geometryType), drawingMode: this.mode, hasZ: t4, defaultZ: e4, snapToSceneEnabled: this.snapToScene, drawSurface: new h4(i2, t4, e4), hasM: false, snappingManager: this.snappingManager, snappingVisualizer: new d4(this.internalGraphicsLayer), graphic: this.graphic, cursor: this.cursor, constraintsEnabled: true });
  }
  onActiveVertexChanged(e4) {
    if ("point" === this.geometryType) return e();
    const [s7, a2] = e4, l3 = new j({ x: s7, y: a2, spatialReference: this.view.spatialReference });
    return null != this._visualElementGraphics.activeVertex ? (this._visualElementGraphics.activeVertex.geometry = l3, e()) : (this._visualElementGraphics.activeVertex = new b({ geometry: l3, symbol: this._visualElementSymbols.activeVertex, attributes: { displayOrder: 2 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.activeVertex), this.internalGraphicsLayer.graphics.sort(G), e(() => {
      null != this._visualElementGraphics.activeVertex && (this.internalGraphicsLayer.remove(this._visualElementGraphics.activeVertex), this._visualElementGraphics.activeVertex = u(this._visualElementGraphics.activeVertex));
    }));
  }
  onCursorEdgeChanged(e4) {
    return null != this._visualElementGraphics.activeEdge ? (this._visualElementGraphics.activeEdge.geometry = e4, e()) : (this._visualElementGraphics.activeEdge = new b({ geometry: e4, symbol: this._visualElementSymbols.outline, attributes: { displayOrder: 0 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.activeEdge), this.internalGraphicsLayer.graphics.sort(G), e(() => {
      null != this._visualElementGraphics.activeEdge && (this.internalGraphicsLayer.remove(this._visualElementGraphics.activeEdge), this._visualElementGraphics.activeEdge = u(this._visualElementGraphics.activeEdge));
    }));
  }
  onRegularVerticesChanged(e4) {
    const s7 = new u2({ points: e4, spatialReference: this.view.spatialReference });
    return null != this._visualElementGraphics.regularVertices ? (this._visualElementGraphics.regularVertices.geometry = s7, e()) : (this._visualElementGraphics.regularVertices = new b({ geometry: s7, symbol: this._visualElementSymbols.regularVertices, attributes: { displayOrder: 1 } }), this.internalGraphicsLayer.add(this._visualElementGraphics.regularVertices), this.internalGraphicsLayer.graphics.sort(G), e(() => {
      null != this._visualElementGraphics.regularVertices && (this.internalGraphicsLayer.remove(this._visualElementGraphics.regularVertices), this._visualElementGraphics.regularVertices = u(this._visualElementGraphics.regularVertices));
    }));
  }
};
function G(e4, t4) {
  var _a, _b;
  return (((_a = e4.attributes) == null ? void 0 : _a.displayOrder) ?? -1 / 0) - (((_b = t4.attributes) == null ? void 0 : _b.displayOrder) ?? -1 / 0);
}
r([m()], E5.prototype, "activeFillSymbol", void 0), r([m({ readOnly: true })], E5.prototype, "type", void 0), r([m({ constructOnly: true, nonNullable: true })], E5.prototype, "view", void 0), E5 = r([a("esri.views.2d.interactive.editingTools.draw.DrawGraphicTool2D")], E5);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/Manipulation.js
var r5 = class {
  get hovering() {
    return this.someManipulator((r7) => r7.hovering);
  }
  get grabbing() {
    return this.someManipulator((r7) => r7.grabbing);
  }
  get dragging() {
    return this.someManipulator((r7) => r7.dragging);
  }
  hasManipulator(r7) {
    return this.someManipulator((t4) => t4 === r7);
  }
  someManipulator(r7) {
    let t4 = false;
    return this.forEachManipulator((a2) => {
      !t4 && r7(a2) && (t4 = true);
    }), t4;
  }
};
var t3;
!function(r7) {
  r7[r7.TRANSLATE_XY = 0] = "TRANSLATE_XY", r7[r7.SCALE = 1] = "SCALE", r7[r7.ROTATE = 2] = "ROTATE";
}(t3 || (t3 = {}));

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/DragManipulation.js
var s5 = class extends r5 {
  constructor(t4) {
    super(), this._view = t4.view, this._tool = t4.tool, this._graphic = t4.graphic, this._manipulator = this._createManipulator(), this.forEachManipulator((t5) => this._tool.manipulators.add(t5));
  }
  destroy() {
    this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null, this._graphic = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.TRANSLATE_XY);
  }
  createDragPipeline(t4, i2) {
    let o2 = null, s7 = null, l3 = 0, p3 = 0, c2 = 0;
    const { offsetX: m3, offsetY: h5, size: u5 } = s4(this._graphic.symbol);
    return p2(this._manipulator, (r7, n7) => {
      n7.next((i3) => {
        if ("start" === i3.action) {
          const i4 = t4();
          o2 = i4.editGeometryOperations, s7 = i4.constraints;
        }
        return i3;
      }).next(E4(this._view)).next((t5) => {
        const { x: r8, y: a2, z: n8 } = t5.mapEnd;
        if (s7 && (r8 + m3 < s7.xmin || a2 + h5 - u5 < s7.ymin || r8 + m3 > s7.xmax || a2 + h5 - u5 > s7.ymax)) return t5;
        ("start" === t5.action || 0 === l3 && 0 === p3 && 0 === c2) && (l3 = t5.mapStart.x, p3 = t5.mapStart.y, c2 = t5.mapStart.z);
        const _2 = r8 - l3, f = a2 - p3, v3 = n8 - c2;
        l3 = r8, p3 = a2, c2 = n8;
        const x = "start" === t5.action ? E2.NEW_STEP : E2.ACCUMULATE_STEPS, E7 = o2.move(_2, f, v3, x);
        return i2(t5, E7), t5;
      });
    });
  }
  _createManipulator() {
    const t4 = this._view, i2 = this._graphic;
    return new S2({ view: t4, graphic: i2, selectable: true, cursor: "move" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/ControlPointsTransformTool.js
var P3 = { up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", toggleOpacity: "t", shift: "Shift", primaryKey: t };
var v2 = 1;
var S4 = 10;
var k = new h("#009af2");
var b2 = class extends n4 {
  constructor(t4) {
    super(t4), this._isOpacityToggled = false, this._isModifierActive = false, this._factor = 1, this._initialControlPoints = null, this._graphicsLayer = new h2({ internal: true, listMode: "hide", visible: false, effect: "drop-shadow(0px, 0px, 3px)" }), this._undoStack = [], this._redoStack = [], this._sharedUndoStack = [], this._sharedRedoStack = [], this._highlightHandle = null, this.activeHandle = 0, this.type = "reshape";
  }
  initialize() {
    this._initialize();
  }
  destroy() {
    const { map: t4 } = this.view;
    this._controlPointManipulations.forEach((t5) => t5.destroy()), this._controlPointEditGeometryOperations.forEach((t5) => t5.destroy()), t4.removeMany([this._graphicsLayer]), this._graphicsLayer.removeAll(), this._graphicsLayer = u(this._graphicsLayer), this._georeference = null, this._controlPointGraphics = null, this._controlPointManipulations = null, this._graphicsLayer = null, this._controlPointEditGeometryOperations = null, this._undoStack = null, this._redoStack = null, this._initialControlPoints = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  get _hasValidSpatialReference() {
    return N(this.view.spatialReference);
  }
  onActivate() {
    this.visible = true;
  }
  onDeactivate() {
    this.visible = false;
  }
  onShow() {
    this._graphicsLayer.visible = true;
  }
  onHide() {
    this._graphicsLayer.visible = false;
  }
  canUndo() {
    const t4 = this._undoStack[this._undoStack.length - 1];
    return null != t4 && this._controlPointEditGeometryOperations[t4].canUndo;
  }
  canRedo() {
    const t4 = this._redoStack[this._redoStack.length - 1];
    return null != t4 && this._controlPointEditGeometryOperations[t4].canRedo;
  }
  undo() {
    if (this._undoStack.length > 0) {
      const t4 = this._undoStack.pop();
      this._controlPointEditGeometryOperations[t4].undo(), this.updateGraphics(), this._redoStack.push(t4);
    }
  }
  redo() {
    if (this._redoStack.length > 0) {
      const t4 = this._redoStack.pop();
      this._controlPointEditGeometryOperations[t4].redo(), this.updateGraphics(), this._undoStack.push(t4);
    }
  }
  refresh() {
    const { mediaElement: t4 } = this;
    if (null == t4.georeference) return;
    const e4 = t4.georeference;
    "control-points" === e4.type && null != e4.coords && (this._georeference = e4, this._georeference.controlPoints.forEach(({ mapPoint: t5 }, e5) => {
      const i2 = this._controlPointEditGeometryOperations[e5], o2 = i2.data.components[0].vertices[0];
      i2.setVertexPosition(o2, i2.data.coordinateHelper.pointToVector(t5));
    }), this.updateGraphics());
  }
  reset() {
    this._georeference.controlPoints = this._initialControlPoints, this.refresh(), this._sharedUndoStack.length = 0, this._sharedRedoStack.length = 0;
  }
  updateGraphics() {
    const t4 = this._georeference, e4 = t4.controlPoints, i2 = e4[0].mapPoint.spatialReference, o2 = this._hasValidSpatialReference;
    this._georeference.controlPoints = this._controlPointEditGeometryOperations.map((r7, s7) => {
      const n7 = r7.data.geometry;
      return this._controlPointGraphics[s7].geometry = n7, { mapPoint: O(n7, i2), sourcePoint: o2 ? e4[s7].sourcePoint : t4.toSource(n7) };
    });
  }
  updateActiveHandle(t4) {
    if (this.activeHandle === t4) return;
    const e4 = this._controlPointGraphics[this.activeHandle].symbol.clone();
    I2(e4, this.view.effectiveTheme.accentColor), this._controlPointGraphics[this.activeHandle].symbol = e4;
    const i2 = this._controlPointGraphics[t4].symbol.clone();
    I2(i2, k), this._controlPointGraphics[t4].symbol = i2, this.activeHandle = t4, this.view.surface === document.activeElement && this.highlightActiveHandle();
  }
  async highlightActiveHandle() {
    this.removeHighlightActiveHandle();
    const t4 = await this.view.whenLayerView(this._graphicsLayer);
    this._highlightHandle = t4.highlight(this._controlPointGraphics[this.activeHandle]);
  }
  removeHighlightActiveHandle() {
    this._highlightHandle && this._highlightHandle.remove();
  }
  setSharedUndoStack(t4) {
    this._sharedUndoStack = t4;
  }
  setSharedRedoStack(t4) {
    this._sharedRedoStack = t4;
  }
  async _initialize() {
    const { view: t4, mediaElement: e4 } = this;
    if (null == e4.georeference) return;
    const o2 = e4.georeference;
    "control-points" === o2.type && null != o2.coords && (this._georeference = o2, this._initialControlPoints = this._georeference.controlPoints, t4.map.addMany([this._graphicsLayer]), t4.focus(), this.visible = false, this.finishToolCreation(), await this._loadProjectionEngine(), this._controlPointEditGeometryOperations = this._georeference.controlPoints.map(({ mapPoint: e5 }) => E3.fromGeometry(O(e5, t4.spatialReference), l.Local)), this._controlPointGraphics = this._controlPointEditGeometryOperations.map((t5, e5) => new b({ symbol: new d3({ data: { type: "CIMSymbolReference", symbol: { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, colorLocked: true, anchorPoint: { x: 0, y: -15.75 }, anchorPointUnits: "Absolute", dominantSizeAxis3D: "Y", size: 9, billboardMode3D: "FaceNearPlane", frame: { xmin: 0, ymin: 0, xmax: 84.3, ymax: 84.3 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[83.2, 32.5], [84.3, 40.7], [83.8, 48.9], [81.7, 56.9], [78.1, 64.3], [73, 70.9], [66.9, 76.4], [59.7, 80.5], [51.9, 83.2], [43.7, 84.3], [35.4, 83.8], [27.4, 81.7], [20, 78], [13.4, 73], [7.9, 66.8], [3.8, 59.7], [1.1, 51.9], [0, 43.7], [0.5, 35.4], [2.6, 27.4], [6.3, 20], [11.3, 13.4], [17.5, 7.9], [24.7, 3.8], [32.5, 1.1], [39.8, 0.1], [47.1, 0.3], [54.3, 1.8], [61.1, 4.5], [67.4, 8.4], [72.9, 13.3], [77.4, 19.1], [80.9, 25.5], [83.2, 32.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: [255, 255, 255, 255] }] } }], scaleSymbolsProportionally: true, respectFrame: true, clippingPath: { type: "CIMClippingPath", clippingType: "Intersect", path: { rings: [[[0, 0], [84.3, 0], [84.3, 84.3], [0, 84.3], [0, 0]]] } }, rotation: 0 }, { type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: -11.25 }, anchorPointUnits: "Absolute", dominantSizeAxis3D: "Y", size: 22.5, billboardMode3D: "FaceNearPlane", frame: { xmin: 0, ymin: 0, xmax: 197.7, ymax: 294.7 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[98.9, 0], [119.4, 23.2], [139.4, 49.3], [156.8, 75.2], [171.2, 100.8], [182.4, 125.3], [190.6, 148.8], [195.7, 171.4], [197.7, 192.9], [197.7, 195.8], [197.7, 200.3], [197.6, 202.5], [197.5, 204.8], [197.3, 207.1], [197, 209.4], [196.7, 211.7], [196.4, 214.1], [196, 216.4], [195.5, 218.7], [195, 221.1], [194.4, 223.4], [193.7, 225.8], [193, 228.1], [192.2, 230.5], [191.4, 232.8], [190.5, 235.1], [189.5, 237.5], [188.5, 239.7], [187.4, 242], [186.2, 244.3], [185, 246.5], [183.7, 248.7], [182.4, 250.9], [181, 253.1], [179.5, 255.2], [178, 257.3], [176.4, 259.4], [174.7, 261.4], [173.1, 263.3], [171.3, 265.3], [169.5, 267.2], [167.7, 269], [165.8, 270.8], [163.9, 272.5], [161.9, 274.2], [159.9, 275.8], [157.8, 277.4], [155.7, 278.9], [153.6, 280.4], [151.4, 281.7], [149.2, 283.1], [147, 284.4], [144.8, 285.6], [142.5, 286.7], [140.3, 287.8], [138, 288.8], [135.7, 289.8], [133.4, 290.7], [131, 291.5], [128.7, 292.3], [126.4, 293], [124, 293.6], [121.7, 294.2], [119.4, 294.7], [117, 295.2], [114.7, 295.6], [112.4, 296], [110.1, 296.3], [107.8, 296.5], [105.5, 296.7], [103.3, 296.8], [101.1, 296.9], [98.8, 296.9], [83.1, 295.7], [67.8, 292], [53.3, 285.9], [39.9, 277.5], [28.1, 267.2], [18, 255.1], [10, 241.5], [4.2, 226.9], [0.9, 211.5], [0, 195.8], [0.1, 192.9], [2.1, 171.4], [7.2, 148.8], [15.4, 125.3], [26.6, 100.8], [41, 75.2], [58.4, 49.3], [78.4, 23.2], [98.9, 0]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: e5 === this.activeHandle ? k.toArray() : this.view.effectiveTheme.accentColor.toArray() }] } }], scaleSymbolsProportionally: true, respectFrame: true, clippingPath: { type: "CIMClippingPath", clippingType: "Intersect", path: { rings: [[[0, 0], [197.7, 0], [197.7, 294.7], [0, 294.7], [0, 0]]] } }, rotation: 0 }], haloSize: 1, scaleX: 1, angleAlignment: "Display", angle: 0 } } }), geometry: t5.data.geometry })), this._graphicsLayer.graphics.addMany([...this._controlPointGraphics]), this._controlPointManipulations = this._controlPointGraphics.map((e5) => new s5({ tool: this, view: t4, graphic: e5 })), this.addHandles([...this._controlPointManipulations.map((t5, e5) => t5.createDragPipeline(this._getInfo.bind(this, e5), (t6, i2) => {
      "start" === t6.action && (this._undoStack.push(e5), this._redoStack = [], this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0), this.updateGraphics();
    })), d(() => this.view.scale, () => this.active ? this.updateGraphics() : null)]), this._controlPointManipulations.forEach((t5, e5) => {
      const i2 = (t6) => {
        this.addHandles([t6.events.on(["click", "grab-changed"], (t7) => this.updateActiveHandle(e5))]);
      };
      t5.forEachManipulator(i2);
    }), this.addHandles([t4.on("key-down", (i2) => {
      t4.activeTool === this && (i2.key !== P3.shift || i2.repeat || (this._isModifierActive = true, i2.stopPropagation()), i2.key !== P3.toggleOpacity || i2.repeat || (e4.opacity *= this._isOpacityToggled ? 2 : 0.5, this._isOpacityToggled = !this._isOpacityToggled, i2.stopPropagation()), i2.key !== P3.primaryKey || i2.repeat || (this._factor = S4, i2.stopPropagation()), this._isModifierActive && (i2.key === P3.up && (this._move(0, this._factor), i2.stopPropagation()), i2.key === P3.down && (this._move(0, -this._factor), i2.stopPropagation()), i2.key === P3.left && (this._move(-this._factor, 0), i2.stopPropagation()), i2.key === P3.right && (this._move(this._factor, 0), i2.stopPropagation())));
    }), t4.on("key-up", (e5) => {
      t4.activeTool === this && (e5.key === P3.shift && (this._isModifierActive = false, e5.stopPropagation()), e5.key === P3.primaryKey && (this._factor = v2, e5.stopPropagation()));
    })]));
  }
  async _loadProjectionEngine() {
    const t4 = this._georeference.controlPoints[0].mapPoint;
    return Q2(t4.spatialReference, this.view.spatialReference);
  }
  _getInfo(t4) {
    return { editGeometryOperations: this._controlPointEditGeometryOperations[t4], constraints: this._hasValidSpatialReference ? null : { xmin: 0, ymin: 0, xmax: this._georeference.width, ymax: this._georeference.height } };
  }
  _move(t4, e4) {
    const i2 = this._controlPointEditGeometryOperations[this.activeHandle].move(t4 * this.view.resolution, e4 * this.view.resolution, 0, E2.NEW_STEP);
    this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
};
r([m()], b2.prototype, "_hasValidSpatialReference", null), r([m()], b2.prototype, "activeHandle", void 0), r([m({ constructOnly: true, nonNullable: true })], b2.prototype, "mediaElement", void 0), r([m({ readOnly: true })], b2.prototype, "type", void 0), r([m({ constructOnly: true })], b2.prototype, "view", void 0), b2 = r([a("esri.views.2d.interactive.editingTools.ControlPointsTransformTool")], b2);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/utils.js
function n5(t4, e4) {
  "start" === t4.action ? e4.cursor = "grabbing" : e4.cursor = "grab";
}
var s6 = class {
  constructor() {
    this._lastDragEvent = null, this.next = new w(), this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t4) {
    if (this._enabled !== t4 && null != this._lastDragEvent) {
      const e4 = { ...this._lastDragEvent, action: "update" };
      t4 && this._adjustScaleFactors(e4), this.next.execute(e4);
    }
    this._enabled = t4;
  }
  createDragEventPipelineStep() {
    return this._lastDragEvent = null, (t4) => (this._lastDragEvent = "end" !== t4.action ? { ...t4 } : null, this._enabled && this._adjustScaleFactors(t4), t4);
  }
  _adjustScaleFactors(t4) {
    const e4 = 0 !== t4.direction[0] && 0 !== t4.direction[1] ? Math.max(Math.abs(t4.factor1), Math.abs(t4.factor2)) : 0 === t4.direction[0] ? Math.abs(t4.factor2) : Math.abs(t4.factor1);
    t4.factor1 = t4.factor1 < 0 ? -e4 : e4, t4.factor2 = t4.factor2 < 0 ? -e4 : e4;
  }
};
var r6 = class {
  constructor() {
    this._lastDragEvent = null, this.next = new w(), this._enabled = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(t4) {
    if (this._enabled !== t4 && null != this._lastDragEvent) {
      const e4 = { ...this._lastDragEvent, action: "update" };
      t4 && this._adjustRotateAngle(e4), this.next.execute(e4);
    }
    this._enabled = t4;
  }
  createDragEventPipelineStep() {
    return this._lastDragEvent = null, (t4) => (this._lastDragEvent = "end" !== t4.action ? { ...t4 } : null, this._enabled && this._adjustRotateAngle(t4), t4);
  }
  _adjustRotateAngle(a2) {
    const n7 = M(a2.rotateAngle);
    a2.rotateAngle = s(5 * Math.round(n7 / 5));
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/RotateManipulation.js
var u4 = class extends r5 {
  constructor(i2) {
    super(), this._handles = new r2(), this._originCache = n(), this._view = i2.view, this._tool = i2.tool, this._graphic = i2.graphic, this._snapRotation = i2.snapRotation, this._manipulator = this._createManipulator(), this._handles.add([this._manipulator.events.on("grab-changed", (t4) => n5(t4, this._manipulator))]), this.forEachManipulator((t4) => this._tool.manipulators.add(t4));
  }
  destroy() {
    this._handles.destroy(), this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._manipulator = null, this._snapRotation = null, this._graphic = null, this._handles = null, this._originCache = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.ROTATE);
  }
  createDragPipeline(t4, r7) {
    let e4 = null, a2 = null;
    return p2(this._manipulator, (o2, s7) => {
      s7.next((i2) => {
        if ("start" === i2.action) {
          o2.cursor = "grabbing";
          const i3 = t4();
          e4 = i3.plane, a2 = i3.editGeometryOperations;
        }
        return i2;
      }).next(E4(this._view)).next((t5) => ({ ...t5, rotateAngle: m2(t5.mapStart, t5.mapEnd, { x: e4.origin[0], y: e4.origin[1] }, true) })).next(this._snapRotation.createDragEventPipelineStep(), this._snapRotation.next).next((t5) => {
        const o3 = s3(this._originCache, e4.origin), n7 = "start" === t5.action ? E2.NEW_STEP : E2.ACCUMULATE_STEPS, s8 = a2.rotate(o3, t5.rotateAngle, n7, e3.REPLACE);
        return V(s8, e4), r7(t5, s8), t5;
      }).next((t5) => ("end" === t5.action && (o2.cursor = "grab"), t5));
    });
  }
  _createManipulator() {
    const t4 = this._view, i2 = this._graphic;
    return new S2({ view: t4, graphic: i2, selectable: true, cursor: "grab" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/manipulations/ScaleManipulation.js
var E6 = 10;
var S5 = 1e-6;
var y2 = 0.3;
function j3(t4) {
  const i2 = r3(t4.basis1), e4 = r3(t4.basis2);
  return y2 * Math.min(i2, e4);
}
var w2 = class extends r5 {
  constructor(i2) {
    super(), this._handles = new r2(), this._planeStart = W(), this._displayPlaneStart = W(), this._originCache = n(), this._axisCache = n2(), this._renderStartCache = n(), this._renderEndCache = n(), this._resizeOriginCache = n(), this._view = i2.view, this._tool = i2.tool, this._graphic = i2.graphic, this._direction = i2.direction, this._preserveAspectRatio = i2.preserveAspectRatio, this._manipulator = this._createManipulator(), this._handles.add([this._manipulator.events.on("grab-changed", (t4) => n5(t4, this._manipulator))]), this.forEachManipulator((t4) => this._tool.manipulators.add(t4));
  }
  destroy() {
    this._handles.destroy(), this.forEachManipulator((t4) => {
      this._tool.manipulators.remove(t4), t4.destroy();
    }), this._tool = null, this._view = null, this._graphic = null, this._manipulator = null, this._direction = null, this._handles = null, this._planeStart = null, this._displayPlaneStart = null, this._originCache = null, this._axisCache = null, this._renderStartCache = null, this._renderEndCache = null, this._resizeOriginCache = null, this._preserveAspectRatio = null;
  }
  forEachManipulator(t4) {
    t4(this._manipulator, t3.SCALE);
  }
  createDragPipeline(t4, r7) {
    let c2 = null, h5 = null, _2 = null, m3 = 0, d7 = null, g3 = null;
    const y3 = this._planeStart, w3 = this._displayPlaneStart, P4 = this._direction;
    return p2(this._manipulator, (f, M3) => {
      M3.next((i2) => {
        if ("start" === i2.action) {
          f.cursor = "grabbing";
          const i3 = t4();
          c2 = i3.plane, h5 = i3.displayPlane, _2 = i3.editGeometryOperations, m3 = E6 * this._view.resolution, Z(c2, y3), Z(h5, w3);
          const e4 = d2(_2.data.spatialReference);
          d7 = e4 ? e4.valid[1] - e4.valid[0] - 3 * E6 * this._view.resolution : null;
        }
        return i2;
      }).next(E4(this._view)).next((t5) => {
        const i2 = s3(this._renderStartCache, [t5.mapStart.x, t5.mapStart.y, 0]), e4 = s3(this._renderEndCache, [t5.mapEnd.x, t5.mapEnd.y, 0]), r8 = s3(this._resizeOriginCache, w3.origin);
        q(r8, r8, w3.basis1, -P4[0]), q(r8, r8, w3.basis2, -P4[1]), c(e4, e4, r8), c(i2, i2, r8);
        const c3 = 0 !== P4[0] && 0 !== P4[1], p3 = j3(w3), u5 = j3(h5) / p3, _3 = (t6, r9) => {
          if (0 === t6) return 1;
          let s7 = r3(r9), n7 = 0.5 * t6 * P2(r9, e4) / s7;
          const o2 = n7 < 0 ? -1 : 1;
          if (c3) {
            n7 += (s7 - 0.5 * t6 * P2(r9, i2) / s7) * o2 * u5;
          }
          const h6 = s7 < 1.5 * m3 ? 1 : S5;
          return s7 = Math.max(s7 - m3, S5), o2 > 0 && (n7 -= E6 * this._view.resolution), o2 * Math.max(o2 * (n7 / s7), h6);
        }, d8 = _3(P4[0], w3.basis1), f2 = _3(P4[1], w3.basis2);
        return { ...t5, direction: P4, factor1: d8, factor2: f2 };
      }).next(this._preserveAspectRatio.createDragEventPipelineStep(), this._preserveAspectRatio.next).next((t5) => {
        const a2 = s3(this._originCache, y3.origin);
        q(a2, a2, y3.basis1, -P4[0]), q(a2, a2, y3.basis2, -P4[1]);
        const o2 = o(this._axisCache, y3.basis1[0], y3.basis1[1]);
        v(o2, o2);
        const l3 = _2.data.allVertices, h6 = "start" === t5.action ? E2.NEW_STEP : E2.ACCUMULATE_STEPS, u5 = _2.scaleVertices(l3, a2, o2, t5.factor1, t5.factor2, h6, e3.REPLACE);
        return d7 && d7 < _2.data.geometry.extent.width && g3 ? _2.updateVertices(l3, g3) : (Z(y3, c2), V(u5, c2), g3 = u5.operation, r7(t5, u5)), t5;
      }).next((t5) => ("end" === t5.action && (f.cursor = "grab"), t5));
    });
  }
  _createManipulator() {
    return new S2({ view: this._view, graphic: this._graphic, selectable: true, cursor: "grab" });
  }
};

// node_modules/@arcgis/core/views/2d/interactive/editingTools/TransformTool.js
var q2 = 80;
var F2 = 10;
var J = 30;
var K = [[1, 1], [1, -1], [-1, -1], [-1, 1], [1, 0], [0, -1], [-1, 0], [0, 1]];
var Q3 = 1;
var X = 10;
var Y = class extends n4 {
  constructor(e4) {
    super(e4), this._initialControlPoints = null, this._initialGeometry = null, this._graphic = null, this._planeCache = W(), this._displayPlaneCache = W(), this._mainAxisCache = n2(), this._rotationHandleCache = n(), this._cornerA = n(), this._cornerB = n(), this._cornerC = n(), this._cornerD = n(), this._avgAB = n(), this._avgBC = n(), this._avgCD = n(), this._avgDA = n(), this._preserveAspectRatio = new s6(), this._snapRotation = new r6(), this._graphicsLayer = new h2({ internal: true, listMode: "hide", visible: false }), this._sharedUndoStack = [], this._sharedRedoStack = [], this._isOpacityToggled = false, this._factor = Q3, this.preserveAspectRatio = null, this.snapRotation = null, this.type = "transform";
  }
  initialize() {
    this._initialize();
  }
  destroy() {
    const { map: e4 } = this.view;
    this._dragManipulation.destroy(), this._rotateManipulation.destroy(), this._scaleManipulations.forEach((e5) => e5.destroy()), this._editGeometryOperations.destroy(), e4.removeMany([this._graphicsLayer]), this._graphicsLayer.removeAll(), this._graphicsLayer = u(this._graphicsLayer), this._initialControlPoints = null, this._initialGeometry = null, this._graphic = null, this._preserveAspectRatio = null, this._snapRotation = null, this._planeCache = null, this._displayPlaneCache = null, this._rotationHandleCache = null, this._mainAxisCache = null, this._cornerA = null, this._cornerB = null, this._cornerC = null, this._cornerD = null, this._avgAB = null, this._avgBC = null, this._avgCD = null, this._avgDA = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  get _plane() {
    const e4 = this._graphic.geometry;
    if (null == e4) return null;
    const t4 = this._editGeometryOperations.data, i2 = t4.components[0].edges[0], s7 = e2(this._mainAxisCache, i2.leftVertex.pos, i2.rightVertex.pos);
    v(s7, s7);
    let o2 = q2 * this.view.resolution;
    const a2 = this.view.spatialReference;
    return s2(a2, e4.spatialReference) && (o2 *= Q(a2) / Q(e4.spatialReference)), S3(s7, t4, o2, this._planeCache);
  }
  get _displayPlane() {
    const e4 = this._plane;
    if (!e4) return null;
    const t4 = this._displayPlaneCache;
    Z(e4, t4);
    const i2 = F2 * this.view.resolution;
    return g2(t4.basis1, t4.basis1, 1 + i2 / r3(t4.basis1)), g2(t4.basis2, t4.basis2, 1 + i2 / r3(t4.basis2)), t4;
  }
  get _backgroundGraphicGeometry() {
    const e4 = this._displayPlane;
    if (!e4) return null;
    const t4 = this.view.spatialReference;
    return this._updateDisplayPlaneConrers(e4), new j2({ spatialReference: t4, rings: [[this._cornerA, this._cornerB, this._cornerC, this._cornerD, this._cornerA]] });
  }
  get _rotateGraphicGeometry() {
    const e4 = this._plane;
    if (!e4) return null;
    const t4 = this._rotationHandleCache;
    return A(t4, e4.basis1), g2(t4, t4, J * this.view.resolution), u3(t4, t4, e4.origin), u3(t4, t4, e4.basis1), new j({ x: t4[0], y: t4[1], spatialReference: this.view.spatialReference });
  }
  get _scaleGraphicGeometries() {
    const e4 = this._displayPlane;
    if (!e4) return [];
    const t4 = this.view.spatialReference;
    this._updateDisplayPlaneConrers(e4);
    const { _cornerA: i2, _cornerB: s7, _cornerC: o2, _cornerD: r7 } = this, a2 = I(this._avgAB, i2, s7, 0.5), n7 = I(this._avgBC, s7, o2, 0.5), c2 = I(this._avgCD, o2, r7, 0.5), h5 = I(this._avgDA, r7, i2, 0.5);
    return [new j({ x: i2[0], y: i2[1], spatialReference: t4 }), new j({ x: s7[0], y: s7[1], spatialReference: t4 }), new j({ x: o2[0], y: o2[1], spatialReference: t4 }), new j({ x: r7[0], y: r7[1], spatialReference: t4 }), new j({ x: a2[0], y: a2[1], spatialReference: t4 }), new j({ x: n7[0], y: n7[1], spatialReference: t4 }), new j({ x: c2[0], y: c2[1], spatialReference: t4 }), new j({ x: h5[0], y: h5[1], spatialReference: t4 })];
  }
  onActivate() {
    this.visible = true;
  }
  onDeactivate() {
    this.visible = false;
  }
  onShow() {
    this._graphicsLayer.visible = true;
  }
  onHide() {
    this._graphicsLayer.visible = false;
  }
  canUndo() {
    return this._editGeometryOperations.canUndo;
  }
  canRedo() {
    return this._editGeometryOperations.canRedo;
  }
  undo() {
    this._editGeometryOperations.undo(), this.updateGraphics();
  }
  redo() {
    this._editGeometryOperations.redo(), this.updateGraphics();
  }
  refresh() {
    const { view: e4, target: t4 } = this, i2 = "georeference" in t4 ? t4.georeference.coords : t4.geometry, s7 = this._editGeometryOperations, o2 = s7.data.components[0].vertices, r7 = p.fromGeometry(O(i2, e4.spatialReference), l.Local).components[0].vertices;
    o2.forEach((e5, t5) => {
      s7.setVertexPosition(e5, r7[t5].pos);
    }), this.updateGraphics();
  }
  reset() {
    const { target: e4 } = this;
    if ("georeference" in e4) {
      const t4 = e4.georeference;
      "control-points" === t4.type && (t4.controlPoints = this._initialControlPoints);
    } else e4.geometry = this._initialGeometry;
    this.refresh(), this._sharedUndoStack.length = 0, this._sharedRedoStack.length = 0;
  }
  updateGraphics() {
    const e4 = this._editGeometryOperations.data.geometry;
    if ("georeference" in this.target) {
      this.target.georeference.coords = e4;
    }
    this._graphic.geometry = e4, this._backgroundGraphic.geometry = this._backgroundGraphicGeometry, this._rotateGraphic.geometry = this._rotateGraphicGeometry, this._scaleGraphicGeometries.forEach((e5, t4) => {
      this._scaleGraphics[t4].geometry = e5;
    });
  }
  setSharedUndoStack(e4) {
    this._sharedUndoStack = e4;
  }
  setSharedRedoStack(e4) {
    this._sharedRedoStack = e4;
  }
  async _initialize() {
    const { view: e4, target: s7 } = this;
    if ("georeference" in s7) {
      const e5 = s7.georeference;
      this._graphic = new b({ geometry: e5.coords }), this._initialControlPoints = "control-points" === e5.type ? e5.controlPoints : null;
    } else this._graphic = s7, this._initialGeometry = s7.geometry;
    e4.map.addMany([this._graphicsLayer]), e4.focus(), this.visible = false, this.finishToolCreation(), await this._loadProjectionEngine(), this._editGeometryOperations = E3.fromGeometry(O(this._graphic.geometry, e4.spatialReference), l.Local), this._backgroundGraphic = new b({ symbol: new S({ color: "transparent", outline: { type: "simple-line", color: e4.effectiveTheme.accentColor, width: 2 } }), geometry: this._backgroundGraphicGeometry }), this._rotateGraphic = new b({ symbol: new y({ color: E(e4.effectiveTheme.accentColor), outline: { type: "simple-line", color: e4.effectiveTheme.accentColor, width: 1 } }), geometry: this._rotateGraphicGeometry }), this._scaleGraphics = this._scaleGraphicGeometries.map((s8) => new b({ symbol: new y({ size: 6, style: "square", color: E(e4.effectiveTheme.accentColor), outline: { type: "simple-line", color: e4.effectiveTheme.accentColor, width: 1 } }), geometry: s8 })), this._graphicsLayer.graphics.addMany([this._backgroundGraphic, this._rotateGraphic, ...this._scaleGraphics]), this._dragManipulation = new s5({ tool: this, view: e4, graphic: this._graphic }), this._rotateManipulation = new u4({ tool: this, view: e4, graphic: this._rotateGraphic, snapRotation: this._snapRotation }), this._scaleManipulations = this._scaleGraphics.map((t4, i2) => new w2({ tool: this, view: e4, graphic: t4, direction: K[i2], preserveAspectRatio: this._preserveAspectRatio })), this.addHandles([this._dragManipulation.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this)), this._rotateManipulation.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this)), ...this._scaleManipulations.map((e5) => e5.createDragPipeline(this._getInfo.bind(this), this._updateGraphics.bind(this))), d(() => this.view.scale, () => this.active ? this.updateGraphics() : null), e4.on("click", async (t4) => {
      if (null != e4.activeTool && e4.activeTool !== this) return;
      const i2 = n3(t4), o2 = [];
      e4.map.allLayers.forEach((e5) => {
        "vector-tile" !== e5.type && "imagery" !== e5.type || o2.push(e5);
      });
      const r8 = await this.view.hitTest(i2, { exclude: o2 }), a3 = r8.results;
      if (0 === a3.length) e4.activeTool = null;
      else {
        const t5 = r4(r8.results), i3 = "georeference" in s7, o3 = a3.map((e5) => "media" === e5.type ? e5.element : null).filter(Boolean), n7 = new Set([...this._graphicsLayer.graphics, i3 ? null : s7].filter(Boolean));
        i3 && o3.includes(s7) || null != t5 && n7.has(t5.graphic) ? null == e4.activeTool && (e4.activeTool = this) : e4.activeTool = null;
      }
    })]);
    const r7 = (e5) => {
      this.addHandles(e5.events.on("grab-changed", (e6) => {
        "georeference" in s7 && ("start" === e6.action ? s7.opacity *= 0.5 : "end" === e6.action && (s7.opacity *= 2));
      }));
    };
    this._dragManipulation.forEachManipulator(r7), this._rotateManipulation.forEachManipulator(r7), this._scaleManipulations.forEach((e5) => e5.forEachManipulator(r7));
    const a2 = new h3();
    a2.addToggle(d5.preserveAspectRatio, () => {
      null == this.preserveAspectRatio && (this._preserveAspectRatio.enabled = !this._preserveAspectRatio.enabled);
    }), a2.addToggle(d5.rotateIncrements, () => {
      null == this.snapRotation && (this._snapRotation.enabled = !this._snapRotation.enabled);
    }), a2.add(d5.toggleOpacity, () => {
      "georeference" in s7 && (s7.opacity *= this._isOpacityToggled ? 2 : 0.5, this._isOpacityToggled = !this._isOpacityToggled);
    }), a2.addToggle(d5.factorModifier, (e5) => this._factor = "key-down" === e5.type ? X : Q3), a2.add(d5.scaleUp, () => this._scale(this._factor)), a2.add(d5.scaleDown, () => this._scale(-this._factor)), a2.add(d5.moveUp, () => this._move(0, this._factor)), a2.add(d5.moveDown, () => this._move(0, -this._factor)), a2.add(d5.moveLeft, () => this._move(-this._factor, 0)), a2.add(d5.moveRight, () => this._move(this._factor, 0)), this.addHandles([e4.on("key-down", (t4) => {
      e4.activeTool === this && a2.dispatch(e4.inputManager, t4);
    }), e4.on("key-up", (t4) => {
      e4.activeTool === this && a2.dispatch(e4.inputManager, t4);
    })]);
  }
  async _loadProjectionEngine() {
    const e4 = this._graphic.geometry;
    return Q2(e4.spatialReference, this.view.spatialReference);
  }
  _updateDisplayPlaneConrers(e4) {
    const { basis1: t4, basis2: i2, origin: s7 } = e4, o2 = this._cornerA;
    u3(o2, s7, t4), u3(o2, o2, i2);
    const r7 = this._cornerB;
    u3(r7, s7, t4), c(r7, r7, i2);
    const a2 = this._cornerC;
    c(a2, s7, t4), c(a2, a2, i2);
    const n7 = this._cornerD;
    c(n7, s7, t4), u3(n7, n7, i2);
  }
  _getInfo() {
    return { editGeometryOperations: this._editGeometryOperations, plane: this._plane, displayPlane: this._displayPlane };
  }
  _updateGraphics(e4, t4) {
    "start" === e4.action && (this._sharedUndoStack.push({ tool: this, operation: t4 }), this._sharedRedoStack.length = 0), this.updateGraphics();
  }
  _scale(e4) {
    var _a;
    const t4 = this._editGeometryOperations, i2 = (_a = t4.data.geometry.extent) == null ? void 0 : _a.width, s7 = (i2 + e4 * this.view.resolution) / i2, o2 = t4.scale(this._plane.origin, _, s7, s7, E2.NEW_STEP, e3.REPLACE);
    this._sharedUndoStack.push({ tool: this, operation: o2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
  _move(e4, t4) {
    const i2 = this._editGeometryOperations.move(e4 * this.view.resolution, t4 * this.view.resolution, 0, E2.NEW_STEP);
    this._sharedUndoStack.push({ tool: this, operation: i2 }), this._sharedRedoStack.length = 0, this.updateGraphics();
  }
};
r([m()], Y.prototype, "_plane", null), r([m()], Y.prototype, "_backgroundGraphicGeometry", null), r([m()], Y.prototype, "_rotateGraphicGeometry", null), r([m()], Y.prototype, "_scaleGraphicGeometries", null), r([m()], Y.prototype, "preserveAspectRatio", void 0), r([m()], Y.prototype, "snapRotation", void 0), r([m({ constructOnly: true, nonNullable: true })], Y.prototype, "target", void 0), r([m({ readOnly: true })], Y.prototype, "type", void 0), r([m({ constructOnly: true })], Y.prototype, "view", void 0), Y = r([a("esri.views.2d.interactive.editingTools.TransformTool")], Y);

// node_modules/@arcgis/core/views/2d/interactive/editingTools/MediaTransformToolsWrapper.js
var n6 = { redo: "r", undo: "z" };
var d6 = class extends g {
  constructor(o2) {
    super(o2), this._transformTool = null, this._controlPointsTransformTool = null, this._advancedModeTransformTool = null, this._activeTool = null, this._sharedUndoStack = [], this._sharedRedoStack = [], this._originalOpacity = null, this.activeHandle = 0;
  }
  initialize() {
    const { view: o2, mediaElement: t4, preserveAspectRatio: s7, snapRotation: i2, advancedMode: d7 } = this;
    this._originalOpacity = t4.opacity, this._transformTool = new Y({ target: t4, view: o2, preserveAspectRatio: s7, snapRotation: i2 }), this._controlPointsTransformTool = new b2({ mediaElement: t4, view: o2 }), this._advancedModeTransformTool = new b2({ mediaElement: d7.mediaElement, view: d7.view }), this._transformTool.setSharedUndoStack(this._sharedUndoStack), this._transformTool.setSharedRedoStack(this._sharedRedoStack), this._controlPointsTransformTool.setSharedUndoStack(this._sharedUndoStack), this._controlPointsTransformTool.setSharedRedoStack(this._sharedRedoStack), this._advancedModeTransformTool.setSharedUndoStack(this._sharedUndoStack), this._advancedModeTransformTool.setSharedRedoStack(this._sharedRedoStack);
    const l3 = t4.georeference, c2 = d7.mediaElement.georeference;
    d7.view.tools.addMany([this._advancedModeTransformTool]), "controlPoints" in c2 && "controlPoints" in l3 && this.addHandles([d7.view.on("key-down", (o3) => {
      o3.key === n6.undo && this.canUndo() && (this.undo(), o3.stopPropagation()), o3.key === n6.redo && this.canRedo() && (this.redo(), o3.stopPropagation());
    }), d7.view.on("focus", async (o3) => {
      this._controlPointsTransformTool.removeHighlightActiveHandle(), this._advancedModeTransformTool.highlightActiveHandle();
    }), d(() => c2.controlPoints, (o3) => {
      var _a;
      l3.controlPoints = o3.map(({ sourcePoint: o4 }, t5) => ({ sourcePoint: o4, mapPoint: l3.controlPoints[t5].mapPoint })), (_a = this._activeTool) == null ? void 0 : _a.refresh();
    }), d(() => this._controlPointsTransformTool.activeHandle, (o3) => {
      this._advancedModeTransformTool.updateActiveHandle(o3), this.activeHandle = o3;
    }), d(() => this._advancedModeTransformTool.activeHandle, (o3) => {
      this._controlPointsTransformTool.updateActiveHandle(o3), this.activeHandle = o3;
    })]), this.addHandles([o2.on("key-down", (o3) => {
      o3.key === n6.undo && this.canUndo() && (this.undo(), o3.stopPropagation()), o3.key === n6.redo && this.canRedo() && (this.redo(), o3.stopPropagation());
    }), o2.on("focus", async (o3) => {
      this._advancedModeTransformTool.removeHighlightActiveHandle(), this._controlPointsTransformTool.highlightActiveHandle();
    })]), o2.tools.addMany([this._transformTool, this._controlPointsTransformTool]), o2.activeTool = this._transformTool, this._activeTool = this._transformTool, o2.focus();
  }
  destroy() {
    var _a, _b;
    (_a = this._transformTool) == null ? void 0 : _a.destroy(), (_b = this._controlPointsTransformTool) == null ? void 0 : _b.destroy(), this._transformTool = null, this._controlPointsTransformTool = null, this._advancedModeTransformTool = null, this._activeTool = null, this._sharedUndoStack = null, this._sharedRedoStack = null;
  }
  canUndo() {
    return this._sharedUndoStack.length > 0;
  }
  canRedo() {
    return this._sharedRedoStack.length > 0;
  }
  undo() {
    var _a;
    if (this._sharedUndoStack.length > 0) {
      const { tool: o2, operation: t4 } = this._sharedUndoStack.pop();
      o2 !== this._activeTool && o2.refresh(), t4.undo(), o2.updateGraphics(), this._sharedRedoStack.push({ tool: o2, operation: t4 }), this._activeTool !== o2 && ((_a = this._activeTool) == null ? void 0 : _a.refresh());
    }
  }
  redo() {
    var _a;
    if (this._sharedRedoStack.length > 0) {
      const { tool: o2, operation: t4 } = this._sharedRedoStack.pop();
      o2 !== this._activeTool && o2.refresh(), t4.apply(), o2.updateGraphics(), this._sharedUndoStack.push({ tool: o2, operation: t4 }), this._activeTool !== o2 && ((_a = this._activeTool) == null ? void 0 : _a.refresh());
    }
  }
  refresh() {
    this._activeTool.refresh();
  }
  reset() {
    this._activeTool.reset(), this._advancedModeTransformTool.reset();
  }
  async enableAdvancedMode() {
    this.view.activeTool = this._controlPointsTransformTool, this._activeTool = this._controlPointsTransformTool, this._activeTool.refresh(), await this.advancedMode.view.when(), this.advancedMode.view.activeTool = this._advancedModeTransformTool, this._originalOpacity = this._controlPointsTransformTool.mediaElement.opacity, this._controlPointsTransformTool.mediaElement.opacity = 0.25 * this._originalOpacity;
  }
  disableAdvancedMode() {
    this.view.activeTool = this._transformTool, this._activeTool = this._transformTool, this._activeTool.refresh(), this.advancedMode.view.activeTool = null, this._controlPointsTransformTool.mediaElement.opacity = this._originalOpacity;
  }
};
r([m()], d6.prototype, "activeHandle", void 0), r([m({ constructOnly: true })], d6.prototype, "advancedMode", void 0), r([m()], d6.prototype, "preserveAspectRatio", void 0), r([m()], d6.prototype, "snapRotation", void 0), r([m({ constructOnly: true, nonNullable: true })], d6.prototype, "mediaElement", void 0), r([m({ constructOnly: true })], d6.prototype, "view", void 0), d6 = r([a("esri.views.2d.interactive.editingTools.MediaTransformToolsWrapper")], d6);
export {
  b2 as ControlPointsTransformTool,
  E5 as DrawGraphicTool2D,
  d6 as MediaTransformToolsWrapper,
  Y as TransformTool
};
//# sourceMappingURL=editingTools-ERE2A6AU.js.map
