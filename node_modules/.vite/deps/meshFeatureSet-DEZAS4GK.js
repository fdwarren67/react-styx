import {
  i as i2,
  n as n2
} from "./chunk-3PWMZ2L7.js";
import {
  Y
} from "./chunk-XU37Z7IB.js";
import "./chunk-ZDC5HC6P.js";
import {
  a,
  i
} from "./chunk-C63NZEHB.js";
import "./chunk-QU4L2TYC.js";
import "./chunk-QBDJCOUK.js";
import "./chunk-IJWXIQTC.js";
import "./chunk-MCI4FSOS.js";
import "./chunk-CYPCVVWD.js";
import "./chunk-QZBTDF5E.js";
import "./chunk-OK5AUMBT.js";
import "./chunk-HX6OAJGI.js";
import "./chunk-F64YCQYI.js";
import "./chunk-3L7KPDW7.js";
import "./chunk-O647AAAL.js";
import "./chunk-374VFTLO.js";
import "./chunk-HN2VIPED.js";
import "./chunk-W25RAFXQ.js";
import "./chunk-VGMYHNBL.js";
import "./chunk-JGZQANAC.js";
import "./chunk-MRUZJ4BJ.js";
import "./chunk-H2QUYHU5.js";
import "./chunk-YZF7OTID.js";
import "./chunk-KLBFJ6WQ.js";
import "./chunk-HHSHKUKB.js";
import "./chunk-OBRCQKKM.js";
import "./chunk-QAWD6UDA.js";
import "./chunk-2PJ3OYOC.js";
import "./chunk-T7CHWWE2.js";
import "./chunk-FWVSIQMR.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-ON7GWFUW.js";
import {
  d
} from "./chunk-6EREU4EG.js";
import {
  s
} from "./chunk-ZXHHBJMH.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-4JHPTLMD.js";
import "./chunk-35I4PBUK.js";
import "./chunk-ZQMORW2K.js";
import "./chunk-OGPRAWXS.js";
import "./chunk-EGSJQZXU.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import {
  b
} from "./chunk-BLF64HON.js";
import "./chunk-I3JB2EVB.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-BMNRD4FO.js";
import "./chunk-W7QCICS6.js";
import "./chunk-AYLNWVVJ.js";
import "./chunk-PQVKYMOX.js";
import "./chunk-DCSYHXZG.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-BDOGPNOY.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import {
  w
} from "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import {
  g
} from "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import "./chunk-VTWDBFQT.js";
import "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import {
  r
} from "./chunk-7LCEUMDD.js";
import {
  n2 as n
} from "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/rest/support/meshFeatureSet.js
var p = () => n.getLogger("esri.rest.support.meshFeatureSet");
function l(t, r2, s2) {
  const o = s2.features;
  s2.features = [], delete s2.geometryType;
  const a2 = d.fromJSON(s2);
  if (a2.geometryType = "mesh", !s2.assetMaps) return a2;
  const u = g2(r2, s2.assetMaps), i3 = t.sourceSpatialReference ?? g.WGS84, m = s2.globalIdFieldName, { outFields: c } = t, p2 = null != c && c.length > 0 ? y(c.includes("*") ? null : new Set(c)) : () => ({});
  for (const n3 of o) {
    const t2 = E(n3, m, i3, r2, u);
    a2.features.push(new b({ geometry: t2, attributes: p2(n3) }));
  }
  return a2;
}
function y(e) {
  return ({ attributes: t }) => {
    if (!t) return {};
    if (!e) return t;
    for (const r2 in t) e.has(r2) || delete t[r2];
    return t;
  };
}
function E(e, t, r2, n3, a2) {
  const u = e.attributes[t], i3 = a2.get(u);
  if (null == i3 || !e.geometry) return null;
  const f = n2(e.attributes, r2, n3.transformFieldRoles), p2 = w.fromJSON(e.geometry);
  p2.spatialReference = r2;
  const l2 = i2(e.attributes, n3.transformFieldRoles), y2 = r2.isGeographic ? "local" : "georeferenced", E2 = d2(i3);
  return E2 ? Y.createWithExternalSource(f, E2, { extent: p2, transform: l2, vertexSpace: y2, unitConversionDisabled: true }) : Y.createIncomplete(f, { extent: p2, transform: l2, vertexSpace: y2 });
}
var h;
function g2(e, t) {
  const s2 = /* @__PURE__ */ new Map();
  for (const o of t) {
    const t2 = o.parentGlobalId;
    if (null == t2) continue;
    const n3 = o.assetName, a2 = o.assetType, u = o.assetHash, f = o.assetURL, m = o.conversionStatus, c = o.seqNo, l2 = s(a2, e.supportedFormats);
    if (!l2) {
      p().error("mesh-feature-set:unknown-format", `Service returned an asset of type ${a2}, but it does not list it as a supported type`);
      continue;
    }
    const y2 = r(s2, t2, () => ({ files: /* @__PURE__ */ new Map() }));
    r(y2.files, n3, () => ({ name: n3, type: a2, mimeType: l2, status: S(m), parts: [] })).parts[c] = { hash: u, url: f };
  }
  return s2;
}
function d2(e) {
  const t = Array.from(e.files.values()), r2 = new Array();
  for (const s2 of t) {
    if (s2.status !== h.COMPLETED) return null;
    const e2 = new Array();
    for (const t2 of s2.parts) {
      if (!t2) return null;
      e2.push(new i(t2.url, t2.hash));
    }
    r2.push(new a(s2.name, s2.mimeType, e2));
  }
  return r2;
}
function S(e) {
  switch (e) {
    case "COMPLETED":
    case "SUBMITTED":
      return h.COMPLETED;
    case "INPROGRESS":
      return h.PENDING;
    default:
      return h.FAILED;
  }
}
!function(e) {
  e[e.FAILED = 0] = "FAILED", e[e.PENDING = 1] = "PENDING", e[e.COMPLETED = 2] = "COMPLETED";
}(h || (h = {}));
export {
  g2 as assetMapFromAssetMapsJSON,
  E as extractMesh,
  l as meshFeatureSetFromJSON
};
//# sourceMappingURL=meshFeatureSet-DEZAS4GK.js.map
