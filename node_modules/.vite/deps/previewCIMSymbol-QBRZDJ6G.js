import {
  l
} from "./chunk-MAMI2IDV.js";
import {
  t
} from "./chunk-RRO6KNFV.js";
import {
  l as l2
} from "./chunk-L2GBH657.js";
import "./chunk-HRH4AVCZ.js";
import "./chunk-GHPQVNNU.js";
import "./chunk-VBE5VFL5.js";
import {
  y
} from "./chunk-QT7O73SQ.js";
import "./chunk-R4CRYRS5.js";
import "./chunk-23WGP47N.js";
import {
  te
} from "./chunk-7NXOMMLC.js";
import "./chunk-F6YRPEY7.js";
import "./chunk-CCPDXL7V.js";
import "./chunk-2TACZL27.js";
import "./chunk-CUWQEJ5X.js";
import "./chunk-B7S3HUFO.js";
import "./chunk-6VF5U3IZ.js";
import "./chunk-E7IFPXEX.js";
import "./chunk-H2OC77GP.js";
import "./chunk-RDHJUEBL.js";
import "./chunk-D7L2BYRU.js";
import "./chunk-2PJ3OYOC.js";
import "./chunk-TYJV2BHR.js";
import "./chunk-I6H2R562.js";
import "./chunk-SURICA27.js";
import "./chunk-PONPGREB.js";
import "./chunk-4ACM2XXN.js";
import "./chunk-FJTIPVNU.js";
import "./chunk-SXKP4T6J.js";
import {
  V
} from "./chunk-62KPTW4J.js";
import "./chunk-UCDQUN5K.js";
import "./chunk-OQEC2EUK.js";
import "./chunk-V3IZNRFE.js";
import "./chunk-D7XVYH42.js";
import "./chunk-HAYP5DZM.js";
import "./chunk-OMNXYZNG.js";
import "./chunk-T52X5K2I.js";
import "./chunk-5E5JYM5A.js";
import "./chunk-4ANUERFT.js";
import "./chunk-C33DSFWF.js";
import "./chunk-WBBL3X3F.js";
import "./chunk-GFEMKR2U.js";
import "./chunk-G2OXL5Y3.js";
import "./chunk-TCV7UF6X.js";
import "./chunk-W7QCICS6.js";
import "./chunk-ZSBMFGDQ.js";
import "./chunk-NAGFHISJ.js";
import "./chunk-QCS4ZI2R.js";
import "./chunk-2SOWSOAE.js";
import "./chunk-KSQSVLSQ.js";
import "./chunk-SPVEONZ2.js";
import "./chunk-BMNDO4JW.js";
import "./chunk-RAVPBO4Z.js";
import "./chunk-PHADC6NW.js";
import "./chunk-3ODJ3YKN.js";
import "./chunk-P6IUM5K3.js";
import "./chunk-KGTLNUPW.js";
import "./chunk-GY7XU54K.js";
import "./chunk-P4D4HTH2.js";
import "./chunk-GDR4JYWU.js";
import "./chunk-Y4AQXF4J.js";
import "./chunk-D3P3E2RE.js";
import "./chunk-UKY33OJN.js";
import "./chunk-HAWCNM3C.js";
import "./chunk-BQYXRSVC.js";
import "./chunk-BJEQ2APY.js";
import "./chunk-WKNMEFRQ.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CIALVDRG.js";
import "./chunk-N5E3DEQN.js";
import "./chunk-GTN3PVPB.js";
import "./chunk-BF5PIC2K.js";
import "./chunk-K7TZXQ7O.js";
import {
  e,
  u
} from "./chunk-FZPO5AYT.js";
import "./chunk-5VM3BO4P.js";
import "./chunk-EYUJRAXJ.js";
import "./chunk-552ZCNNH.js";
import "./chunk-XG7T2Y7N.js";
import "./chunk-SQOMDKJS.js";
import "./chunk-HB6TKF6E.js";
import "./chunk-OXPM753Y.js";
import "./chunk-N4U5VIP2.js";
import "./chunk-IVS2JCO6.js";
import "./chunk-4GOW35CM.js";
import "./chunk-TEJXT4W6.js";
import "./chunk-LW62SPEN.js";
import "./chunk-LSOJIRW6.js";
import "./chunk-FSFEOCO5.js";
import "./chunk-ZVIMKAJW.js";
import "./chunk-BIURGGHV.js";
import "./chunk-VSLEAHOZ.js";
import "./chunk-6K2FAOQG.js";
import "./chunk-N5DN7S3H.js";
import "./chunk-BECTSF5P.js";
import "./chunk-FX46DC27.js";
import "./chunk-2FUEBHWI.js";
import "./chunk-VTWDBFQT.js";
import "./chunk-BM4B3CH5.js";
import "./chunk-G2YC5GCV.js";
import "./chunk-GD5AHXAI.js";
import "./chunk-YWGYHRSH.js";
import "./chunk-DP2IAJQN.js";
import "./chunk-EAFC6V23.js";
import "./chunk-SMH2GUF6.js";
import "./chunk-AZP4AFW7.js";
import "./chunk-SCZRL2WP.js";
import "./chunk-OSHCNHH7.js";
import "./chunk-7LCEUMDD.js";
import "./chunk-6II7WQ2F.js";
import "./chunk-L7QO6TDW.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var s = new l2(null);
var m = e(t.size);
var h = e(t.maxSize);
var c = e(t.lineWidth);
var y2 = 1;
async function u2(e2, t2, i) {
  const l3 = t2 == null ? void 0 : t2.size;
  let r = null != l3 && "object" == typeof l3 && "width" in l3 ? l3.width : l3, o = null != l3 && "object" == typeof l3 && "height" in l3 ? l3.height : l3;
  if (null == r || null == o) if ("esriGeometryPolygon" === i) r = o = t2.maxSize ? Math.min(t2.maxSize, m) : m;
  else {
    const l4 = await f(e2, t2, i);
    l4 && (r = l4.width, o = l4.height), "esriGeometryPolyline" === i && (r = t2.maxSize ? Math.min(t2.maxSize, c) : c), r = null != r && isFinite(r) ? Math.min(r, h) : m, o = null != o && isFinite(o) ? Math.max(Math.min(o, h), y2) : m;
  }
  return "legend" === t2.style && "esriGeometryPolyline" === i && (r = c), { width: r, height: o };
}
async function f(e2, t2, l3) {
  const { feature: o, fieldMap: n, viewParams: a } = t2.cimOptions || t2, m2 = await y.resolveSymbolOverrides(e2.data, o, null, n, l3, null, a);
  if (!m2) return null;
  (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: m2 }, e2.data.primitiveOverrides = void 0;
  const h2 = [];
  return te.fetchResources(m2, s.resourceManager, h2), te.fetchFonts(m2, s.resourceManager, h2), h2.length > 0 && await Promise.all(h2), te.getEnvelope(m2, null, s.resourceManager);
}
async function g(i, l3 = {}) {
  var _a, _b;
  const { node: r, opacity: n, symbolConfig: m2 } = l3, h2 = null != m2 && "object" == typeof m2 && "isSquareFill" in m2 && m2.isSquareFill, c2 = l3.cimOptions || l3, y3 = c2.geometryType || V((_a = i == null ? void 0 : i.data) == null ? void 0 : _a.symbol), f2 = await u2(i, l3, y3), { feature: g2, fieldMap: d } = c2, p = (l3 == null ? void 0 : l3.geometry) || h2 || "esriGeometryPolygon" !== y3 ? "preview" : "legend";
  let w = f2;
  const b = f2;
  if ((l3 == null ? void 0 : l3.geometry) && ("esriGeometryPolygon" === y3 || "esriGeometryPolyline" === y3)) {
    const i2 = 200;
    if (u(f2.width) < i2 || u(f2.height) < i2) {
      const t2 = f2.width > f2.height ? e(i2) * f2.height / f2.width : e(i2);
      w = { width: f2.width > f2.height ? e(i2) : e(i2) * f2.width / f2.height, height: t2 };
    }
  }
  const M = await s.rasterizeCIMSymbolAsync(i, g2, w, p, d, y3, null, c2.viewParams, c2.allowScalingUp, (_b = l3 == null ? void 0 : l3.geometry) == null ? void 0 : _b.toJSON());
  if (!M) return null;
  const { width: S, height: v } = M, j = document.createElement("canvas");
  j.width = S, j.height = v;
  j.getContext("2d").putImageData(M, 0, 0);
  const x = u(b.width), z = u(b.height), P = new Image(x, z);
  P.src = j.toDataURL(), P.ariaLabel = l3.ariaLabel ?? null, P.alt = l3.ariaLabel ?? "", null != n && (P.style.opacity = `${n}`);
  let C = P;
  if (null != l3.effectView) {
    const e2 = { shape: { type: "image", x: 0, y: 0, width: x, height: z, src: P.src }, fill: null, stroke: null, offset: [0, 0] };
    C = l([[e2]], [x, z], { effectView: l3.effectView, ariaLabel: l3.ariaLabel });
  }
  return r && C && r.appendChild(C), C;
}
export {
  g as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-QBRZDJ6G.js.map
