"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  importAnalysisAreaMeasurementAnalysis: () => importAnalysisAreaMeasurementAnalysis,
  importAnalysisDimensionAnalysis: () => importAnalysisDimensionAnalysis,
  importAnalysisDimensionSimpleStyle: () => importAnalysisDimensionSimpleStyle,
  importAnalysisDirectLineMeasurementAnalysis: () => importAnalysisDirectLineMeasurementAnalysis,
  importAnalysisLengthDimension: () => importAnalysisLengthDimension,
  importAnalysisLineOfSightAnalysis: () => importAnalysisLineOfSightAnalysis,
  importAnalysisLineOfSightAnalysisObserver: () => importAnalysisLineOfSightAnalysisObserver,
  importAnalysisLineOfSightAnalysisTarget: () => importAnalysisLineOfSightAnalysisTarget,
  importAnalysisSliceAnalysis: () => importAnalysisSliceAnalysis,
  importAnalysisSlicePlane: () => importAnalysisSlicePlane,
  importAnalysisViewshed: () => importAnalysisViewshed,
  importAnalysisViewshedAnalysis: () => importAnalysisViewshedAnalysis,
  importApplicationsComponentsBasemapUtils: () => importApplicationsComponentsBasemapUtils,
  importApplicationsComponentsDrawUtils: () => importApplicationsComponentsDrawUtils,
  importApplicationsComponentsFontUtils: () => importApplicationsComponentsFontUtils,
  importApplicationsComponentsGetDefaultUnits: () => importApplicationsComponentsGetDefaultUnits,
  importApplicationsComponentsGfxUtils: () => importApplicationsComponentsGfxUtils,
  importApplicationsComponentsLayerOriginUtils: () => importApplicationsComponentsLayerOriginUtils,
  importApplicationsComponentsLayersEffectsJsonUtils: () => importApplicationsComponentsLayersEffectsJsonUtils,
  importApplicationsComponentsPreviewSymbol2D: () => importApplicationsComponentsPreviewSymbol2D,
  importApplicationsComponentsReactiveUtils: () => importApplicationsComponentsReactiveUtils,
  importApplicationsComponentsSelectionOperation: () => importApplicationsComponentsSelectionOperation,
  importApplicationsComponentsSketchTooltipControls: () => importApplicationsComponentsSketchTooltipControls,
  importApplicationsComponentsStyleUtils: () => importApplicationsComponentsStyleUtils,
  importApplicationsComponentsSvgUtils: () => importApplicationsComponentsSvgUtils,
  importApplicationsComponentsWebStyleSymbolUtils: () => importApplicationsComponentsWebStyleSymbolUtils,
  importApplicationsExperienceBuilderSketchUtils: () => importApplicationsExperienceBuilderSketchUtils,
  importApplicationsMapViewerTemplateUtils: () => importApplicationsMapViewerTemplateUtils,
  importApplicationsSceneViewerDevEnvironmentUtils: () => importApplicationsSceneViewerDevEnvironmentUtils,
  importApplicationsWebEditorSketchUtils: () => importApplicationsWebEditorSketchUtils,
  importArcade: () => importArcade,
  importAttributeBinsGraphic: () => importAttributeBinsGraphic,
  importBasemap: () => importBasemap,
  importCamera: () => importCamera,
  importCameraLayout: () => importCameraLayout,
  importColor: () => importColor,
  importConfig: () => importConfig,
  importCoreAccessor: () => importCoreAccessor,
  importCoreAccessorSupportDecorators: () => importCoreAccessorSupportDecorators,
  importCoreCollection: () => importCoreCollection,
  importCoreError: () => importCoreError,
  importCoreHandles: () => importCoreHandles,
  importCoreLang: () => importCoreLang,
  importCorePromiseUtils: () => importCorePromiseUtils,
  importCoreReactiveUtils: () => importCoreReactiveUtils,
  importCoreScheduling: () => importCoreScheduling,
  importCoreSql: () => importCoreSql,
  importCoreSqlWhereClause: () => importCoreSqlWhereClause,
  importCoreUrlUtils: () => importCoreUrlUtils,
  importCoreWorkers: () => importCoreWorkers,
  importCoreWorkersConnection: () => importCoreWorkersConnection,
  importEditingSharedTemplatesSharedTemplate: () => importEditingSharedTemplatesSharedTemplate,
  importEditingSharedTemplatesSharedTemplateMetadata: () => importEditingSharedTemplatesSharedTemplateMetadata,
  importFormElements: () => importFormElements,
  importFormElementsAttachmentElement: () => importFormElementsAttachmentElement,
  importFormElementsElement: () => importFormElementsElement,
  importFormElementsFieldElement: () => importFormElementsFieldElement,
  importFormElementsGroupElement: () => importFormElementsGroupElement,
  importFormElementsInputs: () => importFormElementsInputs,
  importFormElementsInputsAttachmentsAttachmentInput: () => importFormElementsInputsAttachmentsAttachmentInput,
  importFormElementsInputsAttachmentsAudioInput: () => importFormElementsInputsAttachmentsAudioInput,
  importFormElementsInputsAttachmentsDocumentInput: () => importFormElementsInputsAttachmentsDocumentInput,
  importFormElementsInputsAttachmentsImageInput: () => importFormElementsInputsAttachmentsImageInput,
  importFormElementsInputsAttachmentsSignatureInput: () => importFormElementsInputsAttachmentsSignatureInput,
  importFormElementsInputsAttachmentsVideoInput: () => importFormElementsInputsAttachmentsVideoInput,
  importFormElementsInputsBarcodeScannerInput: () => importFormElementsInputsBarcodeScannerInput,
  importFormElementsInputsComboBoxInput: () => importFormElementsInputsComboBoxInput,
  importFormElementsInputsDatePickerInput: () => importFormElementsInputsDatePickerInput,
  importFormElementsInputsDateTimeOffsetPickerInput: () => importFormElementsInputsDateTimeOffsetPickerInput,
  importFormElementsInputsDateTimePickerInput: () => importFormElementsInputsDateTimePickerInput,
  importFormElementsInputsRadioButtonsInput: () => importFormElementsInputsRadioButtonsInput,
  importFormElementsInputsSwitchInput: () => importFormElementsInputsSwitchInput,
  importFormElementsInputsTextAreaInput: () => importFormElementsInputsTextAreaInput,
  importFormElementsInputsTextBoxInput: () => importFormElementsInputsTextBoxInput,
  importFormElementsInputsTimePickerInput: () => importFormElementsInputsTimePickerInput,
  importFormElementsRelationshipElement: () => importFormElementsRelationshipElement,
  importFormElementsTextElement: () => importFormElementsTextElement,
  importFormElementsUtilityNetworkAssociationsElement: () => importFormElementsUtilityNetworkAssociationsElement,
  importFormExpressionInfo: () => importFormExpressionInfo,
  importFormFormTemplate: () => importFormFormTemplate,
  importGeometry: () => importGeometry,
  importGeometryCircle: () => importGeometryCircle,
  importGeometryCoordinateFormatter: () => importGeometryCoordinateFormatter,
  importGeometryExtent: () => importGeometryExtent,
  importGeometryGeometry: () => importGeometryGeometry,
  importGeometryGeometryEngine: () => importGeometryGeometryEngine,
  importGeometryGeometryEngineAsync: () => importGeometryGeometryEngineAsync,
  importGeometryHeightModelInfo: () => importGeometryHeightModelInfo,
  importGeometryMesh: () => importGeometryMesh,
  importGeometryMultipoint: () => importGeometryMultipoint,
  importGeometryOperatorsAffineTransformOperator: () => importGeometryOperatorsAffineTransformOperator,
  importGeometryOperatorsAlphaShapeOperator: () => importGeometryOperatorsAlphaShapeOperator,
  importGeometryOperatorsAreaOperator: () => importGeometryOperatorsAreaOperator,
  importGeometryOperatorsAutoCompleteOperator: () => importGeometryOperatorsAutoCompleteOperator,
  importGeometryOperatorsBoundaryOperator: () => importGeometryOperatorsBoundaryOperator,
  importGeometryOperatorsBufferOperator: () => importGeometryOperatorsBufferOperator,
  importGeometryOperatorsCentroidOperator: () => importGeometryOperatorsCentroidOperator,
  importGeometryOperatorsClipOperator: () => importGeometryOperatorsClipOperator,
  importGeometryOperatorsContainsOperator: () => importGeometryOperatorsContainsOperator,
  importGeometryOperatorsConvexHullOperator: () => importGeometryOperatorsConvexHullOperator,
  importGeometryOperatorsCrossesOperator: () => importGeometryOperatorsCrossesOperator,
  importGeometryOperatorsCutOperator: () => importGeometryOperatorsCutOperator,
  importGeometryOperatorsDensifyOperator: () => importGeometryOperatorsDensifyOperator,
  importGeometryOperatorsDifferenceOperator: () => importGeometryOperatorsDifferenceOperator,
  importGeometryOperatorsDisjointOperator: () => importGeometryOperatorsDisjointOperator,
  importGeometryOperatorsDistanceOperator: () => importGeometryOperatorsDistanceOperator,
  importGeometryOperatorsEqualsOperator: () => importGeometryOperatorsEqualsOperator,
  importGeometryOperatorsExtendOperator: () => importGeometryOperatorsExtendOperator,
  importGeometryOperatorsGeneralizeOperator: () => importGeometryOperatorsGeneralizeOperator,
  importGeometryOperatorsGeodesicBufferOperator: () => importGeometryOperatorsGeodesicBufferOperator,
  importGeometryOperatorsGeodesicProximityOperator: () => importGeometryOperatorsGeodesicProximityOperator,
  importGeometryOperatorsGeodeticAreaOperator: () => importGeometryOperatorsGeodeticAreaOperator,
  importGeometryOperatorsGeodeticDensifyOperator: () => importGeometryOperatorsGeodeticDensifyOperator,
  importGeometryOperatorsGeodeticDistanceOperator: () => importGeometryOperatorsGeodeticDistanceOperator,
  importGeometryOperatorsGeodeticLengthOperator: () => importGeometryOperatorsGeodeticLengthOperator,
  importGeometryOperatorsGraphicBufferOperator: () => importGeometryOperatorsGraphicBufferOperator,
  importGeometryOperatorsIntegrateOperator: () => importGeometryOperatorsIntegrateOperator,
  importGeometryOperatorsIntersectionOperator: () => importGeometryOperatorsIntersectionOperator,
  importGeometryOperatorsIntersectsOperator: () => importGeometryOperatorsIntersectsOperator,
  importGeometryOperatorsIsNearOperator: () => importGeometryOperatorsIsNearOperator,
  importGeometryOperatorsLabelPointOperator: () => importGeometryOperatorsLabelPointOperator,
  importGeometryOperatorsLengthOperator: () => importGeometryOperatorsLengthOperator,
  importGeometryOperatorsLinesToPolygonsOperator: () => importGeometryOperatorsLinesToPolygonsOperator,
  importGeometryOperatorsLocateBetweenOperator: () => importGeometryOperatorsLocateBetweenOperator,
  importGeometryOperatorsMinimumBoundingCircleOperator: () => importGeometryOperatorsMinimumBoundingCircleOperator,
  importGeometryOperatorsMultiPartToSinglePartOperator: () => importGeometryOperatorsMultiPartToSinglePartOperator,
  importGeometryOperatorsOffsetOperator: () => importGeometryOperatorsOffsetOperator,
  importGeometryOperatorsOverlapsOperator: () => importGeometryOperatorsOverlapsOperator,
  importGeometryOperatorsPolygonOverlayOperator: () => importGeometryOperatorsPolygonOverlayOperator,
  importGeometryOperatorsPolygonSlicerOperator: () => importGeometryOperatorsPolygonSlicerOperator,
  importGeometryOperatorsProjectOperator: () => importGeometryOperatorsProjectOperator,
  importGeometryOperatorsProximityOperator: () => importGeometryOperatorsProximityOperator,
  importGeometryOperatorsRelateOperator: () => importGeometryOperatorsRelateOperator,
  importGeometryOperatorsReshapeOperator: () => importGeometryOperatorsReshapeOperator,
  importGeometryOperatorsShapePreservingProjectOperator: () => importGeometryOperatorsShapePreservingProjectOperator,
  importGeometryOperatorsSimplifyOperator: () => importGeometryOperatorsSimplifyOperator,
  importGeometryOperatorsSupportGeographicTransformation: () => importGeometryOperatorsSupportGeographicTransformation,
  importGeometryOperatorsSupportGeographicTransformationStep: () => importGeometryOperatorsSupportGeographicTransformationStep,
  importGeometryOperatorsSupportGeographicTransformationUtils: () => importGeometryOperatorsSupportGeographicTransformationUtils,
  importGeometryOperatorsSupportTransformation: () => importGeometryOperatorsSupportTransformation,
  importGeometryOperatorsSymmetricDifferenceOperator: () => importGeometryOperatorsSymmetricDifferenceOperator,
  importGeometryOperatorsTouchesOperator: () => importGeometryOperatorsTouchesOperator,
  importGeometryOperatorsUnionOperator: () => importGeometryOperatorsUnionOperator,
  importGeometryOperatorsWithinOperator: () => importGeometryOperatorsWithinOperator,
  importGeometryPoint: () => importGeometryPoint,
  importGeometryPolygon: () => importGeometryPolygon,
  importGeometryPolyline: () => importGeometryPolyline,
  importGeometryProjection: () => importGeometryProjection,
  importGeometrySpatialReference: () => importGeometrySpatialReference,
  importGeometrySupportGeodesicUtils: () => importGeometrySupportGeodesicUtils,
  importGeometrySupportGeographicTransformation: () => importGeometrySupportGeographicTransformation,
  importGeometrySupportGeographicTransformationStep: () => importGeometrySupportGeographicTransformationStep,
  importGeometrySupportJsonUtils: () => importGeometrySupportJsonUtils,
  importGeometrySupportMeshComponent: () => importGeometrySupportMeshComponent,
  importGeometrySupportMeshGeoreferencedVertexSpace: () => importGeometrySupportMeshGeoreferencedVertexSpace,
  importGeometrySupportMeshLocalVertexSpace: () => importGeometrySupportMeshLocalVertexSpace,
  importGeometrySupportMeshMaterial: () => importGeometrySupportMeshMaterial,
  importGeometrySupportMeshMaterialMetallicRoughness: () => importGeometrySupportMeshMaterialMetallicRoughness,
  importGeometrySupportMeshTexture: () => importGeometrySupportMeshTexture,
  importGeometrySupportMeshTextureTransform: () => importGeometrySupportMeshTextureTransform,
  importGeometrySupportMeshTransform: () => importGeometrySupportMeshTransform,
  importGeometrySupportMeshUtils: () => importGeometrySupportMeshUtils,
  importGeometrySupportNormalizeUtils: () => importGeometrySupportNormalizeUtils,
  importGeometrySupportWebMercatorUtils: () => importGeometrySupportWebMercatorUtils,
  importGraphic: () => importGraphic,
  importGround: () => importGround,
  importIdentityCredential: () => importIdentityCredential,
  importIdentityIdentityManager: () => importIdentityIdentityManager,
  importIdentityOAuthInfo: () => importIdentityOAuthInfo,
  importIdentityServerInfo: () => importIdentityServerInfo,
  importIntl: () => importIntl,
  importKernel: () => importKernel,
  importLayersBaseDynamicLayer: () => importLayersBaseDynamicLayer,
  importLayersBaseElevationLayer: () => importLayersBaseElevationLayer,
  importLayersBaseTileLayer: () => importLayersBaseTileLayer,
  importLayersBingMapsLayer: () => importLayersBingMapsLayer,
  importLayersBuildingSceneLayer: () => importLayersBuildingSceneLayer,
  importLayersBuildingSublayersBuildingComponentSublayer: () => importLayersBuildingSublayersBuildingComponentSublayer,
  importLayersBuildingSublayersBuildingGroupSublayer: () => importLayersBuildingSublayersBuildingGroupSublayer,
  importLayersBuildingSublayersBuildingSublayer: () => importLayersBuildingSublayersBuildingSublayer,
  importLayersCSVLayer: () => importLayersCSVLayer,
  importLayersCatalogCatalogDynamicGroupLayer: () => importLayersCatalogCatalogDynamicGroupLayer,
  importLayersCatalogCatalogFootprintLayer: () => importLayersCatalogCatalogFootprintLayer,
  importLayersCatalogCatalogUtils: () => importLayersCatalogCatalogUtils,
  importLayersCatalogLayer: () => importLayersCatalogLayer,
  importLayersDimensionLayer: () => importLayersDimensionLayer,
  importLayersElevationLayer: () => importLayersElevationLayer,
  importLayersFeatureLayer: () => importLayersFeatureLayer,
  importLayersGeoJSONLayer: () => importLayersGeoJSONLayer,
  importLayersGeoRSSLayer: () => importLayersGeoRSSLayer,
  importLayersGraphicsLayer: () => importLayersGraphicsLayer,
  importLayersGroupLayer: () => importLayersGroupLayer,
  importLayersImageryLayer: () => importLayersImageryLayer,
  importLayersImageryTileLayer: () => importLayersImageryTileLayer,
  importLayersIntegratedMesh3DTilesLayer: () => importLayersIntegratedMesh3DTilesLayer,
  importLayersIntegratedMeshLayer: () => importLayersIntegratedMeshLayer,
  importLayersKMLLayer: () => importLayersKMLLayer,
  importLayersKnowledgeGraphKnowledgeGraphSublayer: () => importLayersKnowledgeGraphKnowledgeGraphSublayer,
  importLayersKnowledgeGraphLayer: () => importLayersKnowledgeGraphLayer,
  importLayersKnowledgeGraphSupportUtils: () => importLayersKnowledgeGraphSupportUtils,
  importLayersLayer: () => importLayersLayer,
  importLayersLineOfSightLayer: () => importLayersLineOfSightLayer,
  importLayersLinkChartLayer: () => importLayersLinkChartLayer,
  importLayersMapImageLayer: () => importLayersMapImageLayer,
  importLayersMapNotesLayer: () => importLayersMapNotesLayer,
  importLayersMediaLayer: () => importLayersMediaLayer,
  importLayersOGCFeatureLayer: () => importLayersOGCFeatureLayer,
  importLayersOgcWcsUtils: () => importLayersOgcWcsUtils,
  importLayersOgcWfsUtils: () => importLayersOgcWfsUtils,
  importLayersOpenStreetMapLayer: () => importLayersOpenStreetMapLayer,
  importLayersOrientedImageryLayer: () => importLayersOrientedImageryLayer,
  importLayersOrientedImageryTransformationsImageToWorld: () => importLayersOrientedImageryTransformationsImageToWorld,
  importLayersOrientedImageryTransformationsWorldToImage: () => importLayersOrientedImageryTransformationsWorldToImage,
  importLayersPointCloudFiltersPointCloudBitfieldFilter: () => importLayersPointCloudFiltersPointCloudBitfieldFilter,
  importLayersPointCloudFiltersPointCloudFilter: () => importLayersPointCloudFiltersPointCloudFilter,
  importLayersPointCloudFiltersPointCloudReturnFilter: () => importLayersPointCloudFiltersPointCloudReturnFilter,
  importLayersPointCloudFiltersPointCloudValueFilter: () => importLayersPointCloudFiltersPointCloudValueFilter,
  importLayersPointCloudLayer: () => importLayersPointCloudLayer,
  importLayersRouteLayer: () => importLayersRouteLayer,
  importLayersSceneLayer: () => importLayersSceneLayer,
  importLayersStreamLayer: () => importLayersStreamLayer,
  importLayersSubtypeGroupLayer: () => importLayersSubtypeGroupLayer,
  importLayersSupportAggregateField: () => importLayersSupportAggregateField,
  importLayersSupportArcadeUtils: () => importLayersSupportArcadeUtils,
  importLayersSupportBuildingFilter: () => importLayersSupportBuildingFilter,
  importLayersSupportBuildingSummaryStatistics: () => importLayersSupportBuildingSummaryStatistics,
  importLayersSupportCodedValueDomain: () => importLayersSupportCodedValueDomain,
  importLayersSupportControlPointsGeoreference: () => importLayersSupportControlPointsGeoreference,
  importLayersSupportCornersGeoreference: () => importLayersSupportCornersGeoreference,
  importLayersSupportCsvUtils: () => importLayersSupportCsvUtils,
  importLayersSupportDimensionalDefinition: () => importLayersSupportDimensionalDefinition,
  importLayersSupportDisplayFilter: () => importLayersSupportDisplayFilter,
  importLayersSupportDisplayFilterInfo: () => importLayersSupportDisplayFilterInfo,
  importLayersSupportDomain: () => importLayersSupportDomain,
  importLayersSupportElevationSampler: () => importLayersSupportElevationSampler,
  importLayersSupportExpressionInfo: () => importLayersSupportExpressionInfo,
  importLayersSupportExtentAndRotationGeoreference: () => importLayersSupportExtentAndRotationGeoreference,
  importLayersSupportFacilityLayerInfo: () => importLayersSupportFacilityLayerInfo,
  importLayersSupportFeatureEffect: () => importLayersSupportFeatureEffect,
  importLayersSupportFeatureFilter: () => importLayersSupportFeatureFilter,
  importLayersSupportFeatureReductionBinning: () => importLayersSupportFeatureReductionBinning,
  importLayersSupportFeatureReductionCluster: () => importLayersSupportFeatureReductionCluster,
  importLayersSupportFeatureReductionSelection: () => importLayersSupportFeatureReductionSelection,
  importLayersSupportFeatureTemplate: () => importLayersSupportFeatureTemplate,
  importLayersSupportFeatureType: () => importLayersSupportFeatureType,
  importLayersSupportField: () => importLayersSupportField,
  importLayersSupportFieldUtils: () => importLayersSupportFieldUtils,
  importLayersSupportFieldsIndex: () => importLayersSupportFieldsIndex,
  importLayersSupportGeometryFieldsInfo: () => importLayersSupportGeometryFieldsInfo,
  importLayersSupportImageElement: () => importLayersSupportImageElement,
  importLayersSupportInheritedDomain: () => importLayersSupportInheritedDomain,
  importLayersSupportKMLSublayer: () => importLayersSupportKMLSublayer,
  importLayersSupportLOD: () => importLayersSupportLOD,
  importLayersSupportLabelClass: () => importLayersSupportLabelClass,
  importLayersSupportLayerFloorInfo: () => importLayersSupportLayerFloorInfo,
  importLayersSupportLevelLayerInfo: () => importLayersSupportLevelLayerInfo,
  importLayersSupportLocalMediaElementSource: () => importLayersSupportLocalMediaElementSource,
  importLayersSupportMapImage: () => importLayersSupportMapImage,
  importLayersSupportMosaicRule: () => importLayersSupportMosaicRule,
  importLayersSupportMultidimensionalSubset: () => importLayersSupportMultidimensionalSubset,
  importLayersSupportOrderByInfo: () => importLayersSupportOrderByInfo,
  importLayersSupportPixelBlock: () => importLayersSupportPixelBlock,
  importLayersSupportPublishingInfo: () => importLayersSupportPublishingInfo,
  importLayersSupportRangeDomain: () => importLayersSupportRangeDomain,
  importLayersSupportRasterBandInfo: () => importLayersSupportRasterBandInfo,
  importLayersSupportRasterFunction: () => importLayersSupportRasterFunction,
  importLayersSupportRasterFunctionConstants: () => importLayersSupportRasterFunctionConstants,
  importLayersSupportRasterFunctionUtils: () => importLayersSupportRasterFunctionUtils,
  importLayersSupportRasterInfo: () => importLayersSupportRasterInfo,
  importLayersSupportRasterSensorInfo: () => importLayersSupportRasterSensorInfo,
  importLayersSupportRelationship: () => importLayersSupportRelationship,
  importLayersSupportRouteStopSymbols: () => importLayersSupportRouteStopSymbols,
  importLayersSupportRouteSymbols: () => importLayersSupportRouteSymbols,
  importLayersSupportSceneFilter: () => importLayersSupportSceneFilter,
  importLayersSupportSceneModification: () => importLayersSupportSceneModification,
  importLayersSupportSceneModifications: () => importLayersSupportSceneModifications,
  importLayersSupportSiteLayerInfo: () => importLayersSupportSiteLayerInfo,
  importLayersSupportStreamConnection: () => importLayersSupportStreamConnection,
  importLayersSupportSublayer: () => importLayersSupportSublayer,
  importLayersSupportSubtype: () => importLayersSupportSubtype,
  importLayersSupportSubtypeSublayer: () => importLayersSupportSubtypeSublayer,
  importLayersSupportTelemetryData: () => importLayersSupportTelemetryData,
  importLayersSupportTelemetryDisplay: () => importLayersSupportTelemetryDisplay,
  importLayersSupportTileInfo: () => importLayersSupportTileInfo,
  importLayersSupportTileMatrixSet: () => importLayersSupportTileMatrixSet,
  importLayersSupportTimeInfo: () => importLayersSupportTimeInfo,
  importLayersSupportTrackInfo: () => importLayersSupportTrackInfo,
  importLayersSupportTrackPartInfo: () => importLayersSupportTrackPartInfo,
  importLayersSupportVideoElement: () => importLayersSupportVideoElement,
  importLayersSupportVideoTimeExtent: () => importLayersSupportVideoTimeExtent,
  importLayersSupportWMSSublayer: () => importLayersSupportWMSSublayer,
  importLayersSupportWMTSStyle: () => importLayersSupportWMTSStyle,
  importLayersSupportWMTSSublayer: () => importLayersSupportWMTSSublayer,
  importLayersTileLayer: () => importLayersTileLayer,
  importLayersUnknownLayer: () => importLayersUnknownLayer,
  importLayersUnsupportedLayer: () => importLayersUnsupportedLayer,
  importLayersVectorTileLayer: () => importLayersVectorTileLayer,
  importLayersVideoLayer: () => importLayersVideoLayer,
  importLayersViewshedLayer: () => importLayersViewshedLayer,
  importLayersVoxelLayer: () => importLayersVoxelLayer,
  importLayersVoxelVoxelDynamicSection: () => importLayersVoxelVoxelDynamicSection,
  importLayersVoxelVoxelSlice: () => importLayersVoxelVoxelSlice,
  importLayersVoxelVoxelTransferFunctionStyle: () => importLayersVoxelVoxelTransferFunctionStyle,
  importLayersVoxelVoxelVariable: () => importLayersVoxelVoxelVariable,
  importLayersVoxelVoxelVariableStyle: () => importLayersVoxelVoxelVariableStyle,
  importLayersVoxelVoxelVolume: () => importLayersVoxelVoxelVolume,
  importLayersVoxelVoxelVolumeStyle: () => importLayersVoxelVoxelVolumeStyle,
  importLayersWCSLayer: () => importLayersWCSLayer,
  importLayersWFSLayer: () => importLayersWFSLayer,
  importLayersWMSLayer: () => importLayersWMSLayer,
  importLayersWMTSLayer: () => importLayersWMTSLayer,
  importLayersWebTileLayer: () => importLayersWebTileLayer,
  importLinkChartChronologicalLayoutSettings: () => importLinkChartChronologicalLayoutSettings,
  importLinkChartLayoutSettings: () => importLinkChartLayoutSettings,
  importLinkChartLinkChartProperties: () => importLinkChartLinkChartProperties,
  importLinkChartNonspatialDataDisplay: () => importLinkChartNonspatialDataDisplay,
  importLinkChartOrganicLayoutSettings: () => importLinkChartOrganicLayoutSettings,
  importMap: () => importMap,
  importNetworksNetwork: () => importNetworksNetwork,
  importNetworksSupportNamedTraceConfiguration: () => importNetworksSupportNamedTraceConfiguration,
  importNetworksSupportNetworkSystemLayers: () => importNetworksSupportNetworkSystemLayers,
  importNetworksSupportTerminal: () => importNetworksSupportTerminal,
  importNetworksSupportTerminalConfiguration: () => importNetworksSupportTerminalConfiguration,
  importNetworksSupportTopologyValidationJobInfo: () => importNetworksSupportTopologyValidationJobInfo,
  importNetworksSupportTraceConfiguration: () => importNetworksSupportTraceConfiguration,
  importNetworksSupportTraceJobInfo: () => importNetworksSupportTraceJobInfo,
  importNetworksSupportUNTraceConfiguration: () => importNetworksSupportUNTraceConfiguration,
  importNetworksUtilityNetwork: () => importNetworksUtilityNetwork,
  importPointCloudRenderers: () => importPointCloudRenderers,
  importPopupContent: () => importPopupContent,
  importPopupContentAttachmentsContent: () => importPopupContentAttachmentsContent,
  importPopupContentBarChartMediaInfo: () => importPopupContentBarChartMediaInfo,
  importPopupContentColumnChartMediaInfo: () => importPopupContentColumnChartMediaInfo,
  importPopupContentContent: () => importPopupContentContent,
  importPopupContentCustomContent: () => importPopupContentCustomContent,
  importPopupContentExpressionContent: () => importPopupContentExpressionContent,
  importPopupContentFieldsContent: () => importPopupContentFieldsContent,
  importPopupContentImageMediaInfo: () => importPopupContentImageMediaInfo,
  importPopupContentLineChartMediaInfo: () => importPopupContentLineChartMediaInfo,
  importPopupContentMediaContent: () => importPopupContentMediaContent,
  importPopupContentPieChartMediaInfo: () => importPopupContentPieChartMediaInfo,
  importPopupContentRelationshipContent: () => importPopupContentRelationshipContent,
  importPopupContentSupportChartMediaInfoValue: () => importPopupContentSupportChartMediaInfoValue,
  importPopupContentSupportChartMediaInfoValueSeries: () => importPopupContentSupportChartMediaInfoValueSeries,
  importPopupContentSupportImageMediaInfoValue: () => importPopupContentSupportImageMediaInfoValue,
  importPopupContentTextContent: () => importPopupContentTextContent,
  importPopupContentUtilityNetworkAssociationsContent: () => importPopupContentUtilityNetworkAssociationsContent,
  importPopupElementExpressionInfo: () => importPopupElementExpressionInfo,
  importPopupExpressionInfo: () => importPopupExpressionInfo,
  importPopupFieldInfo: () => importPopupFieldInfo,
  importPopupLayerOptions: () => importPopupLayerOptions,
  importPopupRelatedRecordsInfo: () => importPopupRelatedRecordsInfo,
  importPopupSupportAttachmentsOrderByInfo: () => importPopupSupportAttachmentsOrderByInfo,
  importPopupSupportFieldInfoFormat: () => importPopupSupportFieldInfoFormat,
  importPopupSupportRelatedRecordsInfoFieldOrder: () => importPopupSupportRelatedRecordsInfoFieldOrder,
  importPopupSupportUtilityNetworkAssociationType: () => importPopupSupportUtilityNetworkAssociationType,
  importPopupTemplate: () => importPopupTemplate,
  importPortalPortal: () => importPortalPortal,
  importPortalPortalFolder: () => importPortalPortalFolder,
  importPortalPortalGroup: () => importPortalPortalGroup,
  importPortalPortalItem: () => importPortalPortalItem,
  importPortalPortalItemResource: () => importPortalPortalItemResource,
  importPortalPortalQueryParams: () => importPortalPortalQueryParams,
  importPortalPortalQueryResult: () => importPortalPortalQueryResult,
  importPortalPortalRating: () => importPortalPortalRating,
  importPortalPortalUser: () => importPortalPortalUser,
  importRasterRenderers: () => importRasterRenderers,
  importRenderers: () => importRenderers,
  importRenderersClassBreaksRenderer: () => importRenderersClassBreaksRenderer,
  importRenderersDictionaryRenderer: () => importRenderersDictionaryRenderer,
  importRenderersDotDensityRenderer: () => importRenderersDotDensityRenderer,
  importRenderersFlowRenderer: () => importRenderersFlowRenderer,
  importRenderersHeatmapRenderer: () => importRenderersHeatmapRenderer,
  importRenderersPieChartRenderer: () => importRenderersPieChartRenderer,
  importRenderersPointCloudClassBreaksRenderer: () => importRenderersPointCloudClassBreaksRenderer,
  importRenderersPointCloudRGBRenderer: () => importRenderersPointCloudRGBRenderer,
  importRenderersPointCloudRenderer: () => importRenderersPointCloudRenderer,
  importRenderersPointCloudStretchRenderer: () => importRenderersPointCloudStretchRenderer,
  importRenderersPointCloudUniqueValueRenderer: () => importRenderersPointCloudUniqueValueRenderer,
  importRenderersRasterColormapRenderer: () => importRenderersRasterColormapRenderer,
  importRenderersRasterShadedReliefRenderer: () => importRenderersRasterShadedReliefRenderer,
  importRenderersRasterStretchRenderer: () => importRenderersRasterStretchRenderer,
  importRenderersRenderer: () => importRenderersRenderer,
  importRenderersSimpleRenderer: () => importRenderersSimpleRenderer,
  importRenderersSupportAttributeColorInfo: () => importRenderersSupportAttributeColorInfo,
  importRenderersSupportAuthoringInfo: () => importRenderersSupportAuthoringInfo,
  importRenderersSupportAuthoringInfoVisualVariable: () => importRenderersSupportAuthoringInfoVisualVariable,
  importRenderersSupportClassBreakInfo: () => importRenderersSupportClassBreakInfo,
  importRenderersSupportColormapInfo: () => importRenderersSupportColormapInfo,
  importRenderersSupportHeatmapColorStop: () => importRenderersSupportHeatmapColorStop,
  importRenderersSupportJsonUtils: () => importRenderersSupportJsonUtils,
  importRenderersSupportRasterPresetRenderer: () => importRenderersSupportRasterPresetRenderer,
  importRenderersSupportUniqueValue: () => importRenderersSupportUniqueValue,
  importRenderersSupportUniqueValueClass: () => importRenderersSupportUniqueValueClass,
  importRenderersSupportUniqueValueGroup: () => importRenderersSupportUniqueValueGroup,
  importRenderersSupportUniqueValueInfo: () => importRenderersSupportUniqueValueInfo,
  importRenderersSupportUtils: () => importRenderersSupportUtils,
  importRenderersUniqueValueRenderer: () => importRenderersUniqueValueRenderer,
  importRenderersVectorFieldRenderer: () => importRenderersVectorFieldRenderer,
  importRenderersVisualVariablesColorVariable: () => importRenderersVisualVariablesColorVariable,
  importRenderersVisualVariablesOpacityVariable: () => importRenderersVisualVariablesOpacityVariable,
  importRenderersVisualVariablesRotationVariable: () => importRenderersVisualVariablesRotationVariable,
  importRenderersVisualVariablesSizeVariable: () => importRenderersVisualVariablesSizeVariable,
  importRenderersVisualVariablesSupportColorSizeStop: () => importRenderersVisualVariablesSupportColorSizeStop,
  importRenderersVisualVariablesSupportColorStop: () => importRenderersVisualVariablesSupportColorStop,
  importRenderersVisualVariablesSupportOpacityStop: () => importRenderersVisualVariablesSupportOpacityStop,
  importRenderersVisualVariablesSupportSizeStop: () => importRenderersVisualVariablesSupportSizeStop,
  importRenderersVisualVariablesVisualVariable: () => importRenderersVisualVariablesVisualVariable,
  importRequest: () => importRequest,
  importRestClosestFacility: () => importRestClosestFacility,
  importRestFeatureServiceFeatureService: () => importRestFeatureServiceFeatureService,
  importRestFeatureServiceUtils: () => importRestFeatureServiceUtils,
  importRestFind: () => importRestFind,
  importRestGeometryService: () => importRestGeometryService,
  importRestGeoprocessor: () => importRestGeoprocessor,
  importRestGeoprocessorGPOptions: () => importRestGeoprocessorGPOptions,
  importRestIdentify: () => importRestIdentify,
  importRestImageService: () => importRestImageService,
  importRestKnowledgeGraphDataModel: () => importRestKnowledgeGraphDataModel,
  importRestKnowledgeGraphEntity: () => importRestKnowledgeGraphEntity,
  importRestKnowledgeGraphEntityType: () => importRestKnowledgeGraphEntityType,
  importRestKnowledgeGraphFieldIndex: () => importRestKnowledgeGraphFieldIndex,
  importRestKnowledgeGraphGraphApplyEdits: () => importRestKnowledgeGraphGraphApplyEdits,
  importRestKnowledgeGraphGraphApplyEditsResult: () => importRestKnowledgeGraphGraphApplyEditsResult,
  importRestKnowledgeGraphGraphNamedObject: () => importRestKnowledgeGraphGraphNamedObject,
  importRestKnowledgeGraphGraphObject: () => importRestKnowledgeGraphGraphObject,
  importRestKnowledgeGraphGraphObjectType: () => importRestKnowledgeGraphGraphObjectType,
  importRestKnowledgeGraphGraphProperty: () => importRestKnowledgeGraphGraphProperty,
  importRestKnowledgeGraphGraphQuery: () => importRestKnowledgeGraphGraphQuery,
  importRestKnowledgeGraphGraphQueryResult: () => importRestKnowledgeGraphGraphQueryResult,
  importRestKnowledgeGraphGraphQueryResultHeader: () => importRestKnowledgeGraphGraphQueryResultHeader,
  importRestKnowledgeGraphGraphQueryStreaming: () => importRestKnowledgeGraphGraphQueryStreaming,
  importRestKnowledgeGraphGraphQueryStreamingResult: () => importRestKnowledgeGraphGraphQueryStreamingResult,
  importRestKnowledgeGraphGraphSearch: () => importRestKnowledgeGraphGraphSearch,
  importRestKnowledgeGraphGraphSearchStreaming: () => importRestKnowledgeGraphGraphSearchStreaming,
  importRestKnowledgeGraphInputQuantizationParameters: () => importRestKnowledgeGraphInputQuantizationParameters,
  importRestKnowledgeGraphKnowledgeGraph: () => importRestKnowledgeGraphKnowledgeGraph,
  importRestKnowledgeGraphOutputQuantizationParameters: () => importRestKnowledgeGraphOutputQuantizationParameters,
  importRestKnowledgeGraphPath: () => importRestKnowledgeGraphPath,
  importRestKnowledgeGraphRelationship: () => importRestKnowledgeGraphRelationship,
  importRestKnowledgeGraphRelationshipType: () => importRestKnowledgeGraphRelationshipType,
  importRestKnowledgeGraphSearchIndex: () => importRestKnowledgeGraphSearchIndex,
  importRestKnowledgeGraphService: () => importRestKnowledgeGraphService,
  importRestKnowledgeGraphServiceDefinition: () => importRestKnowledgeGraphServiceDefinition,
  importRestKnowledgeGraphSourceTypeValueBehavior: () => importRestKnowledgeGraphSourceTypeValueBehavior,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration: () => importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity: () => importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter: () => importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter,
  importRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection: () => importRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection,
  importRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings: () => importRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings,
  importRestLocator: () => importRestLocator,
  importRestNetworkService: () => importRestNetworkService,
  importRestNetworksQueryAssociations: () => importRestNetworksQueryAssociations,
  importRestNetworksSupportAggregatedGeometry: () => importRestNetworksSupportAggregatedGeometry,
  importRestNetworksSupportAssociation: () => importRestNetworksSupportAssociation,
  importRestNetworksSupportAssociationGeometriesResult: () => importRestNetworksSupportAssociationGeometriesResult,
  importRestNetworksSupportFunctionResult: () => importRestNetworksSupportFunctionResult,
  importRestNetworksSupportNetworkElement: () => importRestNetworksSupportNetworkElement,
  importRestNetworksSupportQueryAssociationsParameters: () => importRestNetworksSupportQueryAssociationsParameters,
  importRestNetworksSupportQueryAssociationsResult: () => importRestNetworksSupportQueryAssociationsResult,
  importRestNetworksSupportSynthesizeAssociationGeometriesParameters: () => importRestNetworksSupportSynthesizeAssociationGeometriesParameters,
  importRestNetworksSupportTraceLocation: () => importRestNetworksSupportTraceLocation,
  importRestNetworksSupportTraceParameters: () => importRestNetworksSupportTraceParameters,
  importRestNetworksSupportTraceResult: () => importRestNetworksSupportTraceResult,
  importRestNetworksSupportValidateNetworkTopologyParameters: () => importRestNetworksSupportValidateNetworkTopologyParameters,
  importRestNetworksSupportValidateNetworkTopologyResult: () => importRestNetworksSupportValidateNetworkTopologyResult,
  importRestNetworksSynthesizeAssociationGeometries: () => importRestNetworksSynthesizeAssociationGeometries,
  importRestNetworksTrace: () => importRestNetworksTrace,
  importRestPlaces: () => importRestPlaces,
  importRestPrint: () => importRestPrint,
  importRestQuery: () => importRestQuery,
  importRestQuerySupportAttachmentInfo: () => importRestQuerySupportAttachmentInfo,
  importRestRoute: () => importRestRoute,
  importRestServiceArea: () => importRestServiceArea,
  importRestSupportAddressCandidate: () => importRestSupportAddressCandidate,
  importRestSupportAlgorithmicColorRamp: () => importRestSupportAlgorithmicColorRamp,
  importRestSupportArealUnit: () => importRestSupportArealUnit,
  importRestSupportAreasAndLengthsParameters: () => importRestSupportAreasAndLengthsParameters,
  importRestSupportAttachmentQuery: () => importRestSupportAttachmentQuery,
  importRestSupportAttributeBinsFeatureSet: () => importRestSupportAttributeBinsFeatureSet,
  importRestSupportAttributeBinsGrouping: () => importRestSupportAttributeBinsGrouping,
  importRestSupportAttributeBinsQuery: () => importRestSupportAttributeBinsQuery,
  importRestSupportAutoIntervalBinParameters: () => importRestSupportAutoIntervalBinParameters,
  importRestSupportBaseImageMeasureParameters: () => importRestSupportBaseImageMeasureParameters,
  importRestSupportBaseImageMeasureResult: () => importRestSupportBaseImageMeasureResult,
  importRestSupportBufferParameters: () => importRestSupportBufferParameters,
  importRestSupportCameraInfo: () => importRestSupportCameraInfo,
  importRestSupportClosestFacilityParameters: () => importRestSupportClosestFacilityParameters,
  importRestSupportClosestFacilitySolveResult: () => importRestSupportClosestFacilitySolveResult,
  importRestSupportColorRamp: () => importRestSupportColorRamp,
  importRestSupportDataFile: () => importRestSupportDataFile,
  importRestSupportDataLayer: () => importRestSupportDataLayer,
  importRestSupportDateBinParameters: () => importRestSupportDateBinParameters,
  importRestSupportDateBinTimeInterval: () => importRestSupportDateBinTimeInterval,
  importRestSupportDensifyParameters: () => importRestSupportDensifyParameters,
  importRestSupportDirectionLine: () => importRestSupportDirectionLine,
  importRestSupportDirectionPoint: () => importRestSupportDirectionPoint,
  importRestSupportDirectionsEvent: () => importRestSupportDirectionsEvent,
  importRestSupportDirectionsFeature: () => importRestSupportDirectionsFeature,
  importRestSupportDirectionsFeatureSet: () => importRestSupportDirectionsFeatureSet,
  importRestSupportDistanceParameters: () => importRestSupportDistanceParameters,
  importRestSupportFeatureSet: () => importRestSupportFeatureSet,
  importRestSupportFetchPlaceParameters: () => importRestSupportFetchPlaceParameters,
  importRestSupportFindImagesParameters: () => importRestSupportFindImagesParameters,
  importRestSupportFindImagesResult: () => importRestSupportFindImagesResult,
  importRestSupportFindParameters: () => importRestSupportFindParameters,
  importRestSupportFindResult: () => importRestSupportFindResult,
  importRestSupportFixedBoundariesBinParameters: () => importRestSupportFixedBoundariesBinParameters,
  importRestSupportFixedIntervalBinParameters: () => importRestSupportFixedIntervalBinParameters,
  importRestSupportGPMessage: () => importRestSupportGPMessage,
  importRestSupportGeneralizeParameters: () => importRestSupportGeneralizeParameters,
  importRestSupportIdentifyParameters: () => importRestSupportIdentifyParameters,
  importRestSupportIdentifyResult: () => importRestSupportIdentifyResult,
  importRestSupportImageAngleParameters: () => importRestSupportImageAngleParameters,
  importRestSupportImageAngleResult: () => importRestSupportImageAngleResult,
  importRestSupportImageAreaParameters: () => importRestSupportImageAreaParameters,
  importRestSupportImageAreaResult: () => importRestSupportImageAreaResult,
  importRestSupportImageBoundaryParameters: () => importRestSupportImageBoundaryParameters,
  importRestSupportImageBoundaryResult: () => importRestSupportImageBoundaryResult,
  importRestSupportImageDistanceParameters: () => importRestSupportImageDistanceParameters,
  importRestSupportImageDistanceResult: () => importRestSupportImageDistanceResult,
  importRestSupportImageGPSInfo: () => importRestSupportImageGPSInfo,
  importRestSupportImageGPSInfoParameters: () => importRestSupportImageGPSInfoParameters,
  importRestSupportImageGPSInfoResult: () => importRestSupportImageGPSInfoResult,
  importRestSupportImageHeightParameters: () => importRestSupportImageHeightParameters,
  importRestSupportImageHeightResult: () => importRestSupportImageHeightResult,
  importRestSupportImageHistogramParameters: () => importRestSupportImageHistogramParameters,
  importRestSupportImageIdentifyParameters: () => importRestSupportImageIdentifyParameters,
  importRestSupportImageIdentifyResult: () => importRestSupportImageIdentifyResult,
  importRestSupportImageInspectionInfo: () => importRestSupportImageInspectionInfo,
  importRestSupportImageParameters: () => importRestSupportImageParameters,
  importRestSupportImagePixelLocationParameters: () => importRestSupportImagePixelLocationParameters,
  importRestSupportImagePixelLocationResult: () => importRestSupportImagePixelLocationResult,
  importRestSupportImagePointParameters: () => importRestSupportImagePointParameters,
  importRestSupportImagePointResult: () => importRestSupportImagePointResult,
  importRestSupportImageSample: () => importRestSupportImageSample,
  importRestSupportImageSampleParameters: () => importRestSupportImageSampleParameters,
  importRestSupportImageSampleResult: () => importRestSupportImageSampleResult,
  importRestSupportImageToMapMultirayParameters: () => importRestSupportImageToMapMultirayParameters,
  importRestSupportImageToMapParameters: () => importRestSupportImageToMapParameters,
  importRestSupportImageUrlParameters: () => importRestSupportImageUrlParameters,
  importRestSupportImageUrlResult: () => importRestSupportImageUrlResult,
  importRestSupportImageVolume: () => importRestSupportImageVolume,
  importRestSupportImageVolumeParameters: () => importRestSupportImageVolumeParameters,
  importRestSupportImageVolumeResult: () => importRestSupportImageVolumeResult,
  importRestSupportJobInfo: () => importRestSupportJobInfo,
  importRestSupportLegendLayer: () => importRestSupportLegendLayer,
  importRestSupportLengthsParameters: () => importRestSupportLengthsParameters,
  importRestSupportLinearUnit: () => importRestSupportLinearUnit,
  importRestSupportMapToImageParameters: () => importRestSupportMapToImageParameters,
  importRestSupportMeasureAreaFromImageResult: () => importRestSupportMeasureAreaFromImageResult,
  importRestSupportMeasureFromImageParameters: () => importRestSupportMeasureFromImageParameters,
  importRestSupportMeasureLengthFromImageResult: () => importRestSupportMeasureLengthFromImageResult,
  importRestSupportMultipartColorRamp: () => importRestSupportMultipartColorRamp,
  importRestSupportNAMessage: () => importRestSupportNAMessage,
  importRestSupportNetworkFeatureSet: () => importRestSupportNetworkFeatureSet,
  importRestSupportNetworkUrl: () => importRestSupportNetworkUrl,
  importRestSupportOffsetParameters: () => importRestSupportOffsetParameters,
  importRestSupportParameterValue: () => importRestSupportParameterValue,
  importRestSupportPlaceResult: () => importRestSupportPlaceResult,
  importRestSupportPlacesParameters: () => importRestSupportPlacesParameters,
  importRestSupportPlacesQueryParameters: () => importRestSupportPlacesQueryParameters,
  importRestSupportPlacesQueryResult: () => importRestSupportPlacesQueryResult,
  importRestSupportPointBarrier: () => importRestSupportPointBarrier,
  importRestSupportPolygonBarrier: () => importRestSupportPolygonBarrier,
  importRestSupportPolylineBarrier: () => importRestSupportPolylineBarrier,
  importRestSupportPrintParameters: () => importRestSupportPrintParameters,
  importRestSupportPrintTemplate: () => importRestSupportPrintTemplate,
  importRestSupportProjectParameters: () => importRestSupportProjectParameters,
  importRestSupportQuery: () => importRestSupportQuery,
  importRestSupportRasterData: () => importRestSupportRasterData,
  importRestSupportRelationParameters: () => importRestSupportRelationParameters,
  importRestSupportRelationshipQuery: () => importRestSupportRelationshipQuery,
  importRestSupportRouteInfo: () => importRestSupportRouteInfo,
  importRestSupportRouteParameters: () => importRestSupportRouteParameters,
  importRestSupportRouteResult: () => importRestSupportRouteResult,
  importRestSupportRouteSolveResult: () => importRestSupportRouteSolveResult,
  importRestSupportServiceAreaParameters: () => importRestSupportServiceAreaParameters,
  importRestSupportServiceAreaSolveResult: () => importRestSupportServiceAreaSolveResult,
  importRestSupportStatisticDefinition: () => importRestSupportStatisticDefinition,
  importRestSupportStop: () => importRestSupportStop,
  importRestSupportTopFeaturesQuery: () => importRestSupportTopFeaturesQuery,
  importRestSupportTopFilter: () => importRestSupportTopFilter,
  importRestSupportTravelMode: () => importRestSupportTravelMode,
  importRestSupportTrimExtendParameters: () => importRestSupportTrimExtendParameters,
  importRestSymbolService: () => importRestSymbolService,
  importSmartMappingHeuristicsBinLevel: () => importSmartMappingHeuristicsBinLevel,
  importSmartMappingHeuristicsScaleRange: () => importSmartMappingHeuristicsScaleRange,
  importSmartMappingHeuristicsSizeRange: () => importSmartMappingHeuristicsSizeRange,
  importSmartMappingLabelsBins: () => importSmartMappingLabelsBins,
  importSmartMappingLabelsClusters: () => importSmartMappingLabelsClusters,
  importSmartMappingPopupClusters: () => importSmartMappingPopupClusters,
  importSmartMappingPopupTemplates: () => importSmartMappingPopupTemplates,
  importSmartMappingRasterRenderersClassBreaks: () => importSmartMappingRasterRenderersClassBreaks,
  importSmartMappingRasterRenderersColormap: () => importSmartMappingRasterRenderersColormap,
  importSmartMappingRasterRenderersFlow: () => importSmartMappingRasterRenderersFlow,
  importSmartMappingRasterRenderersRgb: () => importSmartMappingRasterRenderersRgb,
  importSmartMappingRasterRenderersShadedRelief: () => importSmartMappingRasterRenderersShadedRelief,
  importSmartMappingRasterRenderersStretch: () => importSmartMappingRasterRenderersStretch,
  importSmartMappingRasterRenderersUniqueValue: () => importSmartMappingRasterRenderersUniqueValue,
  importSmartMappingRasterRenderersVectorField: () => importSmartMappingRasterRenderersVectorField,
  importSmartMappingRasterSupportColorRamps: () => importSmartMappingRasterSupportColorRamps,
  importSmartMappingRasterSupportUtils: () => importSmartMappingRasterSupportUtils,
  importSmartMappingRenderersColor: () => importSmartMappingRenderersColor,
  importSmartMappingRenderersDotDensity: () => importSmartMappingRenderersDotDensity,
  importSmartMappingRenderersHeatmap: () => importSmartMappingRenderersHeatmap,
  importSmartMappingRenderersLocation: () => importSmartMappingRenderersLocation,
  importSmartMappingRenderersOpacity: () => importSmartMappingRenderersOpacity,
  importSmartMappingRenderersPieChart: () => importSmartMappingRenderersPieChart,
  importSmartMappingRenderersPredominance: () => importSmartMappingRenderersPredominance,
  importSmartMappingRenderersRelationship: () => importSmartMappingRenderersRelationship,
  importSmartMappingRenderersSize: () => importSmartMappingRenderersSize,
  importSmartMappingRenderersSupportRendererUtils: () => importSmartMappingRenderersSupportRendererUtils,
  importSmartMappingRenderersType: () => importSmartMappingRenderersType,
  importSmartMappingRenderersUnivariateColorSize: () => importSmartMappingRenderersUnivariateColorSize,
  importSmartMappingStatisticsClassBreaks: () => importSmartMappingStatisticsClassBreaks,
  importSmartMappingStatisticsHeatmapStatistics: () => importSmartMappingStatisticsHeatmapStatistics,
  importSmartMappingStatisticsHistogram: () => importSmartMappingStatisticsHistogram,
  importSmartMappingStatisticsPredominantCategories: () => importSmartMappingStatisticsPredominantCategories,
  importSmartMappingStatisticsSummaryStatistics: () => importSmartMappingStatisticsSummaryStatistics,
  importSmartMappingStatisticsSummaryStatisticsForAge: () => importSmartMappingStatisticsSummaryStatisticsForAge,
  importSmartMappingStatisticsSupportAgeUtils: () => importSmartMappingStatisticsSupportAgeUtils,
  importSmartMappingStatisticsSupportPredominanceUtils: () => importSmartMappingStatisticsSupportPredominanceUtils,
  importSmartMappingStatisticsUniqueValues: () => importSmartMappingStatisticsUniqueValues,
  importSmartMappingSymbologyColor: () => importSmartMappingSymbologyColor,
  importSmartMappingSymbologyDotDensity: () => importSmartMappingSymbologyDotDensity,
  importSmartMappingSymbologyFlow: () => importSmartMappingSymbologyFlow,
  importSmartMappingSymbologyHeatmap: () => importSmartMappingSymbologyHeatmap,
  importSmartMappingSymbologyLocation: () => importSmartMappingSymbologyLocation,
  importSmartMappingSymbologyPieChart: () => importSmartMappingSymbologyPieChart,
  importSmartMappingSymbologyPredominance: () => importSmartMappingSymbologyPredominance,
  importSmartMappingSymbologyRelationship: () => importSmartMappingSymbologyRelationship,
  importSmartMappingSymbologySize: () => importSmartMappingSymbologySize,
  importSmartMappingSymbologySupportColorRamps: () => importSmartMappingSymbologySupportColorRamps,
  importSmartMappingSymbologyType: () => importSmartMappingSymbologyType,
  importSupportActionsActionBase: () => importSupportActionsActionBase,
  importSupportActionsActionButton: () => importSupportActionsActionButton,
  importSupportActionsActionToggle: () => importSupportActionsActionToggle,
  importSupportBasemapStyle: () => importSupportBasemapStyle,
  importSupportMapFloorInfo: () => importSupportMapFloorInfo,
  importSupportPopupUtils: () => importSupportPopupUtils,
  importSupportTimeUtils: () => importSupportTimeUtils,
  importSymbols: () => importSymbols,
  importSymbolsCIMSymbol: () => importSymbolsCIMSymbol,
  importSymbolsCalloutsCallout3D: () => importSymbolsCalloutsCallout3D,
  importSymbolsCalloutsLineCallout3D: () => importSymbolsCalloutsLineCallout3D,
  importSymbolsEdgesEdges3D: () => importSymbolsEdgesEdges3D,
  importSymbolsEdgesSketchEdges3D: () => importSymbolsEdgesSketchEdges3D,
  importSymbolsEdgesSolidEdges3D: () => importSymbolsEdgesSolidEdges3D,
  importSymbolsExtrudeSymbol3DLayer: () => importSymbolsExtrudeSymbol3DLayer,
  importSymbolsFillSymbol: () => importSymbolsFillSymbol,
  importSymbolsFillSymbol3DLayer: () => importSymbolsFillSymbol3DLayer,
  importSymbolsFont: () => importSymbolsFont,
  importSymbolsIconSymbol3DLayer: () => importSymbolsIconSymbol3DLayer,
  importSymbolsLabelSymbol3D: () => importSymbolsLabelSymbol3D,
  importSymbolsLineStyleMarker3D: () => importSymbolsLineStyleMarker3D,
  importSymbolsLineSymbol: () => importSymbolsLineSymbol,
  importSymbolsLineSymbol3D: () => importSymbolsLineSymbol3D,
  importSymbolsLineSymbol3DLayer: () => importSymbolsLineSymbol3DLayer,
  importSymbolsLineSymbolMarker: () => importSymbolsLineSymbolMarker,
  importSymbolsMarkerSymbol: () => importSymbolsMarkerSymbol,
  importSymbolsMeshSymbol3D: () => importSymbolsMeshSymbol3D,
  importSymbolsObjectSymbol3DLayer: () => importSymbolsObjectSymbol3DLayer,
  importSymbolsPathSymbol3DLayer: () => importSymbolsPathSymbol3DLayer,
  importSymbolsPatternsLineStylePattern3D: () => importSymbolsPatternsLineStylePattern3D,
  importSymbolsPatternsStylePattern3D: () => importSymbolsPatternsStylePattern3D,
  importSymbolsPictureFillSymbol: () => importSymbolsPictureFillSymbol,
  importSymbolsPictureMarkerSymbol: () => importSymbolsPictureMarkerSymbol,
  importSymbolsPointSymbol3D: () => importSymbolsPointSymbol3D,
  importSymbolsPolygonSymbol3D: () => importSymbolsPolygonSymbol3D,
  importSymbolsSimpleFillSymbol: () => importSymbolsSimpleFillSymbol,
  importSymbolsSimpleLineSymbol: () => importSymbolsSimpleLineSymbol,
  importSymbolsSimpleMarkerSymbol: () => importSymbolsSimpleMarkerSymbol,
  importSymbolsSupportCimConversionUtils: () => importSymbolsSupportCimConversionUtils,
  importSymbolsSupportCimSymbolUtils: () => importSymbolsSupportCimSymbolUtils,
  importSymbolsSupportJsonUtils: () => importSymbolsSupportJsonUtils,
  importSymbolsSupportStyleOrigin: () => importSymbolsSupportStyleOrigin,
  importSymbolsSupportSymbol3DVerticalOffset: () => importSymbolsSupportSymbol3DVerticalOffset,
  importSymbolsSupportSymbolUtils: () => importSymbolsSupportSymbolUtils,
  importSymbolsSymbol: () => importSymbolsSymbol,
  importSymbolsSymbol3D: () => importSymbolsSymbol3D,
  importSymbolsSymbol3DLayer: () => importSymbolsSymbol3DLayer,
  importSymbolsTextSymbol: () => importSymbolsTextSymbol,
  importSymbolsTextSymbol3DLayer: () => importSymbolsTextSymbol3DLayer,
  importSymbolsWaterSymbol3DLayer: () => importSymbolsWaterSymbol3DLayer,
  importSymbolsWebStyleSymbol: () => importSymbolsWebStyleSymbol,
  importTablesAttributeTableTemplate: () => importTablesAttributeTableTemplate,
  importTablesElements: () => importTablesElements,
  importTablesElementsAttributeTableAttachmentElement: () => importTablesElementsAttributeTableAttachmentElement,
  importTablesElementsAttributeTableElement: () => importTablesElementsAttributeTableElement,
  importTablesElementsAttributeTableFieldElement: () => importTablesElementsAttributeTableFieldElement,
  importTablesElementsAttributeTableGroupElement: () => importTablesElementsAttributeTableGroupElement,
  importTablesElementsAttributeTableRelationshipElement: () => importTablesElementsAttributeTableRelationshipElement,
  importTimeExtent: () => importTimeExtent,
  importTimeInterval: () => importTimeInterval,
  importTimeTimeExtent: () => importTimeTimeExtent,
  importTimeTimeInterval: () => importTimeTimeInterval,
  importVersionManagementUtils: () => importVersionManagementUtils,
  importVersionManagementVersionAdaptersUtils: () => importVersionManagementVersionAdaptersUtils,
  importVersionManagementVersionManagementService: () => importVersionManagementVersionManagementService,
  importVersionManagementVersioningState: () => importVersionManagementVersioningState,
  importViewpoint: () => importViewpoint,
  importViews2dLayersBaseLayerView2D: () => importViews2dLayersBaseLayerView2D,
  importViews2dLayersBaseLayerViewGL2D: () => importViews2dLayersBaseLayerViewGL2D,
  importViews2dViewState: () => importViews2dViewState,
  importViews3dAnalysisAreaMeasurementAnalysisView3D: () => importViews3dAnalysisAreaMeasurementAnalysisView3D,
  importViews3dAnalysisDirectLineMeasurementAnalysisView3D: () => importViews3dAnalysisDirectLineMeasurementAnalysisView3D,
  importViews3dAnalysisLineOfSightAnalysisResult: () => importViews3dAnalysisLineOfSightAnalysisResult,
  importViews3dAnalysisLineOfSightAnalysisView3D: () => importViews3dAnalysisLineOfSightAnalysisView3D,
  importViews3dAnalysisSliceAnalysisView3D: () => importViews3dAnalysisSliceAnalysisView3D,
  importViews3dAnalysisViewshedAnalysisView3D: () => importViews3dAnalysisViewshedAnalysisView3D,
  importViews3dEnvironmentCloudyWeather: () => importViews3dEnvironmentCloudyWeather,
  importViews3dEnvironmentFoggyWeather: () => importViews3dEnvironmentFoggyWeather,
  importViews3dEnvironmentRainyWeather: () => importViews3dEnvironmentRainyWeather,
  importViews3dEnvironmentSnowyWeather: () => importViews3dEnvironmentSnowyWeather,
  importViews3dEnvironmentSunLighting: () => importViews3dEnvironmentSunLighting,
  importViews3dEnvironmentSunnyWeather: () => importViews3dEnvironmentSunnyWeather,
  importViews3dEnvironmentVirtualLighting: () => importViews3dEnvironmentVirtualLighting,
  importViews3dSupportLayerPerformanceInfo: () => importViews3dSupportLayerPerformanceInfo,
  importViews3dSupportSceneViewPerformanceInfo: () => importViews3dSupportSceneViewPerformanceInfo,
  importViews3dWebgl: () => importViews3dWebgl,
  importViews3dWebglManagedFBO: () => importViews3dWebglManagedFBO,
  importViews3dWebglRenderCamera: () => importViews3dWebglRenderCamera,
  importViews3dWebglRenderNode: () => importViews3dWebglRenderNode,
  importViewsAnalysisDimensionAnalysisView: () => importViewsAnalysisDimensionAnalysisView,
  importViewsAnalysisLengthDimensionResult: () => importViewsAnalysisLengthDimensionResult,
  importViewsBasemapView: () => importViewsBasemapView,
  importViewsDrawDraw: () => importViewsDrawDraw,
  importViewsDrawDrawAction: () => importViewsDrawDrawAction,
  importViewsDrawMultipointDrawAction: () => importViewsDrawMultipointDrawAction,
  importViewsDrawPointDrawAction: () => importViewsDrawPointDrawAction,
  importViewsDrawPolygonDrawAction: () => importViewsDrawPolygonDrawAction,
  importViewsDrawPolylineDrawAction: () => importViewsDrawPolylineDrawAction,
  importViewsDrawSegmentDrawAction: () => importViewsDrawSegmentDrawAction,
  importViewsGroundView: () => importViewsGroundView,
  importViewsInputGamepadGamepadInputDevice: () => importViewsInputGamepadGamepadInputDevice,
  importViewsInputGamepadGamepadSettings: () => importViewsInputGamepadGamepadSettings,
  importViewsInputInput: () => importViewsInputInput,
  importViewsInteractiveSketchSketchLabelOptions: () => importViewsInteractiveSketchSketchLabelOptions,
  importViewsInteractiveSketchSketchTooltipOptions: () => importViewsInteractiveSketchSketchTooltipOptions,
  importViewsInteractiveSketchSketchValueOptions: () => importViewsInteractiveSketchSketchValueOptions,
  importViewsInteractiveSnappingFeatureSnappingLayerSource: () => importViewsInteractiveSnappingFeatureSnappingLayerSource,
  importViewsInteractiveSnappingSnappingOptions: () => importViewsInteractiveSnappingSnappingOptions,
  importViewsInteractiveTooltip: () => importViewsInteractiveTooltip,
  importViewsLayersBuildingComponentSublayerView: () => importViewsLayersBuildingComponentSublayerView,
  importViewsLayersBuildingSceneLayerView: () => importViewsLayersBuildingSceneLayerView,
  importViewsLayersCatalogDynamicGroupLayerView: () => importViewsLayersCatalogDynamicGroupLayerView,
  importViewsLayersCatalogFootprintLayerView: () => importViewsLayersCatalogFootprintLayerView,
  importViewsLayersCatalogLayerView: () => importViewsLayersCatalogLayerView,
  importViewsLayersDimensionLayerView: () => importViewsLayersDimensionLayerView,
  importViewsLayersFeatureLayerView: () => importViewsLayersFeatureLayerView,
  importViewsLayersGroupLayerView: () => importViewsLayersGroupLayerView,
  importViewsLayersImageryLayerView: () => importViewsLayersImageryLayerView,
  importViewsLayersImageryTileLayerView: () => importViewsLayersImageryTileLayerView,
  importViewsLayersLayerView: () => importViewsLayersLayerView,
  importViewsLayersMediaLayerView: () => importViewsLayersMediaLayerView,
  importViewsLayersOGCFeatureLayerView: () => importViewsLayersOGCFeatureLayerView,
  importViewsLayersSceneLayerView: () => importViewsLayersSceneLayerView,
  importViewsLayersStreamLayerView: () => importViewsLayersStreamLayerView,
  importViewsLayersViewshedLayerView: () => importViewsLayersViewshedLayerView,
  importViewsLinkChartView: () => importViewsLinkChartView,
  importViewsMagnifier: () => importViewsMagnifier,
  importViewsMapView: () => importViewsMapView,
  importViewsNavigationGamepadGamepadSettings: () => importViewsNavigationGamepadGamepadSettings,
  importViewsNavigationNavigation: () => importViewsNavigationNavigation,
  importViewsNavigationNavigationActionMap: () => importViewsNavigationNavigationActionMap,
  importViewsSceneView: () => importViewsSceneView,
  importViewsSupportColorUtils: () => importViewsSupportColorUtils,
  importViewsSupportHighlightOptions: () => importViewsSupportHighlightOptions,
  importViewsTheme: () => importViewsTheme,
  importViewsUiDefaultUI: () => importViewsUiDefaultUI,
  importViewsUiUI: () => importViewsUiUI,
  importViewsView: () => importViewsView,
  importViewsView2D: () => importViewsView2D,
  importViewsViewAnimation: () => importViewsViewAnimation,
  importWebDocument2D: () => importWebDocument2D,
  importWebLinkChart: () => importWebLinkChart,
  importWebMap: () => importWebMap,
  importWebScene: () => importWebScene,
  importWebdocApplicationPropertiesSearch: () => importWebdocApplicationPropertiesSearch,
  importWebdocApplicationPropertiesSearchLayer: () => importWebdocApplicationPropertiesSearchLayer,
  importWebdocApplicationPropertiesSearchLayerField: () => importWebdocApplicationPropertiesSearchLayerField,
  importWebdocApplicationPropertiesSearchTable: () => importWebdocApplicationPropertiesSearchTable,
  importWebdocApplicationPropertiesSearchTableField: () => importWebdocApplicationPropertiesSearchTableField,
  importWebdocApplicationPropertiesViewing: () => importWebdocApplicationPropertiesViewing,
  importWebdocGeotriggersInfo: () => importWebdocGeotriggersInfo,
  importWebdocGeotriggersInfoDeviceLocationFeed: () => importWebdocGeotriggersInfoDeviceLocationFeed,
  importWebdocGeotriggersInfoExpressionInfo: () => importWebdocGeotriggersInfoExpressionInfo,
  importWebdocGeotriggersInfoFeatureFenceParameters: () => importWebdocGeotriggersInfoFeatureFenceParameters,
  importWebdocGeotriggersInfoFeatureFilter: () => importWebdocGeotriggersInfoFeatureFilter,
  importWebdocGeotriggersInfoFeatureLayerSource: () => importWebdocGeotriggersInfoFeatureLayerSource,
  importWebdocGeotriggersInfoFenceGeotrigger: () => importWebdocGeotriggersInfoFenceGeotrigger,
  importWebdocGeotriggersInfoGeotrigger: () => importWebdocGeotriggersInfoGeotrigger,
  importWebdocGeotriggersInfoGeotriggerNotificationOptions: () => importWebdocGeotriggersInfoGeotriggerNotificationOptions,
  importWebdocIPSInfo: () => importWebdocIPSInfo,
  importWebdocIpsPositioningService: () => importWebdocIpsPositioningService,
  importWebdocWidgetsTimeSlider: () => importWebdocWidgetsTimeSlider,
  importWebmapApplicationProperties: () => importWebmapApplicationProperties,
  importWebmapBackgroundColorBackground: () => importWebmapBackgroundColorBackground,
  importWebmapBookmark: () => importWebmapBookmark,
  importWebmapInitialViewProperties: () => importWebmapInitialViewProperties,
  importWebsceneApplicationProperties: () => importWebsceneApplicationProperties,
  importWebsceneBackgroundBackground: () => importWebsceneBackgroundBackground,
  importWebsceneBackgroundColorBackground: () => importWebsceneBackgroundColorBackground,
  importWebsceneEnvironment: () => importWebsceneEnvironment,
  importWebsceneInitialViewProperties: () => importWebsceneInitialViewProperties,
  importWebscenePresentation: () => importWebscenePresentation,
  importWebsceneSlide: () => importWebsceneSlide,
  importWebsceneSlideLegendInfo: () => importWebsceneSlideLegendInfo,
  importWebsceneSunLighting: () => importWebsceneSunLighting,
  importWebsceneSupportSlideElements: () => importWebsceneSupportSlideElements,
  importWebsceneVirtualLighting: () => importWebsceneVirtualLighting,
  importWidgetsAreaMeasurement2D: () => importWidgetsAreaMeasurement2D,
  importWidgetsAreaMeasurement2DAreaMeasurement2DViewModel: () => importWidgetsAreaMeasurement2DAreaMeasurement2DViewModel,
  importWidgetsAreaMeasurement3D: () => importWidgetsAreaMeasurement3D,
  importWidgetsAreaMeasurement3DAreaMeasurement3DViewModel: () => importWidgetsAreaMeasurement3DAreaMeasurement3DViewModel,
  importWidgetsAttachments: () => importWidgetsAttachments,
  importWidgetsAttachmentsAttachmentsViewModel: () => importWidgetsAttachmentsAttachmentsViewModel,
  importWidgetsAttribution: () => importWidgetsAttribution,
  importWidgetsAttributionAttributionViewModel: () => importWidgetsAttributionAttributionViewModel,
  importWidgetsBasemapGallery: () => importWidgetsBasemapGallery,
  importWidgetsBasemapGalleryBasemapGalleryViewModel: () => importWidgetsBasemapGalleryBasemapGalleryViewModel,
  importWidgetsBasemapGallerySupportBasemapGalleryItem: () => importWidgetsBasemapGallerySupportBasemapGalleryItem,
  importWidgetsBasemapGallerySupportLocalBasemapsSource: () => importWidgetsBasemapGallerySupportLocalBasemapsSource,
  importWidgetsBasemapGallerySupportPortalBasemapsSource: () => importWidgetsBasemapGallerySupportPortalBasemapsSource,
  importWidgetsBasemapLayerList: () => importWidgetsBasemapLayerList,
  importWidgetsBasemapLayerListBasemapLayerListViewModel: () => importWidgetsBasemapLayerListBasemapLayerListViewModel,
  importWidgetsBasemapToggle: () => importWidgetsBasemapToggle,
  importWidgetsBasemapToggleBasemapToggleViewModel: () => importWidgetsBasemapToggleBasemapToggleViewModel,
  importWidgetsBatchAttributeForm: () => importWidgetsBatchAttributeForm,
  importWidgetsBatchAttributeFormBatchAttributeFormViewModel: () => importWidgetsBatchAttributeFormBatchAttributeFormViewModel,
  importWidgetsBookmarks: () => importWidgetsBookmarks,
  importWidgetsBookmarksBookmarksViewModel: () => importWidgetsBookmarksBookmarksViewModel,
  importWidgetsBuildingExplorer: () => importWidgetsBuildingExplorer,
  importWidgetsBuildingExplorerBuildingExplorerViewModel: () => importWidgetsBuildingExplorerBuildingExplorerViewModel,
  importWidgetsBuildingExplorerBuildingLevel: () => importWidgetsBuildingExplorerBuildingLevel,
  importWidgetsBuildingExplorerBuildingPhase: () => importWidgetsBuildingExplorerBuildingPhase,
  importWidgetsCatalogLayerList: () => importWidgetsCatalogLayerList,
  importWidgetsCatalogLayerListCatalogLayerListViewModel: () => importWidgetsCatalogLayerListCatalogLayerListViewModel,
  importWidgetsCompass: () => importWidgetsCompass,
  importWidgetsCompassCompassViewModel: () => importWidgetsCompassCompassViewModel,
  importWidgetsCoordinateConversion: () => importWidgetsCoordinateConversion,
  importWidgetsCoordinateConversionCoordinateConversionViewModel: () => importWidgetsCoordinateConversionCoordinateConversionViewModel,
  importWidgetsCoordinateConversionSupportConversion: () => importWidgetsCoordinateConversionSupportConversion,
  importWidgetsCoordinateConversionSupportFormat: () => importWidgetsCoordinateConversionSupportFormat,
  importWidgetsDaylight: () => importWidgetsDaylight,
  importWidgetsDaylightDaylightViewModel: () => importWidgetsDaylightDaylightViewModel,
  importWidgetsDirectLineMeasurement3D: () => importWidgetsDirectLineMeasurement3D,
  importWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel: () => importWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel,
  importWidgetsDirectionalPad: () => importWidgetsDirectionalPad,
  importWidgetsDirectionalPadDirectionalPadViewModel: () => importWidgetsDirectionalPadDirectionalPadViewModel,
  importWidgetsDirections: () => importWidgetsDirections,
  importWidgetsDirectionsDirectionsViewModel: () => importWidgetsDirectionsDirectionsViewModel,
  importWidgetsDistanceMeasurement2D: () => importWidgetsDistanceMeasurement2D,
  importWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel: () => importWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel,
  importWidgetsEditor: () => importWidgetsEditor,
  importWidgetsEditorCreateFeaturesWorkflow: () => importWidgetsEditorCreateFeaturesWorkflow,
  importWidgetsEditorCreateFeaturesWorkflowData: () => importWidgetsEditorCreateFeaturesWorkflowData,
  importWidgetsEditorEditorViewModel: () => importWidgetsEditorEditorViewModel,
  importWidgetsEditorEdits: () => importWidgetsEditorEdits,
  importWidgetsEditorSupportEditorItem: () => importWidgetsEditorSupportEditorItem,
  importWidgetsEditorUpdateWorkflow: () => importWidgetsEditorUpdateWorkflow,
  importWidgetsEditorUpdateWorkflowData: () => importWidgetsEditorUpdateWorkflowData,
  importWidgetsEditorWorkflow: () => importWidgetsEditorWorkflow,
  importWidgetsElevationProfile: () => importWidgetsElevationProfile,
  importWidgetsElevationProfileElevationProfileLine: () => importWidgetsElevationProfileElevationProfileLine,
  importWidgetsElevationProfileElevationProfileLineGround: () => importWidgetsElevationProfileElevationProfileLineGround,
  importWidgetsElevationProfileElevationProfileLineInput: () => importWidgetsElevationProfileElevationProfileLineInput,
  importWidgetsElevationProfileElevationProfileLineQuery: () => importWidgetsElevationProfileElevationProfileLineQuery,
  importWidgetsElevationProfileElevationProfileLineView: () => importWidgetsElevationProfileElevationProfileLineView,
  importWidgetsElevationProfileElevationProfileViewModel: () => importWidgetsElevationProfileElevationProfileViewModel,
  importWidgetsExpand: () => importWidgetsExpand,
  importWidgetsExpandExpandViewModel: () => importWidgetsExpandExpandViewModel,
  importWidgetsFeature: () => importWidgetsFeature,
  importWidgetsFeatureFeatureViewModel: () => importWidgetsFeatureFeatureViewModel,
  importWidgetsFeatureForm: () => importWidgetsFeatureForm,
  importWidgetsFeatureFormFeatureFormViewModel: () => importWidgetsFeatureFormFeatureFormViewModel,
  importWidgetsFeatureFormFieldInput: () => importWidgetsFeatureFormFieldInput,
  importWidgetsFeatureFormGroupInput: () => importWidgetsFeatureFormGroupInput,
  importWidgetsFeatureFormRelationshipInput: () => importWidgetsFeatureFormRelationshipInput,
  importWidgetsFeatureFormTextElementInput: () => importWidgetsFeatureFormTextElementInput,
  importWidgetsFeatureFormUtilityNetworkAssociationInput: () => importWidgetsFeatureFormUtilityNetworkAssociationInput,
  importWidgetsFeatureTable: () => importWidgetsFeatureTable,
  importWidgetsFeatureTableActionColumn: () => importWidgetsFeatureTableActionColumn,
  importWidgetsFeatureTableAttachmentsColumn: () => importWidgetsFeatureTableAttachmentsColumn,
  importWidgetsFeatureTableFeatureTableViewModel: () => importWidgetsFeatureTableFeatureTableViewModel,
  importWidgetsFeatureTableFieldColumn: () => importWidgetsFeatureTableFieldColumn,
  importWidgetsFeatureTableGridColumn: () => importWidgetsFeatureTableGridColumn,
  importWidgetsFeatureTableGridGroupColumn: () => importWidgetsFeatureTableGridGroupColumn,
  importWidgetsFeatureTableGridSupportButtonMenu: () => importWidgetsFeatureTableGridSupportButtonMenu,
  importWidgetsFeatureTableGridSupportButtonMenuItem: () => importWidgetsFeatureTableGridSupportButtonMenuItem,
  importWidgetsFeatureTableGridSupportButtonMenuViewModel: () => importWidgetsFeatureTableGridSupportButtonMenuViewModel,
  importWidgetsFeatureTableRelationshipColumn: () => importWidgetsFeatureTableRelationshipColumn,
  importWidgetsFeatureTableSupportAttachmentsColumnTemplate: () => importWidgetsFeatureTableSupportAttachmentsColumnTemplate,
  importWidgetsFeatureTableSupportColumnTemplate: () => importWidgetsFeatureTableSupportColumnTemplate,
  importWidgetsFeatureTableSupportColumnTemplateBase: () => importWidgetsFeatureTableSupportColumnTemplateBase,
  importWidgetsFeatureTableSupportFieldColumnTemplate: () => importWidgetsFeatureTableSupportFieldColumnTemplate,
  importWidgetsFeatureTableSupportGroupColumnTemplate: () => importWidgetsFeatureTableSupportGroupColumnTemplate,
  importWidgetsFeatureTableSupportRelationshipColumnTemplate: () => importWidgetsFeatureTableSupportRelationshipColumnTemplate,
  importWidgetsFeatureTableSupportTableTemplate: () => importWidgetsFeatureTableSupportTableTemplate,
  importWidgetsFeatureTemplates: () => importWidgetsFeatureTemplates,
  importWidgetsFeatureTemplatesFeatureTemplatesViewModel: () => importWidgetsFeatureTemplatesFeatureTemplatesViewModel,
  importWidgetsFeatureTemplatesTemplateItem: () => importWidgetsFeatureTemplatesTemplateItem,
  importWidgetsFeatureTemplatesTemplateItemGroup: () => importWidgetsFeatureTemplatesTemplateItemGroup,
  importWidgetsFeatures: () => importWidgetsFeatures,
  importWidgetsFeaturesFeaturesViewModel: () => importWidgetsFeaturesFeaturesViewModel,
  importWidgetsFloorFilter: () => importWidgetsFloorFilter,
  importWidgetsFloorFilterFloorFilterViewModel: () => importWidgetsFloorFilterFloorFilterViewModel,
  importWidgetsFullscreen: () => importWidgetsFullscreen,
  importWidgetsFullscreenFullscreenViewModel: () => importWidgetsFullscreenFullscreenViewModel,
  importWidgetsHistogram: () => importWidgetsHistogram,
  importWidgetsHistogramHistogramViewModel: () => importWidgetsHistogramHistogramViewModel,
  importWidgetsHistogramRangeSlider: () => importWidgetsHistogramRangeSlider,
  importWidgetsHistogramRangeSliderHistogramRangeSliderViewModel: () => importWidgetsHistogramRangeSliderHistogramRangeSliderViewModel,
  importWidgetsHome: () => importWidgetsHome,
  importWidgetsHomeHomeViewModel: () => importWidgetsHomeHomeViewModel,
  importWidgetsLayerList: () => importWidgetsLayerList,
  importWidgetsLayerListLayerListViewModel: () => importWidgetsLayerListLayerListViewModel,
  importWidgetsLayerListListItem: () => importWidgetsLayerListListItem,
  importWidgetsLayerListListItemPanel: () => importWidgetsLayerListListItemPanel,
  importWidgetsLegend: () => importWidgetsLegend,
  importWidgetsLegendLegendViewModel: () => importWidgetsLegendLegendViewModel,
  importWidgetsLegendSupportActiveLayerInfo: () => importWidgetsLegendSupportActiveLayerInfo,
  importWidgetsLineOfSight: () => importWidgetsLineOfSight,
  importWidgetsLineOfSightLineOfSightTarget: () => importWidgetsLineOfSightLineOfSightTarget,
  importWidgetsLineOfSightLineOfSightViewModel: () => importWidgetsLineOfSightLineOfSightViewModel,
  importWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel: () => importWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel,
  importWidgetsLocate: () => importWidgetsLocate,
  importWidgetsLocateLocateViewModel: () => importWidgetsLocateLocateViewModel,
  importWidgetsMeasurement: () => importWidgetsMeasurement,
  importWidgetsMeasurementMeasurementViewModel: () => importWidgetsMeasurementMeasurementViewModel,
  importWidgetsNavigationToggle: () => importWidgetsNavigationToggle,
  importWidgetsNavigationToggleNavigationToggleViewModel: () => importWidgetsNavigationToggleNavigationToggleViewModel,
  importWidgetsOrientedImageryViewer: () => importWidgetsOrientedImageryViewer,
  importWidgetsOrientedImageryViewerOrientedImageryViewerViewModel: () => importWidgetsOrientedImageryViewerOrientedImageryViewerViewModel,
  importWidgetsPopup: () => importWidgetsPopup,
  importWidgetsPopupPopupViewModel: () => importWidgetsPopupPopupViewModel,
  importWidgetsPrint: () => importWidgetsPrint,
  importWidgetsPrintCustomTemplate: () => importWidgetsPrintCustomTemplate,
  importWidgetsPrintPrintViewModel: () => importWidgetsPrintPrintViewModel,
  importWidgetsPrintTemplateOptions: () => importWidgetsPrintTemplateOptions,
  importWidgetsScaleBar: () => importWidgetsScaleBar,
  importWidgetsScaleBarScaleBarViewModel: () => importWidgetsScaleBarScaleBarViewModel,
  importWidgetsScaleRangeSlider: () => importWidgetsScaleRangeSlider,
  importWidgetsScaleRangeSliderScaleRangeSliderViewModel: () => importWidgetsScaleRangeSliderScaleRangeSliderViewModel,
  importWidgetsScaleRangeSliderScaleRanges: () => importWidgetsScaleRangeSliderScaleRanges,
  importWidgetsSearch: () => importWidgetsSearch,
  importWidgetsSearchLayerSearchSource: () => importWidgetsSearchLayerSearchSource,
  importWidgetsSearchLocatorSearchSource: () => importWidgetsSearchLocatorSearchSource,
  importWidgetsSearchSearchResultRenderer: () => importWidgetsSearchSearchResultRenderer,
  importWidgetsSearchSearchSource: () => importWidgetsSearchSearchSource,
  importWidgetsSearchSearchViewModel: () => importWidgetsSearchSearchViewModel,
  importWidgetsShadowCast: () => importWidgetsShadowCast,
  importWidgetsShadowCastShadowCastViewModel: () => importWidgetsShadowCastShadowCastViewModel,
  importWidgetsSketch: () => importWidgetsSketch,
  importWidgetsSketchSketchViewModel: () => importWidgetsSketchSketchViewModel,
  importWidgetsSlice: () => importWidgetsSlice,
  importWidgetsSliceSliceViewModel: () => importWidgetsSliceSliceViewModel,
  importWidgetsSlider: () => importWidgetsSlider,
  importWidgetsSliderSliderViewModel: () => importWidgetsSliderSliderViewModel,
  importWidgetsSmartMappingBinaryColorSizeSlider: () => importWidgetsSmartMappingBinaryColorSizeSlider,
  importWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel: () => importWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel,
  importWidgetsSmartMappingClassedColorSlider: () => importWidgetsSmartMappingClassedColorSlider,
  importWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel: () => importWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel,
  importWidgetsSmartMappingClassedSizeSlider: () => importWidgetsSmartMappingClassedSizeSlider,
  importWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel: () => importWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel,
  importWidgetsSmartMappingColorSizeSlider: () => importWidgetsSmartMappingColorSizeSlider,
  importWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel: () => importWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel,
  importWidgetsSmartMappingColorSlider: () => importWidgetsSmartMappingColorSlider,
  importWidgetsSmartMappingColorSliderColorSliderViewModel: () => importWidgetsSmartMappingColorSliderColorSliderViewModel,
  importWidgetsSmartMappingHeatmapSlider: () => importWidgetsSmartMappingHeatmapSlider,
  importWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel: () => importWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel,
  importWidgetsSmartMappingOpacitySlider: () => importWidgetsSmartMappingOpacitySlider,
  importWidgetsSmartMappingOpacitySliderOpacitySliderViewModel: () => importWidgetsSmartMappingOpacitySliderOpacitySliderViewModel,
  importWidgetsSmartMappingSizeSlider: () => importWidgetsSmartMappingSizeSlider,
  importWidgetsSmartMappingSizeSliderSizeSliderViewModel: () => importWidgetsSmartMappingSizeSliderSizeSliderViewModel,
  importWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel: () => importWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel,
  importWidgetsSmartMappingSmartMappingSliderBase: () => importWidgetsSmartMappingSmartMappingSliderBase,
  importWidgetsSmartMappingSmartMappingSliderViewModel: () => importWidgetsSmartMappingSmartMappingSliderViewModel,
  importWidgetsSmartMappingSupportUtils: () => importWidgetsSmartMappingSupportUtils,
  importWidgetsSupportGridControls: () => importWidgetsSupportGridControls,
  importWidgetsSupportGridControlsGridControlsViewModel: () => importWidgetsSupportGridControlsGridControlsViewModel,
  importWidgetsSupportSnappingControls: () => importWidgetsSupportSnappingControls,
  importWidgetsSupportSnappingControlsSnappingControlsViewModel: () => importWidgetsSupportSnappingControlsSnappingControlsViewModel,
  importWidgetsSupportWidget: () => importWidgetsSupportWidget,
  importWidgetsSwipe: () => importWidgetsSwipe,
  importWidgetsSwipeSwipeViewModel: () => importWidgetsSwipeSwipeViewModel,
  importWidgetsTableList: () => importWidgetsTableList,
  importWidgetsTableListListItem: () => importWidgetsTableListListItem,
  importWidgetsTableListListItemPanel: () => importWidgetsTableListListItemPanel,
  importWidgetsTableListTableListViewModel: () => importWidgetsTableListTableListViewModel,
  importWidgetsTimeSlider: () => importWidgetsTimeSlider,
  importWidgetsTimeSliderTimeSliderViewModel: () => importWidgetsTimeSliderTimeSliderViewModel,
  importWidgetsTimeZoneLabel: () => importWidgetsTimeZoneLabel,
  importWidgetsTrack: () => importWidgetsTrack,
  importWidgetsTrackTrackViewModel: () => importWidgetsTrackTrackViewModel,
  importWidgetsUtilityNetworkAssociations: () => importWidgetsUtilityNetworkAssociations,
  importWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel: () => importWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel,
  importWidgetsUtilityNetworkTrace: () => importWidgetsUtilityNetworkTrace,
  importWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel: () => importWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel,
  importWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel: () => importWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel,
  importWidgetsUtilityNetworkValidateTopology: () => importWidgetsUtilityNetworkValidateTopology,
  importWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel: () => importWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel,
  importWidgetsValuePicker: () => importWidgetsValuePicker,
  importWidgetsValuePickerValuePickerCollection: () => importWidgetsValuePickerValuePickerCollection,
  importWidgetsValuePickerValuePickerCombobox: () => importWidgetsValuePickerValuePickerCombobox,
  importWidgetsValuePickerValuePickerLabel: () => importWidgetsValuePickerValuePickerLabel,
  importWidgetsValuePickerValuePickerSlider: () => importWidgetsValuePickerValuePickerSlider,
  importWidgetsVersionManagementVersionManagementViewModel: () => importWidgetsVersionManagementVersionManagementViewModel,
  importWidgetsVideoPlayer: () => importWidgetsVideoPlayer,
  importWidgetsVideoPlayerVideoPlayerViewModel: () => importWidgetsVideoPlayerVideoPlayerViewModel,
  importWidgetsWeather: () => importWidgetsWeather,
  importWidgetsWeatherWeatherViewModel: () => importWidgetsWeatherWeatherViewModel,
  importWidgetsWidget: () => importWidgetsWidget,
  importWidgetsZoom: () => importWidgetsZoom,
  importWidgetsZoomZoomViewModel: () => importWidgetsZoomZoomViewModel,
  loadUndocumentedModule: () => loadUndocumentedModule,
  newAnalysisAreaMeasurementAnalysis: () => newAnalysisAreaMeasurementAnalysis,
  newAnalysisDimensionAnalysis: () => newAnalysisDimensionAnalysis,
  newAnalysisDimensionSimpleStyle: () => newAnalysisDimensionSimpleStyle,
  newAnalysisDirectLineMeasurementAnalysis: () => newAnalysisDirectLineMeasurementAnalysis,
  newAnalysisLengthDimension: () => newAnalysisLengthDimension,
  newAnalysisLineOfSightAnalysis: () => newAnalysisLineOfSightAnalysis,
  newAnalysisLineOfSightAnalysisObserver: () => newAnalysisLineOfSightAnalysisObserver,
  newAnalysisLineOfSightAnalysisTarget: () => newAnalysisLineOfSightAnalysisTarget,
  newAnalysisSliceAnalysis: () => newAnalysisSliceAnalysis,
  newAnalysisSlicePlane: () => newAnalysisSlicePlane,
  newAnalysisViewshed: () => newAnalysisViewshed,
  newAnalysisViewshedAnalysis: () => newAnalysisViewshedAnalysis,
  newAttributeBinsGraphic: () => newAttributeBinsGraphic,
  newBasemap: () => newBasemap,
  newCamera: () => newCamera,
  newCameraLayout: () => newCameraLayout,
  newColor: () => newColor,
  newCoreAccessor: () => newCoreAccessor,
  newCoreCollection: () => newCoreCollection,
  newCoreError: () => newCoreError,
  newCoreHandles: () => newCoreHandles,
  newCoreWorkersConnection: () => newCoreWorkersConnection,
  newFormElementsAttachmentElement: () => newFormElementsAttachmentElement,
  newFormElementsElement: () => newFormElementsElement,
  newFormElementsFieldElement: () => newFormElementsFieldElement,
  newFormElementsGroupElement: () => newFormElementsGroupElement,
  newFormElementsInputsAttachmentsAttachmentInput: () => newFormElementsInputsAttachmentsAttachmentInput,
  newFormElementsInputsAttachmentsAudioInput: () => newFormElementsInputsAttachmentsAudioInput,
  newFormElementsInputsAttachmentsDocumentInput: () => newFormElementsInputsAttachmentsDocumentInput,
  newFormElementsInputsAttachmentsImageInput: () => newFormElementsInputsAttachmentsImageInput,
  newFormElementsInputsAttachmentsSignatureInput: () => newFormElementsInputsAttachmentsSignatureInput,
  newFormElementsInputsAttachmentsVideoInput: () => newFormElementsInputsAttachmentsVideoInput,
  newFormElementsInputsBarcodeScannerInput: () => newFormElementsInputsBarcodeScannerInput,
  newFormElementsInputsComboBoxInput: () => newFormElementsInputsComboBoxInput,
  newFormElementsInputsDatePickerInput: () => newFormElementsInputsDatePickerInput,
  newFormElementsInputsDateTimeOffsetPickerInput: () => newFormElementsInputsDateTimeOffsetPickerInput,
  newFormElementsInputsDateTimePickerInput: () => newFormElementsInputsDateTimePickerInput,
  newFormElementsInputsRadioButtonsInput: () => newFormElementsInputsRadioButtonsInput,
  newFormElementsInputsSwitchInput: () => newFormElementsInputsSwitchInput,
  newFormElementsInputsTextAreaInput: () => newFormElementsInputsTextAreaInput,
  newFormElementsInputsTextBoxInput: () => newFormElementsInputsTextBoxInput,
  newFormElementsInputsTimePickerInput: () => newFormElementsInputsTimePickerInput,
  newFormElementsRelationshipElement: () => newFormElementsRelationshipElement,
  newFormElementsTextElement: () => newFormElementsTextElement,
  newFormElementsUtilityNetworkAssociationsElement: () => newFormElementsUtilityNetworkAssociationsElement,
  newFormExpressionInfo: () => newFormExpressionInfo,
  newFormFormTemplate: () => newFormFormTemplate,
  newGeometryCircle: () => newGeometryCircle,
  newGeometryExtent: () => newGeometryExtent,
  newGeometryGeometry: () => newGeometryGeometry,
  newGeometryHeightModelInfo: () => newGeometryHeightModelInfo,
  newGeometryMesh: () => newGeometryMesh,
  newGeometryMultipoint: () => newGeometryMultipoint,
  newGeometryOperatorsSupportGeographicTransformation: () => newGeometryOperatorsSupportGeographicTransformation,
  newGeometryOperatorsSupportGeographicTransformationStep: () => newGeometryOperatorsSupportGeographicTransformationStep,
  newGeometryOperatorsSupportTransformation: () => newGeometryOperatorsSupportTransformation,
  newGeometryPoint: () => newGeometryPoint,
  newGeometryPolygon: () => newGeometryPolygon,
  newGeometryPolyline: () => newGeometryPolyline,
  newGeometrySpatialReference: () => newGeometrySpatialReference,
  newGeometrySupportGeographicTransformation: () => newGeometrySupportGeographicTransformation,
  newGeometrySupportGeographicTransformationStep: () => newGeometrySupportGeographicTransformationStep,
  newGeometrySupportMeshComponent: () => newGeometrySupportMeshComponent,
  newGeometrySupportMeshGeoreferencedVertexSpace: () => newGeometrySupportMeshGeoreferencedVertexSpace,
  newGeometrySupportMeshLocalVertexSpace: () => newGeometrySupportMeshLocalVertexSpace,
  newGeometrySupportMeshMaterial: () => newGeometrySupportMeshMaterial,
  newGeometrySupportMeshMaterialMetallicRoughness: () => newGeometrySupportMeshMaterialMetallicRoughness,
  newGeometrySupportMeshTexture: () => newGeometrySupportMeshTexture,
  newGeometrySupportMeshTextureTransform: () => newGeometrySupportMeshTextureTransform,
  newGeometrySupportMeshTransform: () => newGeometrySupportMeshTransform,
  newGraphic: () => newGraphic,
  newGround: () => newGround,
  newIdentityCredential: () => newIdentityCredential,
  newIdentityOAuthInfo: () => newIdentityOAuthInfo,
  newIdentityServerInfo: () => newIdentityServerInfo,
  newLayersBaseDynamicLayer: () => newLayersBaseDynamicLayer,
  newLayersBaseElevationLayer: () => newLayersBaseElevationLayer,
  newLayersBaseTileLayer: () => newLayersBaseTileLayer,
  newLayersBingMapsLayer: () => newLayersBingMapsLayer,
  newLayersBuildingSceneLayer: () => newLayersBuildingSceneLayer,
  newLayersBuildingSublayersBuildingComponentSublayer: () => newLayersBuildingSublayersBuildingComponentSublayer,
  newLayersBuildingSublayersBuildingGroupSublayer: () => newLayersBuildingSublayersBuildingGroupSublayer,
  newLayersBuildingSublayersBuildingSublayer: () => newLayersBuildingSublayersBuildingSublayer,
  newLayersCSVLayer: () => newLayersCSVLayer,
  newLayersCatalogCatalogDynamicGroupLayer: () => newLayersCatalogCatalogDynamicGroupLayer,
  newLayersCatalogCatalogFootprintLayer: () => newLayersCatalogCatalogFootprintLayer,
  newLayersCatalogLayer: () => newLayersCatalogLayer,
  newLayersDimensionLayer: () => newLayersDimensionLayer,
  newLayersElevationLayer: () => newLayersElevationLayer,
  newLayersFeatureLayer: () => newLayersFeatureLayer,
  newLayersGeoJSONLayer: () => newLayersGeoJSONLayer,
  newLayersGeoRSSLayer: () => newLayersGeoRSSLayer,
  newLayersGraphicsLayer: () => newLayersGraphicsLayer,
  newLayersGroupLayer: () => newLayersGroupLayer,
  newLayersImageryLayer: () => newLayersImageryLayer,
  newLayersImageryTileLayer: () => newLayersImageryTileLayer,
  newLayersIntegratedMesh3DTilesLayer: () => newLayersIntegratedMesh3DTilesLayer,
  newLayersIntegratedMeshLayer: () => newLayersIntegratedMeshLayer,
  newLayersKMLLayer: () => newLayersKMLLayer,
  newLayersKnowledgeGraphKnowledgeGraphSublayer: () => newLayersKnowledgeGraphKnowledgeGraphSublayer,
  newLayersKnowledgeGraphLayer: () => newLayersKnowledgeGraphLayer,
  newLayersLayer: () => newLayersLayer,
  newLayersLineOfSightLayer: () => newLayersLineOfSightLayer,
  newLayersLinkChartLayer: () => newLayersLinkChartLayer,
  newLayersMapImageLayer: () => newLayersMapImageLayer,
  newLayersMapNotesLayer: () => newLayersMapNotesLayer,
  newLayersMediaLayer: () => newLayersMediaLayer,
  newLayersOGCFeatureLayer: () => newLayersOGCFeatureLayer,
  newLayersOpenStreetMapLayer: () => newLayersOpenStreetMapLayer,
  newLayersOrientedImageryLayer: () => newLayersOrientedImageryLayer,
  newLayersPointCloudFiltersPointCloudBitfieldFilter: () => newLayersPointCloudFiltersPointCloudBitfieldFilter,
  newLayersPointCloudFiltersPointCloudFilter: () => newLayersPointCloudFiltersPointCloudFilter,
  newLayersPointCloudFiltersPointCloudReturnFilter: () => newLayersPointCloudFiltersPointCloudReturnFilter,
  newLayersPointCloudFiltersPointCloudValueFilter: () => newLayersPointCloudFiltersPointCloudValueFilter,
  newLayersPointCloudLayer: () => newLayersPointCloudLayer,
  newLayersRouteLayer: () => newLayersRouteLayer,
  newLayersSceneLayer: () => newLayersSceneLayer,
  newLayersStreamLayer: () => newLayersStreamLayer,
  newLayersSubtypeGroupLayer: () => newLayersSubtypeGroupLayer,
  newLayersSupportAggregateField: () => newLayersSupportAggregateField,
  newLayersSupportBuildingFilter: () => newLayersSupportBuildingFilter,
  newLayersSupportBuildingSummaryStatistics: () => newLayersSupportBuildingSummaryStatistics,
  newLayersSupportCodedValueDomain: () => newLayersSupportCodedValueDomain,
  newLayersSupportControlPointsGeoreference: () => newLayersSupportControlPointsGeoreference,
  newLayersSupportCornersGeoreference: () => newLayersSupportCornersGeoreference,
  newLayersSupportDimensionalDefinition: () => newLayersSupportDimensionalDefinition,
  newLayersSupportDisplayFilter: () => newLayersSupportDisplayFilter,
  newLayersSupportDisplayFilterInfo: () => newLayersSupportDisplayFilterInfo,
  newLayersSupportDomain: () => newLayersSupportDomain,
  newLayersSupportElevationSampler: () => newLayersSupportElevationSampler,
  newLayersSupportExpressionInfo: () => newLayersSupportExpressionInfo,
  newLayersSupportExtentAndRotationGeoreference: () => newLayersSupportExtentAndRotationGeoreference,
  newLayersSupportFacilityLayerInfo: () => newLayersSupportFacilityLayerInfo,
  newLayersSupportFeatureEffect: () => newLayersSupportFeatureEffect,
  newLayersSupportFeatureFilter: () => newLayersSupportFeatureFilter,
  newLayersSupportFeatureReductionBinning: () => newLayersSupportFeatureReductionBinning,
  newLayersSupportFeatureReductionCluster: () => newLayersSupportFeatureReductionCluster,
  newLayersSupportFeatureReductionSelection: () => newLayersSupportFeatureReductionSelection,
  newLayersSupportFeatureTemplate: () => newLayersSupportFeatureTemplate,
  newLayersSupportFeatureType: () => newLayersSupportFeatureType,
  newLayersSupportField: () => newLayersSupportField,
  newLayersSupportFieldsIndex: () => newLayersSupportFieldsIndex,
  newLayersSupportGeometryFieldsInfo: () => newLayersSupportGeometryFieldsInfo,
  newLayersSupportImageElement: () => newLayersSupportImageElement,
  newLayersSupportInheritedDomain: () => newLayersSupportInheritedDomain,
  newLayersSupportKMLSublayer: () => newLayersSupportKMLSublayer,
  newLayersSupportLOD: () => newLayersSupportLOD,
  newLayersSupportLabelClass: () => newLayersSupportLabelClass,
  newLayersSupportLayerFloorInfo: () => newLayersSupportLayerFloorInfo,
  newLayersSupportLevelLayerInfo: () => newLayersSupportLevelLayerInfo,
  newLayersSupportLocalMediaElementSource: () => newLayersSupportLocalMediaElementSource,
  newLayersSupportMapImage: () => newLayersSupportMapImage,
  newLayersSupportMosaicRule: () => newLayersSupportMosaicRule,
  newLayersSupportMultidimensionalSubset: () => newLayersSupportMultidimensionalSubset,
  newLayersSupportOrderByInfo: () => newLayersSupportOrderByInfo,
  newLayersSupportPixelBlock: () => newLayersSupportPixelBlock,
  newLayersSupportPublishingInfo: () => newLayersSupportPublishingInfo,
  newLayersSupportRangeDomain: () => newLayersSupportRangeDomain,
  newLayersSupportRasterBandInfo: () => newLayersSupportRasterBandInfo,
  newLayersSupportRasterFunction: () => newLayersSupportRasterFunction,
  newLayersSupportRasterInfo: () => newLayersSupportRasterInfo,
  newLayersSupportRasterSensorInfo: () => newLayersSupportRasterSensorInfo,
  newLayersSupportRelationship: () => newLayersSupportRelationship,
  newLayersSupportRouteStopSymbols: () => newLayersSupportRouteStopSymbols,
  newLayersSupportRouteSymbols: () => newLayersSupportRouteSymbols,
  newLayersSupportSceneFilter: () => newLayersSupportSceneFilter,
  newLayersSupportSceneModification: () => newLayersSupportSceneModification,
  newLayersSupportSceneModifications: () => newLayersSupportSceneModifications,
  newLayersSupportSiteLayerInfo: () => newLayersSupportSiteLayerInfo,
  newLayersSupportSublayer: () => newLayersSupportSublayer,
  newLayersSupportSubtype: () => newLayersSupportSubtype,
  newLayersSupportSubtypeSublayer: () => newLayersSupportSubtypeSublayer,
  newLayersSupportTelemetryData: () => newLayersSupportTelemetryData,
  newLayersSupportTelemetryDisplay: () => newLayersSupportTelemetryDisplay,
  newLayersSupportTileInfo: () => newLayersSupportTileInfo,
  newLayersSupportTileMatrixSet: () => newLayersSupportTileMatrixSet,
  newLayersSupportTimeInfo: () => newLayersSupportTimeInfo,
  newLayersSupportTrackInfo: () => newLayersSupportTrackInfo,
  newLayersSupportTrackPartInfo: () => newLayersSupportTrackPartInfo,
  newLayersSupportVideoElement: () => newLayersSupportVideoElement,
  newLayersSupportVideoTimeExtent: () => newLayersSupportVideoTimeExtent,
  newLayersSupportWMSSublayer: () => newLayersSupportWMSSublayer,
  newLayersSupportWMTSStyle: () => newLayersSupportWMTSStyle,
  newLayersSupportWMTSSublayer: () => newLayersSupportWMTSSublayer,
  newLayersTileLayer: () => newLayersTileLayer,
  newLayersUnknownLayer: () => newLayersUnknownLayer,
  newLayersUnsupportedLayer: () => newLayersUnsupportedLayer,
  newLayersVectorTileLayer: () => newLayersVectorTileLayer,
  newLayersVideoLayer: () => newLayersVideoLayer,
  newLayersViewshedLayer: () => newLayersViewshedLayer,
  newLayersVoxelLayer: () => newLayersVoxelLayer,
  newLayersVoxelVoxelDynamicSection: () => newLayersVoxelVoxelDynamicSection,
  newLayersVoxelVoxelSlice: () => newLayersVoxelVoxelSlice,
  newLayersVoxelVoxelTransferFunctionStyle: () => newLayersVoxelVoxelTransferFunctionStyle,
  newLayersVoxelVoxelVariableStyle: () => newLayersVoxelVoxelVariableStyle,
  newLayersVoxelVoxelVolumeStyle: () => newLayersVoxelVoxelVolumeStyle,
  newLayersWCSLayer: () => newLayersWCSLayer,
  newLayersWFSLayer: () => newLayersWFSLayer,
  newLayersWMSLayer: () => newLayersWMSLayer,
  newLayersWMTSLayer: () => newLayersWMTSLayer,
  newLayersWebTileLayer: () => newLayersWebTileLayer,
  newLinkChartChronologicalLayoutSettings: () => newLinkChartChronologicalLayoutSettings,
  newLinkChartLayoutSettings: () => newLinkChartLayoutSettings,
  newLinkChartLinkChartProperties: () => newLinkChartLinkChartProperties,
  newLinkChartNonspatialDataDisplay: () => newLinkChartNonspatialDataDisplay,
  newLinkChartOrganicLayoutSettings: () => newLinkChartOrganicLayoutSettings,
  newMap: () => newMap,
  newNetworksNetwork: () => newNetworksNetwork,
  newNetworksSupportNamedTraceConfiguration: () => newNetworksSupportNamedTraceConfiguration,
  newNetworksSupportNetworkSystemLayers: () => newNetworksSupportNetworkSystemLayers,
  newNetworksSupportTerminal: () => newNetworksSupportTerminal,
  newNetworksSupportTerminalConfiguration: () => newNetworksSupportTerminalConfiguration,
  newNetworksSupportTopologyValidationJobInfo: () => newNetworksSupportTopologyValidationJobInfo,
  newNetworksSupportTraceConfiguration: () => newNetworksSupportTraceConfiguration,
  newNetworksSupportTraceJobInfo: () => newNetworksSupportTraceJobInfo,
  newNetworksSupportUNTraceConfiguration: () => newNetworksSupportUNTraceConfiguration,
  newNetworksUtilityNetwork: () => newNetworksUtilityNetwork,
  newPopupContentAttachmentsContent: () => newPopupContentAttachmentsContent,
  newPopupContentBarChartMediaInfo: () => newPopupContentBarChartMediaInfo,
  newPopupContentColumnChartMediaInfo: () => newPopupContentColumnChartMediaInfo,
  newPopupContentContent: () => newPopupContentContent,
  newPopupContentCustomContent: () => newPopupContentCustomContent,
  newPopupContentExpressionContent: () => newPopupContentExpressionContent,
  newPopupContentFieldsContent: () => newPopupContentFieldsContent,
  newPopupContentImageMediaInfo: () => newPopupContentImageMediaInfo,
  newPopupContentLineChartMediaInfo: () => newPopupContentLineChartMediaInfo,
  newPopupContentMediaContent: () => newPopupContentMediaContent,
  newPopupContentPieChartMediaInfo: () => newPopupContentPieChartMediaInfo,
  newPopupContentRelationshipContent: () => newPopupContentRelationshipContent,
  newPopupContentSupportChartMediaInfoValue: () => newPopupContentSupportChartMediaInfoValue,
  newPopupContentSupportChartMediaInfoValueSeries: () => newPopupContentSupportChartMediaInfoValueSeries,
  newPopupContentSupportImageMediaInfoValue: () => newPopupContentSupportImageMediaInfoValue,
  newPopupContentTextContent: () => newPopupContentTextContent,
  newPopupContentUtilityNetworkAssociationsContent: () => newPopupContentUtilityNetworkAssociationsContent,
  newPopupElementExpressionInfo: () => newPopupElementExpressionInfo,
  newPopupExpressionInfo: () => newPopupExpressionInfo,
  newPopupFieldInfo: () => newPopupFieldInfo,
  newPopupLayerOptions: () => newPopupLayerOptions,
  newPopupRelatedRecordsInfo: () => newPopupRelatedRecordsInfo,
  newPopupSupportAttachmentsOrderByInfo: () => newPopupSupportAttachmentsOrderByInfo,
  newPopupSupportFieldInfoFormat: () => newPopupSupportFieldInfoFormat,
  newPopupSupportRelatedRecordsInfoFieldOrder: () => newPopupSupportRelatedRecordsInfoFieldOrder,
  newPopupSupportUtilityNetworkAssociationType: () => newPopupSupportUtilityNetworkAssociationType,
  newPopupTemplate: () => newPopupTemplate,
  newPortalPortal: () => newPortalPortal,
  newPortalPortalFolder: () => newPortalPortalFolder,
  newPortalPortalGroup: () => newPortalPortalGroup,
  newPortalPortalItem: () => newPortalPortalItem,
  newPortalPortalItemResource: () => newPortalPortalItemResource,
  newPortalPortalQueryParams: () => newPortalPortalQueryParams,
  newPortalPortalQueryResult: () => newPortalPortalQueryResult,
  newPortalPortalRating: () => newPortalPortalRating,
  newPortalPortalUser: () => newPortalPortalUser,
  newRenderersClassBreaksRenderer: () => newRenderersClassBreaksRenderer,
  newRenderersDictionaryRenderer: () => newRenderersDictionaryRenderer,
  newRenderersDotDensityRenderer: () => newRenderersDotDensityRenderer,
  newRenderersFlowRenderer: () => newRenderersFlowRenderer,
  newRenderersHeatmapRenderer: () => newRenderersHeatmapRenderer,
  newRenderersPieChartRenderer: () => newRenderersPieChartRenderer,
  newRenderersPointCloudClassBreaksRenderer: () => newRenderersPointCloudClassBreaksRenderer,
  newRenderersPointCloudRGBRenderer: () => newRenderersPointCloudRGBRenderer,
  newRenderersPointCloudRenderer: () => newRenderersPointCloudRenderer,
  newRenderersPointCloudStretchRenderer: () => newRenderersPointCloudStretchRenderer,
  newRenderersPointCloudUniqueValueRenderer: () => newRenderersPointCloudUniqueValueRenderer,
  newRenderersRasterColormapRenderer: () => newRenderersRasterColormapRenderer,
  newRenderersRasterShadedReliefRenderer: () => newRenderersRasterShadedReliefRenderer,
  newRenderersRasterStretchRenderer: () => newRenderersRasterStretchRenderer,
  newRenderersRenderer: () => newRenderersRenderer,
  newRenderersSimpleRenderer: () => newRenderersSimpleRenderer,
  newRenderersSupportAttributeColorInfo: () => newRenderersSupportAttributeColorInfo,
  newRenderersSupportAuthoringInfo: () => newRenderersSupportAuthoringInfo,
  newRenderersSupportAuthoringInfoVisualVariable: () => newRenderersSupportAuthoringInfoVisualVariable,
  newRenderersSupportClassBreakInfo: () => newRenderersSupportClassBreakInfo,
  newRenderersSupportColormapInfo: () => newRenderersSupportColormapInfo,
  newRenderersSupportHeatmapColorStop: () => newRenderersSupportHeatmapColorStop,
  newRenderersSupportRasterPresetRenderer: () => newRenderersSupportRasterPresetRenderer,
  newRenderersSupportUniqueValue: () => newRenderersSupportUniqueValue,
  newRenderersSupportUniqueValueClass: () => newRenderersSupportUniqueValueClass,
  newRenderersSupportUniqueValueGroup: () => newRenderersSupportUniqueValueGroup,
  newRenderersSupportUniqueValueInfo: () => newRenderersSupportUniqueValueInfo,
  newRenderersUniqueValueRenderer: () => newRenderersUniqueValueRenderer,
  newRenderersVectorFieldRenderer: () => newRenderersVectorFieldRenderer,
  newRenderersVisualVariablesColorVariable: () => newRenderersVisualVariablesColorVariable,
  newRenderersVisualVariablesOpacityVariable: () => newRenderersVisualVariablesOpacityVariable,
  newRenderersVisualVariablesRotationVariable: () => newRenderersVisualVariablesRotationVariable,
  newRenderersVisualVariablesSizeVariable: () => newRenderersVisualVariablesSizeVariable,
  newRenderersVisualVariablesSupportColorSizeStop: () => newRenderersVisualVariablesSupportColorSizeStop,
  newRenderersVisualVariablesSupportColorStop: () => newRenderersVisualVariablesSupportColorStop,
  newRenderersVisualVariablesSupportOpacityStop: () => newRenderersVisualVariablesSupportOpacityStop,
  newRenderersVisualVariablesSupportSizeStop: () => newRenderersVisualVariablesSupportSizeStop,
  newRenderersVisualVariablesVisualVariable: () => newRenderersVisualVariablesVisualVariable,
  newRestFeatureServiceFeatureService: () => newRestFeatureServiceFeatureService,
  newRestKnowledgeGraphDataModel: () => newRestKnowledgeGraphDataModel,
  newRestKnowledgeGraphEntity: () => newRestKnowledgeGraphEntity,
  newRestKnowledgeGraphEntityType: () => newRestKnowledgeGraphEntityType,
  newRestKnowledgeGraphFieldIndex: () => newRestKnowledgeGraphFieldIndex,
  newRestKnowledgeGraphGraphApplyEdits: () => newRestKnowledgeGraphGraphApplyEdits,
  newRestKnowledgeGraphGraphApplyEditsResult: () => newRestKnowledgeGraphGraphApplyEditsResult,
  newRestKnowledgeGraphGraphNamedObject: () => newRestKnowledgeGraphGraphNamedObject,
  newRestKnowledgeGraphGraphObject: () => newRestKnowledgeGraphGraphObject,
  newRestKnowledgeGraphGraphObjectType: () => newRestKnowledgeGraphGraphObjectType,
  newRestKnowledgeGraphGraphProperty: () => newRestKnowledgeGraphGraphProperty,
  newRestKnowledgeGraphGraphQuery: () => newRestKnowledgeGraphGraphQuery,
  newRestKnowledgeGraphGraphQueryResult: () => newRestKnowledgeGraphGraphQueryResult,
  newRestKnowledgeGraphGraphQueryResultHeader: () => newRestKnowledgeGraphGraphQueryResultHeader,
  newRestKnowledgeGraphGraphQueryStreaming: () => newRestKnowledgeGraphGraphQueryStreaming,
  newRestKnowledgeGraphGraphQueryStreamingResult: () => newRestKnowledgeGraphGraphQueryStreamingResult,
  newRestKnowledgeGraphGraphSearch: () => newRestKnowledgeGraphGraphSearch,
  newRestKnowledgeGraphGraphSearchStreaming: () => newRestKnowledgeGraphGraphSearchStreaming,
  newRestKnowledgeGraphInputQuantizationParameters: () => newRestKnowledgeGraphInputQuantizationParameters,
  newRestKnowledgeGraphKnowledgeGraph: () => newRestKnowledgeGraphKnowledgeGraph,
  newRestKnowledgeGraphOutputQuantizationParameters: () => newRestKnowledgeGraphOutputQuantizationParameters,
  newRestKnowledgeGraphPath: () => newRestKnowledgeGraphPath,
  newRestKnowledgeGraphRelationship: () => newRestKnowledgeGraphRelationship,
  newRestKnowledgeGraphRelationshipType: () => newRestKnowledgeGraphRelationshipType,
  newRestKnowledgeGraphSearchIndex: () => newRestKnowledgeGraphSearchIndex,
  newRestKnowledgeGraphServiceDefinition: () => newRestKnowledgeGraphServiceDefinition,
  newRestKnowledgeGraphSourceTypeValueBehavior: () => newRestKnowledgeGraphSourceTypeValueBehavior,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration: () => newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity: () => newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter: () => newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter,
  newRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection: () => newRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection,
  newRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings: () => newRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings,
  newRestNetworksSupportAggregatedGeometry: () => newRestNetworksSupportAggregatedGeometry,
  newRestNetworksSupportAssociation: () => newRestNetworksSupportAssociation,
  newRestNetworksSupportAssociationGeometriesResult: () => newRestNetworksSupportAssociationGeometriesResult,
  newRestNetworksSupportFunctionResult: () => newRestNetworksSupportFunctionResult,
  newRestNetworksSupportNetworkElement: () => newRestNetworksSupportNetworkElement,
  newRestNetworksSupportQueryAssociationsParameters: () => newRestNetworksSupportQueryAssociationsParameters,
  newRestNetworksSupportQueryAssociationsResult: () => newRestNetworksSupportQueryAssociationsResult,
  newRestNetworksSupportSynthesizeAssociationGeometriesParameters: () => newRestNetworksSupportSynthesizeAssociationGeometriesParameters,
  newRestNetworksSupportTraceLocation: () => newRestNetworksSupportTraceLocation,
  newRestNetworksSupportTraceParameters: () => newRestNetworksSupportTraceParameters,
  newRestNetworksSupportTraceResult: () => newRestNetworksSupportTraceResult,
  newRestNetworksSupportValidateNetworkTopologyParameters: () => newRestNetworksSupportValidateNetworkTopologyParameters,
  newRestQuerySupportAttachmentInfo: () => newRestQuerySupportAttachmentInfo,
  newRestSupportAddressCandidate: () => newRestSupportAddressCandidate,
  newRestSupportAlgorithmicColorRamp: () => newRestSupportAlgorithmicColorRamp,
  newRestSupportArealUnit: () => newRestSupportArealUnit,
  newRestSupportAreasAndLengthsParameters: () => newRestSupportAreasAndLengthsParameters,
  newRestSupportAttachmentQuery: () => newRestSupportAttachmentQuery,
  newRestSupportAttributeBinsFeatureSet: () => newRestSupportAttributeBinsFeatureSet,
  newRestSupportAttributeBinsGrouping: () => newRestSupportAttributeBinsGrouping,
  newRestSupportAttributeBinsQuery: () => newRestSupportAttributeBinsQuery,
  newRestSupportAutoIntervalBinParameters: () => newRestSupportAutoIntervalBinParameters,
  newRestSupportBaseImageMeasureParameters: () => newRestSupportBaseImageMeasureParameters,
  newRestSupportBaseImageMeasureResult: () => newRestSupportBaseImageMeasureResult,
  newRestSupportBufferParameters: () => newRestSupportBufferParameters,
  newRestSupportCameraInfo: () => newRestSupportCameraInfo,
  newRestSupportClosestFacilityParameters: () => newRestSupportClosestFacilityParameters,
  newRestSupportClosestFacilitySolveResult: () => newRestSupportClosestFacilitySolveResult,
  newRestSupportColorRamp: () => newRestSupportColorRamp,
  newRestSupportDataFile: () => newRestSupportDataFile,
  newRestSupportDataLayer: () => newRestSupportDataLayer,
  newRestSupportDateBinParameters: () => newRestSupportDateBinParameters,
  newRestSupportDateBinTimeInterval: () => newRestSupportDateBinTimeInterval,
  newRestSupportDensifyParameters: () => newRestSupportDensifyParameters,
  newRestSupportDirectionLine: () => newRestSupportDirectionLine,
  newRestSupportDirectionPoint: () => newRestSupportDirectionPoint,
  newRestSupportDirectionsEvent: () => newRestSupportDirectionsEvent,
  newRestSupportDirectionsFeature: () => newRestSupportDirectionsFeature,
  newRestSupportDirectionsFeatureSet: () => newRestSupportDirectionsFeatureSet,
  newRestSupportDistanceParameters: () => newRestSupportDistanceParameters,
  newRestSupportFeatureSet: () => newRestSupportFeatureSet,
  newRestSupportFetchPlaceParameters: () => newRestSupportFetchPlaceParameters,
  newRestSupportFindImagesParameters: () => newRestSupportFindImagesParameters,
  newRestSupportFindImagesResult: () => newRestSupportFindImagesResult,
  newRestSupportFindParameters: () => newRestSupportFindParameters,
  newRestSupportFindResult: () => newRestSupportFindResult,
  newRestSupportFixedBoundariesBinParameters: () => newRestSupportFixedBoundariesBinParameters,
  newRestSupportFixedIntervalBinParameters: () => newRestSupportFixedIntervalBinParameters,
  newRestSupportGPMessage: () => newRestSupportGPMessage,
  newRestSupportGeneralizeParameters: () => newRestSupportGeneralizeParameters,
  newRestSupportIdentifyParameters: () => newRestSupportIdentifyParameters,
  newRestSupportIdentifyResult: () => newRestSupportIdentifyResult,
  newRestSupportImageAngleParameters: () => newRestSupportImageAngleParameters,
  newRestSupportImageAngleResult: () => newRestSupportImageAngleResult,
  newRestSupportImageAreaParameters: () => newRestSupportImageAreaParameters,
  newRestSupportImageAreaResult: () => newRestSupportImageAreaResult,
  newRestSupportImageBoundaryParameters: () => newRestSupportImageBoundaryParameters,
  newRestSupportImageBoundaryResult: () => newRestSupportImageBoundaryResult,
  newRestSupportImageDistanceParameters: () => newRestSupportImageDistanceParameters,
  newRestSupportImageDistanceResult: () => newRestSupportImageDistanceResult,
  newRestSupportImageGPSInfo: () => newRestSupportImageGPSInfo,
  newRestSupportImageGPSInfoParameters: () => newRestSupportImageGPSInfoParameters,
  newRestSupportImageGPSInfoResult: () => newRestSupportImageGPSInfoResult,
  newRestSupportImageHeightParameters: () => newRestSupportImageHeightParameters,
  newRestSupportImageHeightResult: () => newRestSupportImageHeightResult,
  newRestSupportImageHistogramParameters: () => newRestSupportImageHistogramParameters,
  newRestSupportImageIdentifyParameters: () => newRestSupportImageIdentifyParameters,
  newRestSupportImageIdentifyResult: () => newRestSupportImageIdentifyResult,
  newRestSupportImageInspectionInfo: () => newRestSupportImageInspectionInfo,
  newRestSupportImageParameters: () => newRestSupportImageParameters,
  newRestSupportImagePixelLocationParameters: () => newRestSupportImagePixelLocationParameters,
  newRestSupportImagePixelLocationResult: () => newRestSupportImagePixelLocationResult,
  newRestSupportImagePointParameters: () => newRestSupportImagePointParameters,
  newRestSupportImagePointResult: () => newRestSupportImagePointResult,
  newRestSupportImageSample: () => newRestSupportImageSample,
  newRestSupportImageSampleParameters: () => newRestSupportImageSampleParameters,
  newRestSupportImageSampleResult: () => newRestSupportImageSampleResult,
  newRestSupportImageToMapMultirayParameters: () => newRestSupportImageToMapMultirayParameters,
  newRestSupportImageToMapParameters: () => newRestSupportImageToMapParameters,
  newRestSupportImageUrlParameters: () => newRestSupportImageUrlParameters,
  newRestSupportImageUrlResult: () => newRestSupportImageUrlResult,
  newRestSupportImageVolume: () => newRestSupportImageVolume,
  newRestSupportImageVolumeParameters: () => newRestSupportImageVolumeParameters,
  newRestSupportImageVolumeResult: () => newRestSupportImageVolumeResult,
  newRestSupportJobInfo: () => newRestSupportJobInfo,
  newRestSupportLegendLayer: () => newRestSupportLegendLayer,
  newRestSupportLengthsParameters: () => newRestSupportLengthsParameters,
  newRestSupportLinearUnit: () => newRestSupportLinearUnit,
  newRestSupportMapToImageParameters: () => newRestSupportMapToImageParameters,
  newRestSupportMeasureAreaFromImageResult: () => newRestSupportMeasureAreaFromImageResult,
  newRestSupportMeasureFromImageParameters: () => newRestSupportMeasureFromImageParameters,
  newRestSupportMeasureLengthFromImageResult: () => newRestSupportMeasureLengthFromImageResult,
  newRestSupportMultipartColorRamp: () => newRestSupportMultipartColorRamp,
  newRestSupportNAMessage: () => newRestSupportNAMessage,
  newRestSupportNetworkFeatureSet: () => newRestSupportNetworkFeatureSet,
  newRestSupportNetworkUrl: () => newRestSupportNetworkUrl,
  newRestSupportOffsetParameters: () => newRestSupportOffsetParameters,
  newRestSupportParameterValue: () => newRestSupportParameterValue,
  newRestSupportPlaceResult: () => newRestSupportPlaceResult,
  newRestSupportPlacesParameters: () => newRestSupportPlacesParameters,
  newRestSupportPlacesQueryParameters: () => newRestSupportPlacesQueryParameters,
  newRestSupportPlacesQueryResult: () => newRestSupportPlacesQueryResult,
  newRestSupportPointBarrier: () => newRestSupportPointBarrier,
  newRestSupportPolygonBarrier: () => newRestSupportPolygonBarrier,
  newRestSupportPolylineBarrier: () => newRestSupportPolylineBarrier,
  newRestSupportPrintParameters: () => newRestSupportPrintParameters,
  newRestSupportPrintTemplate: () => newRestSupportPrintTemplate,
  newRestSupportProjectParameters: () => newRestSupportProjectParameters,
  newRestSupportQuery: () => newRestSupportQuery,
  newRestSupportRasterData: () => newRestSupportRasterData,
  newRestSupportRelationParameters: () => newRestSupportRelationParameters,
  newRestSupportRelationshipQuery: () => newRestSupportRelationshipQuery,
  newRestSupportRouteInfo: () => newRestSupportRouteInfo,
  newRestSupportRouteParameters: () => newRestSupportRouteParameters,
  newRestSupportRouteResult: () => newRestSupportRouteResult,
  newRestSupportRouteSolveResult: () => newRestSupportRouteSolveResult,
  newRestSupportServiceAreaParameters: () => newRestSupportServiceAreaParameters,
  newRestSupportServiceAreaSolveResult: () => newRestSupportServiceAreaSolveResult,
  newRestSupportStatisticDefinition: () => newRestSupportStatisticDefinition,
  newRestSupportStop: () => newRestSupportStop,
  newRestSupportTopFeaturesQuery: () => newRestSupportTopFeaturesQuery,
  newRestSupportTopFilter: () => newRestSupportTopFilter,
  newRestSupportTravelMode: () => newRestSupportTravelMode,
  newRestSupportTrimExtendParameters: () => newRestSupportTrimExtendParameters,
  newSupportActionsActionBase: () => newSupportActionsActionBase,
  newSupportActionsActionButton: () => newSupportActionsActionButton,
  newSupportActionsActionToggle: () => newSupportActionsActionToggle,
  newSupportBasemapStyle: () => newSupportBasemapStyle,
  newSupportMapFloorInfo: () => newSupportMapFloorInfo,
  newSymbolsCIMSymbol: () => newSymbolsCIMSymbol,
  newSymbolsCalloutsCallout3D: () => newSymbolsCalloutsCallout3D,
  newSymbolsCalloutsLineCallout3D: () => newSymbolsCalloutsLineCallout3D,
  newSymbolsEdgesEdges3D: () => newSymbolsEdgesEdges3D,
  newSymbolsEdgesSketchEdges3D: () => newSymbolsEdgesSketchEdges3D,
  newSymbolsEdgesSolidEdges3D: () => newSymbolsEdgesSolidEdges3D,
  newSymbolsExtrudeSymbol3DLayer: () => newSymbolsExtrudeSymbol3DLayer,
  newSymbolsFillSymbol: () => newSymbolsFillSymbol,
  newSymbolsFillSymbol3DLayer: () => newSymbolsFillSymbol3DLayer,
  newSymbolsFont: () => newSymbolsFont,
  newSymbolsIconSymbol3DLayer: () => newSymbolsIconSymbol3DLayer,
  newSymbolsLabelSymbol3D: () => newSymbolsLabelSymbol3D,
  newSymbolsLineStyleMarker3D: () => newSymbolsLineStyleMarker3D,
  newSymbolsLineSymbol: () => newSymbolsLineSymbol,
  newSymbolsLineSymbol3D: () => newSymbolsLineSymbol3D,
  newSymbolsLineSymbol3DLayer: () => newSymbolsLineSymbol3DLayer,
  newSymbolsLineSymbolMarker: () => newSymbolsLineSymbolMarker,
  newSymbolsMarkerSymbol: () => newSymbolsMarkerSymbol,
  newSymbolsMeshSymbol3D: () => newSymbolsMeshSymbol3D,
  newSymbolsObjectSymbol3DLayer: () => newSymbolsObjectSymbol3DLayer,
  newSymbolsPathSymbol3DLayer: () => newSymbolsPathSymbol3DLayer,
  newSymbolsPatternsLineStylePattern3D: () => newSymbolsPatternsLineStylePattern3D,
  newSymbolsPatternsStylePattern3D: () => newSymbolsPatternsStylePattern3D,
  newSymbolsPictureFillSymbol: () => newSymbolsPictureFillSymbol,
  newSymbolsPictureMarkerSymbol: () => newSymbolsPictureMarkerSymbol,
  newSymbolsPointSymbol3D: () => newSymbolsPointSymbol3D,
  newSymbolsPolygonSymbol3D: () => newSymbolsPolygonSymbol3D,
  newSymbolsSimpleFillSymbol: () => newSymbolsSimpleFillSymbol,
  newSymbolsSimpleLineSymbol: () => newSymbolsSimpleLineSymbol,
  newSymbolsSimpleMarkerSymbol: () => newSymbolsSimpleMarkerSymbol,
  newSymbolsSupportStyleOrigin: () => newSymbolsSupportStyleOrigin,
  newSymbolsSupportSymbol3DVerticalOffset: () => newSymbolsSupportSymbol3DVerticalOffset,
  newSymbolsSymbol: () => newSymbolsSymbol,
  newSymbolsSymbol3D: () => newSymbolsSymbol3D,
  newSymbolsSymbol3DLayer: () => newSymbolsSymbol3DLayer,
  newSymbolsTextSymbol: () => newSymbolsTextSymbol,
  newSymbolsTextSymbol3DLayer: () => newSymbolsTextSymbol3DLayer,
  newSymbolsWaterSymbol3DLayer: () => newSymbolsWaterSymbol3DLayer,
  newSymbolsWebStyleSymbol: () => newSymbolsWebStyleSymbol,
  newTablesAttributeTableTemplate: () => newTablesAttributeTableTemplate,
  newTablesElementsAttributeTableAttachmentElement: () => newTablesElementsAttributeTableAttachmentElement,
  newTablesElementsAttributeTableElement: () => newTablesElementsAttributeTableElement,
  newTablesElementsAttributeTableFieldElement: () => newTablesElementsAttributeTableFieldElement,
  newTablesElementsAttributeTableGroupElement: () => newTablesElementsAttributeTableGroupElement,
  newTablesElementsAttributeTableRelationshipElement: () => newTablesElementsAttributeTableRelationshipElement,
  newTimeExtent: () => newTimeExtent,
  newTimeInterval: () => newTimeInterval,
  newTimeTimeExtent: () => newTimeTimeExtent,
  newTimeTimeInterval: () => newTimeTimeInterval,
  newVersionManagementVersionManagementService: () => newVersionManagementVersionManagementService,
  newVersionManagementVersioningState: () => newVersionManagementVersioningState,
  newViewpoint: () => newViewpoint,
  newViews2dLayersBaseLayerView2D: () => newViews2dLayersBaseLayerView2D,
  newViews2dLayersBaseLayerViewGL2D: () => newViews2dLayersBaseLayerViewGL2D,
  newViews2dViewState: () => newViews2dViewState,
  newViews3dAnalysisAreaMeasurementAnalysisView3D: () => newViews3dAnalysisAreaMeasurementAnalysisView3D,
  newViews3dAnalysisDirectLineMeasurementAnalysisView3D: () => newViews3dAnalysisDirectLineMeasurementAnalysisView3D,
  newViews3dAnalysisLineOfSightAnalysisResult: () => newViews3dAnalysisLineOfSightAnalysisResult,
  newViews3dAnalysisLineOfSightAnalysisView3D: () => newViews3dAnalysisLineOfSightAnalysisView3D,
  newViews3dAnalysisSliceAnalysisView3D: () => newViews3dAnalysisSliceAnalysisView3D,
  newViews3dAnalysisViewshedAnalysisView3D: () => newViews3dAnalysisViewshedAnalysisView3D,
  newViews3dEnvironmentCloudyWeather: () => newViews3dEnvironmentCloudyWeather,
  newViews3dEnvironmentFoggyWeather: () => newViews3dEnvironmentFoggyWeather,
  newViews3dEnvironmentRainyWeather: () => newViews3dEnvironmentRainyWeather,
  newViews3dEnvironmentSnowyWeather: () => newViews3dEnvironmentSnowyWeather,
  newViews3dEnvironmentSunLighting: () => newViews3dEnvironmentSunLighting,
  newViews3dEnvironmentSunnyWeather: () => newViews3dEnvironmentSunnyWeather,
  newViews3dEnvironmentVirtualLighting: () => newViews3dEnvironmentVirtualLighting,
  newViews3dWebglRenderNode: () => newViews3dWebglRenderNode,
  newViewsAnalysisDimensionAnalysisView: () => newViewsAnalysisDimensionAnalysisView,
  newViewsBasemapView: () => newViewsBasemapView,
  newViewsDrawDraw: () => newViewsDrawDraw,
  newViewsDrawDrawAction: () => newViewsDrawDrawAction,
  newViewsDrawMultipointDrawAction: () => newViewsDrawMultipointDrawAction,
  newViewsDrawPointDrawAction: () => newViewsDrawPointDrawAction,
  newViewsDrawPolygonDrawAction: () => newViewsDrawPolygonDrawAction,
  newViewsDrawPolylineDrawAction: () => newViewsDrawPolylineDrawAction,
  newViewsDrawSegmentDrawAction: () => newViewsDrawSegmentDrawAction,
  newViewsGroundView: () => newViewsGroundView,
  newViewsInputGamepadGamepadInputDevice: () => newViewsInputGamepadGamepadInputDevice,
  newViewsInputGamepadGamepadSettings: () => newViewsInputGamepadGamepadSettings,
  newViewsInputInput: () => newViewsInputInput,
  newViewsInteractiveSketchSketchLabelOptions: () => newViewsInteractiveSketchSketchLabelOptions,
  newViewsInteractiveSketchSketchTooltipOptions: () => newViewsInteractiveSketchSketchTooltipOptions,
  newViewsInteractiveSketchSketchValueOptions: () => newViewsInteractiveSketchSketchValueOptions,
  newViewsInteractiveSnappingFeatureSnappingLayerSource: () => newViewsInteractiveSnappingFeatureSnappingLayerSource,
  newViewsInteractiveSnappingSnappingOptions: () => newViewsInteractiveSnappingSnappingOptions,
  newViewsInteractiveTooltip: () => newViewsInteractiveTooltip,
  newViewsLayersBuildingComponentSublayerView: () => newViewsLayersBuildingComponentSublayerView,
  newViewsLayersBuildingSceneLayerView: () => newViewsLayersBuildingSceneLayerView,
  newViewsLayersCatalogDynamicGroupLayerView: () => newViewsLayersCatalogDynamicGroupLayerView,
  newViewsLayersCatalogFootprintLayerView: () => newViewsLayersCatalogFootprintLayerView,
  newViewsLayersCatalogLayerView: () => newViewsLayersCatalogLayerView,
  newViewsLayersDimensionLayerView: () => newViewsLayersDimensionLayerView,
  newViewsLayersFeatureLayerView: () => newViewsLayersFeatureLayerView,
  newViewsLayersGroupLayerView: () => newViewsLayersGroupLayerView,
  newViewsLayersImageryLayerView: () => newViewsLayersImageryLayerView,
  newViewsLayersImageryTileLayerView: () => newViewsLayersImageryTileLayerView,
  newViewsLayersLayerView: () => newViewsLayersLayerView,
  newViewsLayersMediaLayerView: () => newViewsLayersMediaLayerView,
  newViewsLayersOGCFeatureLayerView: () => newViewsLayersOGCFeatureLayerView,
  newViewsLayersSceneLayerView: () => newViewsLayersSceneLayerView,
  newViewsLayersStreamLayerView: () => newViewsLayersStreamLayerView,
  newViewsLayersViewshedLayerView: () => newViewsLayersViewshedLayerView,
  newViewsLinkChartView: () => newViewsLinkChartView,
  newViewsMagnifier: () => newViewsMagnifier,
  newViewsMapView: () => newViewsMapView,
  newViewsNavigationGamepadGamepadSettings: () => newViewsNavigationGamepadGamepadSettings,
  newViewsNavigationNavigation: () => newViewsNavigationNavigation,
  newViewsNavigationNavigationActionMap: () => newViewsNavigationNavigationActionMap,
  newViewsSceneView: () => newViewsSceneView,
  newViewsSupportHighlightOptions: () => newViewsSupportHighlightOptions,
  newViewsTheme: () => newViewsTheme,
  newViewsUiDefaultUI: () => newViewsUiDefaultUI,
  newViewsUiUI: () => newViewsUiUI,
  newViewsView: () => newViewsView,
  newViewsView2D: () => newViewsView2D,
  newViewsViewAnimation: () => newViewsViewAnimation,
  newWebDocument2D: () => newWebDocument2D,
  newWebLinkChart: () => newWebLinkChart,
  newWebMap: () => newWebMap,
  newWebScene: () => newWebScene,
  newWebdocApplicationPropertiesSearch: () => newWebdocApplicationPropertiesSearch,
  newWebdocApplicationPropertiesSearchLayer: () => newWebdocApplicationPropertiesSearchLayer,
  newWebdocApplicationPropertiesSearchLayerField: () => newWebdocApplicationPropertiesSearchLayerField,
  newWebdocApplicationPropertiesSearchTable: () => newWebdocApplicationPropertiesSearchTable,
  newWebdocApplicationPropertiesSearchTableField: () => newWebdocApplicationPropertiesSearchTableField,
  newWebdocApplicationPropertiesViewing: () => newWebdocApplicationPropertiesViewing,
  newWebdocGeotriggersInfo: () => newWebdocGeotriggersInfo,
  newWebdocGeotriggersInfoDeviceLocationFeed: () => newWebdocGeotriggersInfoDeviceLocationFeed,
  newWebdocGeotriggersInfoExpressionInfo: () => newWebdocGeotriggersInfoExpressionInfo,
  newWebdocGeotriggersInfoFeatureFenceParameters: () => newWebdocGeotriggersInfoFeatureFenceParameters,
  newWebdocGeotriggersInfoFeatureFilter: () => newWebdocGeotriggersInfoFeatureFilter,
  newWebdocGeotriggersInfoFeatureLayerSource: () => newWebdocGeotriggersInfoFeatureLayerSource,
  newWebdocGeotriggersInfoFenceGeotrigger: () => newWebdocGeotriggersInfoFenceGeotrigger,
  newWebdocGeotriggersInfoGeotrigger: () => newWebdocGeotriggersInfoGeotrigger,
  newWebdocGeotriggersInfoGeotriggerNotificationOptions: () => newWebdocGeotriggersInfoGeotriggerNotificationOptions,
  newWebdocIPSInfo: () => newWebdocIPSInfo,
  newWebdocIpsPositioningService: () => newWebdocIpsPositioningService,
  newWebdocWidgetsTimeSlider: () => newWebdocWidgetsTimeSlider,
  newWebmapApplicationProperties: () => newWebmapApplicationProperties,
  newWebmapBackgroundColorBackground: () => newWebmapBackgroundColorBackground,
  newWebmapBookmark: () => newWebmapBookmark,
  newWebmapInitialViewProperties: () => newWebmapInitialViewProperties,
  newWebsceneApplicationProperties: () => newWebsceneApplicationProperties,
  newWebsceneBackgroundBackground: () => newWebsceneBackgroundBackground,
  newWebsceneBackgroundColorBackground: () => newWebsceneBackgroundColorBackground,
  newWebsceneEnvironment: () => newWebsceneEnvironment,
  newWebsceneInitialViewProperties: () => newWebsceneInitialViewProperties,
  newWebscenePresentation: () => newWebscenePresentation,
  newWebsceneSlide: () => newWebsceneSlide,
  newWebsceneSlideLegendInfo: () => newWebsceneSlideLegendInfo,
  newWebsceneSunLighting: () => newWebsceneSunLighting,
  newWebsceneVirtualLighting: () => newWebsceneVirtualLighting,
  newWidgetsAreaMeasurement2D: () => newWidgetsAreaMeasurement2D,
  newWidgetsAreaMeasurement2DAreaMeasurement2DViewModel: () => newWidgetsAreaMeasurement2DAreaMeasurement2DViewModel,
  newWidgetsAreaMeasurement3D: () => newWidgetsAreaMeasurement3D,
  newWidgetsAreaMeasurement3DAreaMeasurement3DViewModel: () => newWidgetsAreaMeasurement3DAreaMeasurement3DViewModel,
  newWidgetsAttachments: () => newWidgetsAttachments,
  newWidgetsAttachmentsAttachmentsViewModel: () => newWidgetsAttachmentsAttachmentsViewModel,
  newWidgetsAttribution: () => newWidgetsAttribution,
  newWidgetsAttributionAttributionViewModel: () => newWidgetsAttributionAttributionViewModel,
  newWidgetsBasemapGallery: () => newWidgetsBasemapGallery,
  newWidgetsBasemapGalleryBasemapGalleryViewModel: () => newWidgetsBasemapGalleryBasemapGalleryViewModel,
  newWidgetsBasemapGallerySupportBasemapGalleryItem: () => newWidgetsBasemapGallerySupportBasemapGalleryItem,
  newWidgetsBasemapGallerySupportLocalBasemapsSource: () => newWidgetsBasemapGallerySupportLocalBasemapsSource,
  newWidgetsBasemapGallerySupportPortalBasemapsSource: () => newWidgetsBasemapGallerySupportPortalBasemapsSource,
  newWidgetsBasemapLayerList: () => newWidgetsBasemapLayerList,
  newWidgetsBasemapLayerListBasemapLayerListViewModel: () => newWidgetsBasemapLayerListBasemapLayerListViewModel,
  newWidgetsBasemapToggle: () => newWidgetsBasemapToggle,
  newWidgetsBasemapToggleBasemapToggleViewModel: () => newWidgetsBasemapToggleBasemapToggleViewModel,
  newWidgetsBatchAttributeForm: () => newWidgetsBatchAttributeForm,
  newWidgetsBookmarks: () => newWidgetsBookmarks,
  newWidgetsBookmarksBookmarksViewModel: () => newWidgetsBookmarksBookmarksViewModel,
  newWidgetsBuildingExplorer: () => newWidgetsBuildingExplorer,
  newWidgetsBuildingExplorerBuildingExplorerViewModel: () => newWidgetsBuildingExplorerBuildingExplorerViewModel,
  newWidgetsBuildingExplorerBuildingLevel: () => newWidgetsBuildingExplorerBuildingLevel,
  newWidgetsBuildingExplorerBuildingPhase: () => newWidgetsBuildingExplorerBuildingPhase,
  newWidgetsCatalogLayerList: () => newWidgetsCatalogLayerList,
  newWidgetsCatalogLayerListCatalogLayerListViewModel: () => newWidgetsCatalogLayerListCatalogLayerListViewModel,
  newWidgetsCompass: () => newWidgetsCompass,
  newWidgetsCompassCompassViewModel: () => newWidgetsCompassCompassViewModel,
  newWidgetsCoordinateConversion: () => newWidgetsCoordinateConversion,
  newWidgetsCoordinateConversionCoordinateConversionViewModel: () => newWidgetsCoordinateConversionCoordinateConversionViewModel,
  newWidgetsCoordinateConversionSupportConversion: () => newWidgetsCoordinateConversionSupportConversion,
  newWidgetsCoordinateConversionSupportFormat: () => newWidgetsCoordinateConversionSupportFormat,
  newWidgetsDaylight: () => newWidgetsDaylight,
  newWidgetsDaylightDaylightViewModel: () => newWidgetsDaylightDaylightViewModel,
  newWidgetsDirectLineMeasurement3D: () => newWidgetsDirectLineMeasurement3D,
  newWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel: () => newWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel,
  newWidgetsDirectionalPad: () => newWidgetsDirectionalPad,
  newWidgetsDirectionalPadDirectionalPadViewModel: () => newWidgetsDirectionalPadDirectionalPadViewModel,
  newWidgetsDirections: () => newWidgetsDirections,
  newWidgetsDirectionsDirectionsViewModel: () => newWidgetsDirectionsDirectionsViewModel,
  newWidgetsDistanceMeasurement2D: () => newWidgetsDistanceMeasurement2D,
  newWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel: () => newWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel,
  newWidgetsEditor: () => newWidgetsEditor,
  newWidgetsEditorCreateFeaturesWorkflow: () => newWidgetsEditorCreateFeaturesWorkflow,
  newWidgetsEditorCreateFeaturesWorkflowData: () => newWidgetsEditorCreateFeaturesWorkflowData,
  newWidgetsEditorEditorViewModel: () => newWidgetsEditorEditorViewModel,
  newWidgetsEditorEdits: () => newWidgetsEditorEdits,
  newWidgetsEditorSupportEditorItem: () => newWidgetsEditorSupportEditorItem,
  newWidgetsEditorUpdateWorkflow: () => newWidgetsEditorUpdateWorkflow,
  newWidgetsEditorUpdateWorkflowData: () => newWidgetsEditorUpdateWorkflowData,
  newWidgetsEditorWorkflow: () => newWidgetsEditorWorkflow,
  newWidgetsElevationProfile: () => newWidgetsElevationProfile,
  newWidgetsElevationProfileElevationProfileLine: () => newWidgetsElevationProfileElevationProfileLine,
  newWidgetsElevationProfileElevationProfileLineGround: () => newWidgetsElevationProfileElevationProfileLineGround,
  newWidgetsElevationProfileElevationProfileLineInput: () => newWidgetsElevationProfileElevationProfileLineInput,
  newWidgetsElevationProfileElevationProfileLineQuery: () => newWidgetsElevationProfileElevationProfileLineQuery,
  newWidgetsElevationProfileElevationProfileLineView: () => newWidgetsElevationProfileElevationProfileLineView,
  newWidgetsElevationProfileElevationProfileViewModel: () => newWidgetsElevationProfileElevationProfileViewModel,
  newWidgetsExpand: () => newWidgetsExpand,
  newWidgetsExpandExpandViewModel: () => newWidgetsExpandExpandViewModel,
  newWidgetsFeature: () => newWidgetsFeature,
  newWidgetsFeatureFeatureViewModel: () => newWidgetsFeatureFeatureViewModel,
  newWidgetsFeatureForm: () => newWidgetsFeatureForm,
  newWidgetsFeatureFormFeatureFormViewModel: () => newWidgetsFeatureFormFeatureFormViewModel,
  newWidgetsFeatureFormFieldInput: () => newWidgetsFeatureFormFieldInput,
  newWidgetsFeatureFormGroupInput: () => newWidgetsFeatureFormGroupInput,
  newWidgetsFeatureFormRelationshipInput: () => newWidgetsFeatureFormRelationshipInput,
  newWidgetsFeatureFormTextElementInput: () => newWidgetsFeatureFormTextElementInput,
  newWidgetsFeatureFormUtilityNetworkAssociationInput: () => newWidgetsFeatureFormUtilityNetworkAssociationInput,
  newWidgetsFeatureTable: () => newWidgetsFeatureTable,
  newWidgetsFeatureTableActionColumn: () => newWidgetsFeatureTableActionColumn,
  newWidgetsFeatureTableAttachmentsColumn: () => newWidgetsFeatureTableAttachmentsColumn,
  newWidgetsFeatureTableFeatureTableViewModel: () => newWidgetsFeatureTableFeatureTableViewModel,
  newWidgetsFeatureTableFieldColumn: () => newWidgetsFeatureTableFieldColumn,
  newWidgetsFeatureTableGridColumn: () => newWidgetsFeatureTableGridColumn,
  newWidgetsFeatureTableGridGroupColumn: () => newWidgetsFeatureTableGridGroupColumn,
  newWidgetsFeatureTableGridSupportButtonMenu: () => newWidgetsFeatureTableGridSupportButtonMenu,
  newWidgetsFeatureTableGridSupportButtonMenuItem: () => newWidgetsFeatureTableGridSupportButtonMenuItem,
  newWidgetsFeatureTableGridSupportButtonMenuViewModel: () => newWidgetsFeatureTableGridSupportButtonMenuViewModel,
  newWidgetsFeatureTableRelationshipColumn: () => newWidgetsFeatureTableRelationshipColumn,
  newWidgetsFeatureTableSupportAttachmentsColumnTemplate: () => newWidgetsFeatureTableSupportAttachmentsColumnTemplate,
  newWidgetsFeatureTableSupportColumnTemplate: () => newWidgetsFeatureTableSupportColumnTemplate,
  newWidgetsFeatureTableSupportColumnTemplateBase: () => newWidgetsFeatureTableSupportColumnTemplateBase,
  newWidgetsFeatureTableSupportFieldColumnTemplate: () => newWidgetsFeatureTableSupportFieldColumnTemplate,
  newWidgetsFeatureTableSupportGroupColumnTemplate: () => newWidgetsFeatureTableSupportGroupColumnTemplate,
  newWidgetsFeatureTableSupportRelationshipColumnTemplate: () => newWidgetsFeatureTableSupportRelationshipColumnTemplate,
  newWidgetsFeatureTableSupportTableTemplate: () => newWidgetsFeatureTableSupportTableTemplate,
  newWidgetsFeatureTemplates: () => newWidgetsFeatureTemplates,
  newWidgetsFeatureTemplatesFeatureTemplatesViewModel: () => newWidgetsFeatureTemplatesFeatureTemplatesViewModel,
  newWidgetsFeatureTemplatesTemplateItem: () => newWidgetsFeatureTemplatesTemplateItem,
  newWidgetsFeatureTemplatesTemplateItemGroup: () => newWidgetsFeatureTemplatesTemplateItemGroup,
  newWidgetsFeatures: () => newWidgetsFeatures,
  newWidgetsFeaturesFeaturesViewModel: () => newWidgetsFeaturesFeaturesViewModel,
  newWidgetsFloorFilter: () => newWidgetsFloorFilter,
  newWidgetsFloorFilterFloorFilterViewModel: () => newWidgetsFloorFilterFloorFilterViewModel,
  newWidgetsFullscreen: () => newWidgetsFullscreen,
  newWidgetsFullscreenFullscreenViewModel: () => newWidgetsFullscreenFullscreenViewModel,
  newWidgetsHistogram: () => newWidgetsHistogram,
  newWidgetsHistogramHistogramViewModel: () => newWidgetsHistogramHistogramViewModel,
  newWidgetsHistogramRangeSlider: () => newWidgetsHistogramRangeSlider,
  newWidgetsHistogramRangeSliderHistogramRangeSliderViewModel: () => newWidgetsHistogramRangeSliderHistogramRangeSliderViewModel,
  newWidgetsHome: () => newWidgetsHome,
  newWidgetsHomeHomeViewModel: () => newWidgetsHomeHomeViewModel,
  newWidgetsLayerList: () => newWidgetsLayerList,
  newWidgetsLayerListLayerListViewModel: () => newWidgetsLayerListLayerListViewModel,
  newWidgetsLayerListListItem: () => newWidgetsLayerListListItem,
  newWidgetsLayerListListItemPanel: () => newWidgetsLayerListListItemPanel,
  newWidgetsLegend: () => newWidgetsLegend,
  newWidgetsLegendLegendViewModel: () => newWidgetsLegendLegendViewModel,
  newWidgetsLegendSupportActiveLayerInfo: () => newWidgetsLegendSupportActiveLayerInfo,
  newWidgetsLineOfSight: () => newWidgetsLineOfSight,
  newWidgetsLineOfSightLineOfSightTarget: () => newWidgetsLineOfSightLineOfSightTarget,
  newWidgetsLineOfSightLineOfSightViewModel: () => newWidgetsLineOfSightLineOfSightViewModel,
  newWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel: () => newWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel,
  newWidgetsLocate: () => newWidgetsLocate,
  newWidgetsLocateLocateViewModel: () => newWidgetsLocateLocateViewModel,
  newWidgetsMeasurement: () => newWidgetsMeasurement,
  newWidgetsMeasurementMeasurementViewModel: () => newWidgetsMeasurementMeasurementViewModel,
  newWidgetsNavigationToggle: () => newWidgetsNavigationToggle,
  newWidgetsNavigationToggleNavigationToggleViewModel: () => newWidgetsNavigationToggleNavigationToggleViewModel,
  newWidgetsOrientedImageryViewer: () => newWidgetsOrientedImageryViewer,
  newWidgetsOrientedImageryViewerOrientedImageryViewerViewModel: () => newWidgetsOrientedImageryViewerOrientedImageryViewerViewModel,
  newWidgetsPopup: () => newWidgetsPopup,
  newWidgetsPopupPopupViewModel: () => newWidgetsPopupPopupViewModel,
  newWidgetsPrint: () => newWidgetsPrint,
  newWidgetsPrintCustomTemplate: () => newWidgetsPrintCustomTemplate,
  newWidgetsPrintPrintViewModel: () => newWidgetsPrintPrintViewModel,
  newWidgetsPrintTemplateOptions: () => newWidgetsPrintTemplateOptions,
  newWidgetsScaleBar: () => newWidgetsScaleBar,
  newWidgetsScaleBarScaleBarViewModel: () => newWidgetsScaleBarScaleBarViewModel,
  newWidgetsScaleRangeSlider: () => newWidgetsScaleRangeSlider,
  newWidgetsScaleRangeSliderScaleRangeSliderViewModel: () => newWidgetsScaleRangeSliderScaleRangeSliderViewModel,
  newWidgetsScaleRangeSliderScaleRanges: () => newWidgetsScaleRangeSliderScaleRanges,
  newWidgetsSearch: () => newWidgetsSearch,
  newWidgetsSearchLayerSearchSource: () => newWidgetsSearchLayerSearchSource,
  newWidgetsSearchLocatorSearchSource: () => newWidgetsSearchLocatorSearchSource,
  newWidgetsSearchSearchResultRenderer: () => newWidgetsSearchSearchResultRenderer,
  newWidgetsSearchSearchSource: () => newWidgetsSearchSearchSource,
  newWidgetsSearchSearchViewModel: () => newWidgetsSearchSearchViewModel,
  newWidgetsShadowCast: () => newWidgetsShadowCast,
  newWidgetsShadowCastShadowCastViewModel: () => newWidgetsShadowCastShadowCastViewModel,
  newWidgetsSketch: () => newWidgetsSketch,
  newWidgetsSketchSketchViewModel: () => newWidgetsSketchSketchViewModel,
  newWidgetsSlice: () => newWidgetsSlice,
  newWidgetsSliceSliceViewModel: () => newWidgetsSliceSliceViewModel,
  newWidgetsSlider: () => newWidgetsSlider,
  newWidgetsSliderSliderViewModel: () => newWidgetsSliderSliderViewModel,
  newWidgetsSmartMappingBinaryColorSizeSlider: () => newWidgetsSmartMappingBinaryColorSizeSlider,
  newWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel: () => newWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel,
  newWidgetsSmartMappingClassedColorSlider: () => newWidgetsSmartMappingClassedColorSlider,
  newWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel: () => newWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel,
  newWidgetsSmartMappingClassedSizeSlider: () => newWidgetsSmartMappingClassedSizeSlider,
  newWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel: () => newWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel,
  newWidgetsSmartMappingColorSizeSlider: () => newWidgetsSmartMappingColorSizeSlider,
  newWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel: () => newWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel,
  newWidgetsSmartMappingColorSlider: () => newWidgetsSmartMappingColorSlider,
  newWidgetsSmartMappingColorSliderColorSliderViewModel: () => newWidgetsSmartMappingColorSliderColorSliderViewModel,
  newWidgetsSmartMappingHeatmapSlider: () => newWidgetsSmartMappingHeatmapSlider,
  newWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel: () => newWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel,
  newWidgetsSmartMappingOpacitySlider: () => newWidgetsSmartMappingOpacitySlider,
  newWidgetsSmartMappingOpacitySliderOpacitySliderViewModel: () => newWidgetsSmartMappingOpacitySliderOpacitySliderViewModel,
  newWidgetsSmartMappingSizeSlider: () => newWidgetsSmartMappingSizeSlider,
  newWidgetsSmartMappingSizeSliderSizeSliderViewModel: () => newWidgetsSmartMappingSizeSliderSizeSliderViewModel,
  newWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel: () => newWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel,
  newWidgetsSmartMappingSmartMappingSliderBase: () => newWidgetsSmartMappingSmartMappingSliderBase,
  newWidgetsSmartMappingSmartMappingSliderViewModel: () => newWidgetsSmartMappingSmartMappingSliderViewModel,
  newWidgetsSupportGridControls: () => newWidgetsSupportGridControls,
  newWidgetsSupportGridControlsGridControlsViewModel: () => newWidgetsSupportGridControlsGridControlsViewModel,
  newWidgetsSupportSnappingControls: () => newWidgetsSupportSnappingControls,
  newWidgetsSupportSnappingControlsSnappingControlsViewModel: () => newWidgetsSupportSnappingControlsSnappingControlsViewModel,
  newWidgetsSwipe: () => newWidgetsSwipe,
  newWidgetsSwipeSwipeViewModel: () => newWidgetsSwipeSwipeViewModel,
  newWidgetsTableList: () => newWidgetsTableList,
  newWidgetsTableListListItem: () => newWidgetsTableListListItem,
  newWidgetsTableListListItemPanel: () => newWidgetsTableListListItemPanel,
  newWidgetsTableListTableListViewModel: () => newWidgetsTableListTableListViewModel,
  newWidgetsTimeSlider: () => newWidgetsTimeSlider,
  newWidgetsTimeSliderTimeSliderViewModel: () => newWidgetsTimeSliderTimeSliderViewModel,
  newWidgetsTimeZoneLabel: () => newWidgetsTimeZoneLabel,
  newWidgetsTrack: () => newWidgetsTrack,
  newWidgetsTrackTrackViewModel: () => newWidgetsTrackTrackViewModel,
  newWidgetsUtilityNetworkAssociations: () => newWidgetsUtilityNetworkAssociations,
  newWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel: () => newWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel,
  newWidgetsUtilityNetworkTrace: () => newWidgetsUtilityNetworkTrace,
  newWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel: () => newWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel,
  newWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel: () => newWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel,
  newWidgetsUtilityNetworkValidateTopology: () => newWidgetsUtilityNetworkValidateTopology,
  newWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel: () => newWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel,
  newWidgetsValuePicker: () => newWidgetsValuePicker,
  newWidgetsValuePickerValuePickerCollection: () => newWidgetsValuePickerValuePickerCollection,
  newWidgetsValuePickerValuePickerCombobox: () => newWidgetsValuePickerValuePickerCombobox,
  newWidgetsValuePickerValuePickerLabel: () => newWidgetsValuePickerValuePickerLabel,
  newWidgetsValuePickerValuePickerSlider: () => newWidgetsValuePickerValuePickerSlider,
  newWidgetsVersionManagementVersionManagementViewModel: () => newWidgetsVersionManagementVersionManagementViewModel,
  newWidgetsVideoPlayer: () => newWidgetsVideoPlayer,
  newWidgetsVideoPlayerVideoPlayerViewModel: () => newWidgetsVideoPlayerVideoPlayerViewModel,
  newWidgetsWeather: () => newWidgetsWeather,
  newWidgetsWeatherWeatherViewModel: () => newWidgetsWeatherWeatherViewModel,
  newWidgetsWidget: () => newWidgetsWidget,
  newWidgetsZoom: () => newWidgetsZoom,
  newWidgetsZoomZoomViewModel: () => newWidgetsZoomZoomViewModel
});
module.exports = __toCommonJS(src_exports);
var isAMD = typeof window !== "undefined" && "$arcgis" in window && typeof window.$arcgis === "object" && "import" in window.$arcgis && !("forceESM" in window.$arcgis);
function isDefaultModule(module2) {
  return module2.default !== void 0;
}
async function loadUndocumentedModule(modulePath, deferredImport) {
  if (isAMD) {
    return await window.$arcgis.import(modulePath);
  }
  const module2 = deferredImport();
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importIdentityIdentityManager() {
  if (isAMD) {
    return await window.$arcgis.import("esri/identity/IdentityManager");
  }
  const module2 = await import("@arcgis/core/identity/IdentityManager.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importBasemap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Basemap");
  }
  const module2 = await import("@arcgis/core/Basemap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newBasemap(properties) {
  const ModConstructor = await importBasemap();
  return new ModConstructor(properties);
}
async function importCamera() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Camera");
  }
  const module2 = await import("@arcgis/core/Camera.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCamera(properties) {
  const ModConstructor = await importCamera();
  return new ModConstructor(properties);
}
async function importCameraLayout() {
  if (isAMD) {
    return await window.$arcgis.import("esri/CameraLayout");
  }
  const module2 = await import("@arcgis/core/CameraLayout.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCameraLayout(properties) {
  const ModConstructor = await importCameraLayout();
  return new ModConstructor(properties);
}
async function importColor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Color");
  }
  const module2 = await import("@arcgis/core/Color.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newColor(color) {
  const ModConstructor = await importColor();
  return new ModConstructor(color);
}
async function importAnalysisAreaMeasurementAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/AreaMeasurementAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/AreaMeasurementAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisAreaMeasurementAnalysis(properties) {
  const ModConstructor = await importAnalysisAreaMeasurementAnalysis();
  return new ModConstructor(properties);
}
async function importAnalysisDimensionAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/DimensionAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/DimensionAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisDimensionAnalysis(properties) {
  const ModConstructor = await importAnalysisDimensionAnalysis();
  return new ModConstructor(properties);
}
async function importAnalysisDimensionSimpleStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/DimensionSimpleStyle");
  }
  const module2 = await import("@arcgis/core/analysis/DimensionSimpleStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisDimensionSimpleStyle(properties) {
  const ModConstructor = await importAnalysisDimensionSimpleStyle();
  return new ModConstructor(properties);
}
async function importAnalysisDirectLineMeasurementAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/DirectLineMeasurementAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/DirectLineMeasurementAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisDirectLineMeasurementAnalysis(properties) {
  const ModConstructor = await importAnalysisDirectLineMeasurementAnalysis();
  return new ModConstructor(properties);
}
async function importAnalysisLengthDimension() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/LengthDimension");
  }
  const module2 = await import("@arcgis/core/analysis/LengthDimension.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisLengthDimension(properties) {
  const ModConstructor = await importAnalysisLengthDimension();
  return new ModConstructor(properties);
}
async function importAnalysisLineOfSightAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/LineOfSightAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/LineOfSightAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisLineOfSightAnalysis(properties) {
  const ModConstructor = await importAnalysisLineOfSightAnalysis();
  return new ModConstructor(properties);
}
async function importAnalysisLineOfSightAnalysisObserver() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/LineOfSightAnalysisObserver");
  }
  const module2 = await import("@arcgis/core/analysis/LineOfSightAnalysisObserver.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisLineOfSightAnalysisObserver(properties) {
  const ModConstructor = await importAnalysisLineOfSightAnalysisObserver();
  return new ModConstructor(properties);
}
async function importAnalysisLineOfSightAnalysisTarget() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/LineOfSightAnalysisTarget");
  }
  const module2 = await import("@arcgis/core/analysis/LineOfSightAnalysisTarget.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisLineOfSightAnalysisTarget(properties) {
  const ModConstructor = await importAnalysisLineOfSightAnalysisTarget();
  return new ModConstructor(properties);
}
async function importAnalysisSliceAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/SliceAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/SliceAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisSliceAnalysis(properties) {
  const ModConstructor = await importAnalysisSliceAnalysis();
  return new ModConstructor(properties);
}
async function importAnalysisSlicePlane() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/SlicePlane");
  }
  const module2 = await import("@arcgis/core/analysis/SlicePlane.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisSlicePlane(properties) {
  const ModConstructor = await importAnalysisSlicePlane();
  return new ModConstructor(properties);
}
async function importAnalysisViewshed() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/Viewshed");
  }
  const module2 = await import("@arcgis/core/analysis/Viewshed.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisViewshed(properties) {
  const ModConstructor = await importAnalysisViewshed();
  return new ModConstructor(properties);
}
async function importAnalysisViewshedAnalysis() {
  if (isAMD) {
    return await window.$arcgis.import("esri/analysis/ViewshedAnalysis");
  }
  const module2 = await import("@arcgis/core/analysis/ViewshedAnalysis.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAnalysisViewshedAnalysis(properties) {
  const ModConstructor = await importAnalysisViewshedAnalysis();
  return new ModConstructor(properties);
}
async function importCoreAccessor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/Accessor");
  }
  const module2 = await import("@arcgis/core/core/Accessor.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCoreAccessor(obj) {
  const ModConstructor = await importCoreAccessor();
  return new ModConstructor(obj);
}
async function importCoreCollection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/Collection");
  }
  const module2 = await import("@arcgis/core/core/Collection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCoreCollection(values) {
  const ModConstructor = await importCoreCollection();
  return new ModConstructor(values);
}
async function importCoreError() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/Error");
  }
  const module2 = await import("@arcgis/core/core/Error.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCoreError(name, message, details) {
  const ModConstructor = await importCoreError();
  return new ModConstructor(name, message, details);
}
async function importCoreHandles() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/Handles");
  }
  const module2 = await import("@arcgis/core/core/Handles.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCoreHandles() {
  const ModConstructor = await importCoreHandles();
  return new ModConstructor();
}
async function importCoreWorkersConnection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/workers/Connection");
  }
  const module2 = await import("@arcgis/core/core/workers/Connection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newCoreWorkersConnection() {
  const ModConstructor = await importCoreWorkersConnection();
  return new ModConstructor();
}
async function importFormElementsAttachmentElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/AttachmentElement");
  }
  const module2 = await import("@arcgis/core/form/elements/AttachmentElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsAttachmentElement(properties) {
  const ModConstructor = await importFormElementsAttachmentElement();
  return new ModConstructor(properties);
}
async function importFormElementsElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/Element");
  }
  const module2 = await import("@arcgis/core/form/elements/Element.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsElement(properties) {
  const ModConstructor = await importFormElementsElement();
  return new ModConstructor(properties);
}
async function importFormElementsFieldElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/FieldElement");
  }
  const module2 = await import("@arcgis/core/form/elements/FieldElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsFieldElement(properties) {
  const ModConstructor = await importFormElementsFieldElement();
  return new ModConstructor(properties);
}
async function importFormElementsGroupElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/GroupElement");
  }
  const module2 = await import("@arcgis/core/form/elements/GroupElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsGroupElement(properties) {
  const ModConstructor = await importFormElementsGroupElement();
  return new ModConstructor(properties);
}
async function importFormElementsRelationshipElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/RelationshipElement");
  }
  const module2 = await import("@arcgis/core/form/elements/RelationshipElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsRelationshipElement(properties) {
  const ModConstructor = await importFormElementsRelationshipElement();
  return new ModConstructor(properties);
}
async function importFormElementsTextElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/TextElement");
  }
  const module2 = await import("@arcgis/core/form/elements/TextElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsTextElement(properties) {
  const ModConstructor = await importFormElementsTextElement();
  return new ModConstructor(properties);
}
async function importFormElementsUtilityNetworkAssociationsElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/UtilityNetworkAssociationsElement");
  }
  const module2 = await import("@arcgis/core/form/elements/UtilityNetworkAssociationsElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsUtilityNetworkAssociationsElement(properties) {
  const ModConstructor = await importFormElementsUtilityNetworkAssociationsElement();
  return new ModConstructor(properties);
}
async function importFormElementsInputsBarcodeScannerInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/BarcodeScannerInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/BarcodeScannerInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsBarcodeScannerInput(properties) {
  const ModConstructor = await importFormElementsInputsBarcodeScannerInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsComboBoxInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/ComboBoxInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/ComboBoxInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsComboBoxInput(properties) {
  const ModConstructor = await importFormElementsInputsComboBoxInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsDatePickerInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/DatePickerInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/DatePickerInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsDatePickerInput(properties) {
  const ModConstructor = await importFormElementsInputsDatePickerInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsDateTimeOffsetPickerInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/DateTimeOffsetPickerInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/DateTimeOffsetPickerInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsDateTimeOffsetPickerInput(properties) {
  const ModConstructor = await importFormElementsInputsDateTimeOffsetPickerInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsDateTimePickerInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/DateTimePickerInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/DateTimePickerInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsDateTimePickerInput(properties) {
  const ModConstructor = await importFormElementsInputsDateTimePickerInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsRadioButtonsInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/RadioButtonsInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/RadioButtonsInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsRadioButtonsInput(properties) {
  const ModConstructor = await importFormElementsInputsRadioButtonsInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsSwitchInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/SwitchInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/SwitchInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsSwitchInput(properties) {
  const ModConstructor = await importFormElementsInputsSwitchInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsTextAreaInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/TextAreaInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/TextAreaInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsTextAreaInput(properties) {
  const ModConstructor = await importFormElementsInputsTextAreaInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsTextBoxInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/TextBoxInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/TextBoxInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsTextBoxInput(properties) {
  const ModConstructor = await importFormElementsInputsTextBoxInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsTimePickerInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/TimePickerInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/TimePickerInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsTimePickerInput(properties) {
  const ModConstructor = await importFormElementsInputsTimePickerInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsAttachmentInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/AttachmentInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/AttachmentInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsAttachmentInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsAttachmentInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsAudioInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/AudioInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/AudioInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsAudioInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsAudioInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsDocumentInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/DocumentInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/DocumentInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsDocumentInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsDocumentInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsImageInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/ImageInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/ImageInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsImageInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsImageInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsSignatureInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/SignatureInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/SignatureInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsSignatureInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsSignatureInput();
  return new ModConstructor(properties);
}
async function importFormElementsInputsAttachmentsVideoInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs/attachments/VideoInput");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs/attachments/VideoInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormElementsInputsAttachmentsVideoInput(properties) {
  const ModConstructor = await importFormElementsInputsAttachmentsVideoInput();
  return new ModConstructor(properties);
}
async function importFormExpressionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/ExpressionInfo");
  }
  const module2 = await import("@arcgis/core/form/ExpressionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormExpressionInfo(properties) {
  const ModConstructor = await importFormExpressionInfo();
  return new ModConstructor(properties);
}
async function importFormFormTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/FormTemplate");
  }
  const module2 = await import("@arcgis/core/form/FormTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newFormFormTemplate(properties) {
  const ModConstructor = await importFormFormTemplate();
  return new ModConstructor(properties);
}
async function importGeometryCircle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Circle");
  }
  const module2 = await import("@arcgis/core/geometry/Circle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryCircle(properties) {
  const ModConstructor = await importGeometryCircle();
  return new ModConstructor(properties);
}
async function importGeometryExtent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Extent");
  }
  const module2 = await import("@arcgis/core/geometry/Extent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryExtent(properties) {
  const ModConstructor = await importGeometryExtent();
  return new ModConstructor(properties);
}
async function importGeometryGeometry() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Geometry");
  }
  const module2 = await import("@arcgis/core/geometry/Geometry.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryGeometry(properties) {
  const ModConstructor = await importGeometryGeometry();
  return new ModConstructor(properties);
}
async function importGeometryHeightModelInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/HeightModelInfo");
  }
  const module2 = await import("@arcgis/core/geometry/HeightModelInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryHeightModelInfo(properties) {
  const ModConstructor = await importGeometryHeightModelInfo();
  return new ModConstructor(properties);
}
async function importGeometryMesh() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Mesh");
  }
  const module2 = await import("@arcgis/core/geometry/Mesh.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryMesh(properties) {
  const ModConstructor = await importGeometryMesh();
  return new ModConstructor(properties);
}
async function importGeometryMultipoint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Multipoint");
  }
  const module2 = await import("@arcgis/core/geometry/Multipoint.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryMultipoint(properties) {
  const ModConstructor = await importGeometryMultipoint();
  return new ModConstructor(properties);
}
async function importGeometryPoint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Point");
  }
  const module2 = await import("@arcgis/core/geometry/Point.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryPoint(properties) {
  const ModConstructor = await importGeometryPoint();
  return new ModConstructor(properties);
}
async function importGeometryPolygon() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Polygon");
  }
  const module2 = await import("@arcgis/core/geometry/Polygon.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryPolygon(properties) {
  const ModConstructor = await importGeometryPolygon();
  return new ModConstructor(properties);
}
async function importGeometryPolyline() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/Polyline");
  }
  const module2 = await import("@arcgis/core/geometry/Polyline.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryPolyline(properties) {
  const ModConstructor = await importGeometryPolyline();
  return new ModConstructor(properties);
}
async function importGeometrySpatialReference() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/SpatialReference");
  }
  const module2 = await import("@arcgis/core/geometry/SpatialReference.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySpatialReference(properties) {
  const ModConstructor = await importGeometrySpatialReference();
  return new ModConstructor(properties);
}
async function importGeometryOperatorsSupportGeographicTransformation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/support/GeographicTransformation");
  }
  const module2 = await import("@arcgis/core/geometry/operators/support/GeographicTransformation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryOperatorsSupportGeographicTransformation(properties) {
  const ModConstructor = await importGeometryOperatorsSupportGeographicTransformation();
  return new ModConstructor(properties);
}
async function importGeometryOperatorsSupportGeographicTransformationStep() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/support/GeographicTransformationStep");
  }
  const module2 = await import("@arcgis/core/geometry/operators/support/GeographicTransformationStep.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryOperatorsSupportGeographicTransformationStep(properties) {
  const ModConstructor = await importGeometryOperatorsSupportGeographicTransformationStep();
  return new ModConstructor(properties);
}
async function importGeometryOperatorsSupportTransformation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/support/Transformation");
  }
  const module2 = await import("@arcgis/core/geometry/operators/support/Transformation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometryOperatorsSupportTransformation() {
  const ModConstructor = await importGeometryOperatorsSupportTransformation();
  return new ModConstructor();
}
async function importGeometrySupportGeographicTransformation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/GeographicTransformation");
  }
  const module2 = await import("@arcgis/core/geometry/support/GeographicTransformation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportGeographicTransformation(properties) {
  const ModConstructor = await importGeometrySupportGeographicTransformation();
  return new ModConstructor(properties);
}
async function importGeometrySupportGeographicTransformationStep() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/GeographicTransformationStep");
  }
  const module2 = await import("@arcgis/core/geometry/support/GeographicTransformationStep.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportGeographicTransformationStep(properties) {
  const ModConstructor = await importGeometrySupportGeographicTransformationStep();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshComponent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshComponent");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshComponent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshComponent(properties) {
  const ModConstructor = await importGeometrySupportMeshComponent();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshGeoreferencedVertexSpace() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshGeoreferencedVertexSpace");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshGeoreferencedVertexSpace.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshGeoreferencedVertexSpace(properties) {
  const ModConstructor = await importGeometrySupportMeshGeoreferencedVertexSpace();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshLocalVertexSpace() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshLocalVertexSpace");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshLocalVertexSpace.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshLocalVertexSpace(properties) {
  const ModConstructor = await importGeometrySupportMeshLocalVertexSpace();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshMaterial() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshMaterial");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshMaterial.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshMaterial(properties) {
  const ModConstructor = await importGeometrySupportMeshMaterial();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshMaterialMetallicRoughness() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshMaterialMetallicRoughness");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshMaterialMetallicRoughness.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshMaterialMetallicRoughness(properties) {
  const ModConstructor = await importGeometrySupportMeshMaterialMetallicRoughness();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshTexture() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshTexture");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshTexture.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshTexture(properties) {
  const ModConstructor = await importGeometrySupportMeshTexture();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshTextureTransform() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshTextureTransform");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshTextureTransform.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshTextureTransform(properties) {
  const ModConstructor = await importGeometrySupportMeshTextureTransform();
  return new ModConstructor(properties);
}
async function importGeometrySupportMeshTransform() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/MeshTransform");
  }
  const module2 = await import("@arcgis/core/geometry/support/MeshTransform.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGeometrySupportMeshTransform(properties) {
  const ModConstructor = await importGeometrySupportMeshTransform();
  return new ModConstructor(properties);
}
async function importAttributeBinsGraphic() {
  if (isAMD) {
    return await window.$arcgis.import("esri/AttributeBinsGraphic");
  }
  const module2 = await import("@arcgis/core/AttributeBinsGraphic.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newAttributeBinsGraphic(properties) {
  const ModConstructor = await importAttributeBinsGraphic();
  return new ModConstructor(properties);
}
async function importGraphic() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Graphic");
  }
  const module2 = await import("@arcgis/core/Graphic.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGraphic(properties) {
  const ModConstructor = await importGraphic();
  return new ModConstructor(properties);
}
async function importGround() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Ground");
  }
  const module2 = await import("@arcgis/core/Ground.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newGround(properties) {
  const ModConstructor = await importGround();
  return new ModConstructor(properties);
}
async function importIdentityCredential() {
  if (isAMD) {
    return await window.$arcgis.import("esri/identity/Credential");
  }
  const module2 = await import("@arcgis/core/identity/Credential.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newIdentityCredential(properties) {
  const ModConstructor = await importIdentityCredential();
  return new ModConstructor(properties);
}
async function importIdentityOAuthInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/identity/OAuthInfo");
  }
  const module2 = await import("@arcgis/core/identity/OAuthInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newIdentityOAuthInfo(properties) {
  const ModConstructor = await importIdentityOAuthInfo();
  return new ModConstructor(properties);
}
async function importIdentityServerInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/identity/ServerInfo");
  }
  const module2 = await import("@arcgis/core/identity/ServerInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newIdentityServerInfo(properties) {
  const ModConstructor = await importIdentityServerInfo();
  return new ModConstructor(properties);
}
async function importLayersBaseDynamicLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/BaseDynamicLayer");
  }
  const module2 = await import("@arcgis/core/layers/BaseDynamicLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBaseDynamicLayer(properties) {
  const ModConstructor = await importLayersBaseDynamicLayer();
  return new ModConstructor(properties);
}
async function importLayersBaseElevationLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/BaseElevationLayer");
  }
  const module2 = await import("@arcgis/core/layers/BaseElevationLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBaseElevationLayer(properties) {
  const ModConstructor = await importLayersBaseElevationLayer();
  return new ModConstructor(properties);
}
async function importLayersBaseTileLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/BaseTileLayer");
  }
  const module2 = await import("@arcgis/core/layers/BaseTileLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBaseTileLayer(properties) {
  const ModConstructor = await importLayersBaseTileLayer();
  return new ModConstructor(properties);
}
async function importLayersBingMapsLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/BingMapsLayer");
  }
  const module2 = await import("@arcgis/core/layers/BingMapsLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBingMapsLayer(properties) {
  const ModConstructor = await importLayersBingMapsLayer();
  return new ModConstructor(properties);
}
async function importLayersBuildingSceneLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/BuildingSceneLayer");
  }
  const module2 = await import("@arcgis/core/layers/BuildingSceneLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBuildingSceneLayer(properties) {
  const ModConstructor = await importLayersBuildingSceneLayer();
  return new ModConstructor(properties);
}
async function importLayersBuildingSublayersBuildingComponentSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/buildingSublayers/BuildingComponentSublayer");
  }
  const module2 = await import("@arcgis/core/layers/buildingSublayers/BuildingComponentSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBuildingSublayersBuildingComponentSublayer(properties) {
  const ModConstructor = await importLayersBuildingSublayersBuildingComponentSublayer();
  return new ModConstructor(properties);
}
async function importLayersBuildingSublayersBuildingGroupSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/buildingSublayers/BuildingGroupSublayer");
  }
  const module2 = await import("@arcgis/core/layers/buildingSublayers/BuildingGroupSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBuildingSublayersBuildingGroupSublayer(properties) {
  const ModConstructor = await importLayersBuildingSublayersBuildingGroupSublayer();
  return new ModConstructor(properties);
}
async function importLayersBuildingSublayersBuildingSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/buildingSublayers/BuildingSublayer");
  }
  const module2 = await import("@arcgis/core/layers/buildingSublayers/BuildingSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersBuildingSublayersBuildingSublayer(properties) {
  const ModConstructor = await importLayersBuildingSublayersBuildingSublayer();
  return new ModConstructor(properties);
}
async function importLayersCatalogLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/CatalogLayer");
  }
  const module2 = await import("@arcgis/core/layers/CatalogLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersCatalogLayer(properties) {
  const ModConstructor = await importLayersCatalogLayer();
  return new ModConstructor(properties);
}
async function importLayersCatalogCatalogDynamicGroupLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/catalog/CatalogDynamicGroupLayer");
  }
  const module2 = await import("@arcgis/core/layers/catalog/CatalogDynamicGroupLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersCatalogCatalogDynamicGroupLayer(properties) {
  const ModConstructor = await importLayersCatalogCatalogDynamicGroupLayer();
  return new ModConstructor(properties);
}
async function importLayersCatalogCatalogFootprintLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/catalog/CatalogFootprintLayer");
  }
  const module2 = await import("@arcgis/core/layers/catalog/CatalogFootprintLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersCatalogCatalogFootprintLayer(properties) {
  const ModConstructor = await importLayersCatalogCatalogFootprintLayer();
  return new ModConstructor(properties);
}
async function importLayersCSVLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/CSVLayer");
  }
  const module2 = await import("@arcgis/core/layers/CSVLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersCSVLayer(properties) {
  const ModConstructor = await importLayersCSVLayer();
  return new ModConstructor(properties);
}
async function importLayersDimensionLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/DimensionLayer");
  }
  const module2 = await import("@arcgis/core/layers/DimensionLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersDimensionLayer(properties) {
  const ModConstructor = await importLayersDimensionLayer();
  return new ModConstructor(properties);
}
async function importLayersElevationLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ElevationLayer");
  }
  const module2 = await import("@arcgis/core/layers/ElevationLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersElevationLayer(properties) {
  const ModConstructor = await importLayersElevationLayer();
  return new ModConstructor(properties);
}
async function importLayersFeatureLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/FeatureLayer");
  }
  const module2 = await import("@arcgis/core/layers/FeatureLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersFeatureLayer(properties) {
  const ModConstructor = await importLayersFeatureLayer();
  return new ModConstructor(properties);
}
async function importLayersGeoJSONLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/GeoJSONLayer");
  }
  const module2 = await import("@arcgis/core/layers/GeoJSONLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersGeoJSONLayer(properties) {
  const ModConstructor = await importLayersGeoJSONLayer();
  return new ModConstructor(properties);
}
async function importLayersGeoRSSLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/GeoRSSLayer");
  }
  const module2 = await import("@arcgis/core/layers/GeoRSSLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersGeoRSSLayer(properties) {
  const ModConstructor = await importLayersGeoRSSLayer();
  return new ModConstructor(properties);
}
async function importLayersGraphicsLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/GraphicsLayer");
  }
  const module2 = await import("@arcgis/core/layers/GraphicsLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersGraphicsLayer(properties) {
  const ModConstructor = await importLayersGraphicsLayer();
  return new ModConstructor(properties);
}
async function importLayersGroupLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/GroupLayer");
  }
  const module2 = await import("@arcgis/core/layers/GroupLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersGroupLayer(properties) {
  const ModConstructor = await importLayersGroupLayer();
  return new ModConstructor(properties);
}
async function importLayersImageryLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ImageryLayer");
  }
  const module2 = await import("@arcgis/core/layers/ImageryLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersImageryLayer(properties) {
  const ModConstructor = await importLayersImageryLayer();
  return new ModConstructor(properties);
}
async function importLayersImageryTileLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ImageryTileLayer");
  }
  const module2 = await import("@arcgis/core/layers/ImageryTileLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersImageryTileLayer(properties) {
  const ModConstructor = await importLayersImageryTileLayer();
  return new ModConstructor(properties);
}
async function importLayersIntegratedMeshLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/IntegratedMeshLayer");
  }
  const module2 = await import("@arcgis/core/layers/IntegratedMeshLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersIntegratedMeshLayer(properties) {
  const ModConstructor = await importLayersIntegratedMeshLayer();
  return new ModConstructor(properties);
}
async function importLayersIntegratedMesh3DTilesLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/IntegratedMesh3DTilesLayer");
  }
  const module2 = await import("@arcgis/core/layers/IntegratedMesh3DTilesLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersIntegratedMesh3DTilesLayer(properties) {
  const ModConstructor = await importLayersIntegratedMesh3DTilesLayer();
  return new ModConstructor(properties);
}
async function importLayersKMLLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/KMLLayer");
  }
  const module2 = await import("@arcgis/core/layers/KMLLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersKMLLayer(properties) {
  const ModConstructor = await importLayersKMLLayer();
  return new ModConstructor(properties);
}
async function importLayersKnowledgeGraphLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/KnowledgeGraphLayer");
  }
  const module2 = await import("@arcgis/core/layers/KnowledgeGraphLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersKnowledgeGraphLayer(properties) {
  const ModConstructor = await importLayersKnowledgeGraphLayer();
  return new ModConstructor(properties);
}
async function importLayersKnowledgeGraphKnowledgeGraphSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/knowledgeGraph/KnowledgeGraphSublayer");
  }
  const module2 = await import("@arcgis/core/layers/knowledgeGraph/KnowledgeGraphSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersKnowledgeGraphKnowledgeGraphSublayer(properties) {
  const ModConstructor = await importLayersKnowledgeGraphKnowledgeGraphSublayer();
  return new ModConstructor(properties);
}
async function importLayersLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/Layer");
  }
  const module2 = await import("@arcgis/core/layers/Layer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersLayer(properties) {
  const ModConstructor = await importLayersLayer();
  return new ModConstructor(properties);
}
async function importLayersLineOfSightLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/LineOfSightLayer");
  }
  const module2 = await import("@arcgis/core/layers/LineOfSightLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersLineOfSightLayer(properties) {
  const ModConstructor = await importLayersLineOfSightLayer();
  return new ModConstructor(properties);
}
async function importLayersLinkChartLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/LinkChartLayer");
  }
  const module2 = await import("@arcgis/core/layers/LinkChartLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersLinkChartLayer(properties) {
  const ModConstructor = await importLayersLinkChartLayer();
  return new ModConstructor(properties);
}
async function importLayersMapImageLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/MapImageLayer");
  }
  const module2 = await import("@arcgis/core/layers/MapImageLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersMapImageLayer(properties) {
  const ModConstructor = await importLayersMapImageLayer();
  return new ModConstructor(properties);
}
async function importLayersMapNotesLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/MapNotesLayer");
  }
  const module2 = await import("@arcgis/core/layers/MapNotesLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersMapNotesLayer(properties) {
  const ModConstructor = await importLayersMapNotesLayer();
  return new ModConstructor(properties);
}
async function importLayersMediaLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/MediaLayer");
  }
  const module2 = await import("@arcgis/core/layers/MediaLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersMediaLayer(properties) {
  const ModConstructor = await importLayersMediaLayer();
  return new ModConstructor(properties);
}
async function importLayersOGCFeatureLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/OGCFeatureLayer");
  }
  const module2 = await import("@arcgis/core/layers/OGCFeatureLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersOGCFeatureLayer(properties) {
  const ModConstructor = await importLayersOGCFeatureLayer();
  return new ModConstructor(properties);
}
async function importLayersOpenStreetMapLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/OpenStreetMapLayer");
  }
  const module2 = await import("@arcgis/core/layers/OpenStreetMapLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersOpenStreetMapLayer(properties) {
  const ModConstructor = await importLayersOpenStreetMapLayer();
  return new ModConstructor(properties);
}
async function importLayersOrientedImageryLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/OrientedImageryLayer");
  }
  const module2 = await import("@arcgis/core/layers/OrientedImageryLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersOrientedImageryLayer(properties) {
  const ModConstructor = await importLayersOrientedImageryLayer();
  return new ModConstructor(properties);
}
async function importLayersPointCloudFiltersPointCloudFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/pointCloudFilters/PointCloudFilter");
  }
  const module2 = await import("@arcgis/core/layers/pointCloudFilters/PointCloudFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersPointCloudFiltersPointCloudFilter(properties) {
  const ModConstructor = await importLayersPointCloudFiltersPointCloudFilter();
  return new ModConstructor(properties);
}
async function importLayersPointCloudFiltersPointCloudReturnFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/pointCloudFilters/PointCloudReturnFilter");
  }
  const module2 = await import("@arcgis/core/layers/pointCloudFilters/PointCloudReturnFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersPointCloudFiltersPointCloudReturnFilter(properties) {
  const ModConstructor = await importLayersPointCloudFiltersPointCloudReturnFilter();
  return new ModConstructor(properties);
}
async function importLayersPointCloudFiltersPointCloudValueFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/pointCloudFilters/PointCloudValueFilter");
  }
  const module2 = await import("@arcgis/core/layers/pointCloudFilters/PointCloudValueFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersPointCloudFiltersPointCloudValueFilter(properties) {
  const ModConstructor = await importLayersPointCloudFiltersPointCloudValueFilter();
  return new ModConstructor(properties);
}
async function importLayersPointCloudFiltersPointCloudBitfieldFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/pointCloudFilters/PointCloudBitfieldFilter");
  }
  const module2 = await import("@arcgis/core/layers/pointCloudFilters/PointCloudBitfieldFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersPointCloudFiltersPointCloudBitfieldFilter(properties) {
  const ModConstructor = await importLayersPointCloudFiltersPointCloudBitfieldFilter();
  return new ModConstructor(properties);
}
async function importLayersPointCloudLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/PointCloudLayer");
  }
  const module2 = await import("@arcgis/core/layers/PointCloudLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersPointCloudLayer(properties) {
  const ModConstructor = await importLayersPointCloudLayer();
  return new ModConstructor(properties);
}
async function importLayersRouteLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/RouteLayer");
  }
  const module2 = await import("@arcgis/core/layers/RouteLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersRouteLayer(properties) {
  const ModConstructor = await importLayersRouteLayer();
  return new ModConstructor(properties);
}
async function importLayersSceneLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/SceneLayer");
  }
  const module2 = await import("@arcgis/core/layers/SceneLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSceneLayer(properties) {
  const ModConstructor = await importLayersSceneLayer();
  return new ModConstructor(properties);
}
async function importLayersStreamLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/StreamLayer");
  }
  const module2 = await import("@arcgis/core/layers/StreamLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersStreamLayer(properties) {
  const ModConstructor = await importLayersStreamLayer();
  return new ModConstructor(properties);
}
async function importLayersSubtypeGroupLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/SubtypeGroupLayer");
  }
  const module2 = await import("@arcgis/core/layers/SubtypeGroupLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSubtypeGroupLayer(properties) {
  const ModConstructor = await importLayersSubtypeGroupLayer();
  return new ModConstructor(properties);
}
async function importLayersSupportAggregateField() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/AggregateField");
  }
  const module2 = await import("@arcgis/core/layers/support/AggregateField.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportAggregateField(properties) {
  const ModConstructor = await importLayersSupportAggregateField();
  return new ModConstructor(properties);
}
async function importLayersSupportBuildingFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/BuildingFilter");
  }
  const module2 = await import("@arcgis/core/layers/support/BuildingFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportBuildingFilter(properties) {
  const ModConstructor = await importLayersSupportBuildingFilter();
  return new ModConstructor(properties);
}
async function importLayersSupportBuildingSummaryStatistics() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/BuildingSummaryStatistics");
  }
  const module2 = await import("@arcgis/core/layers/support/BuildingSummaryStatistics.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportBuildingSummaryStatistics(properties) {
  const ModConstructor = await importLayersSupportBuildingSummaryStatistics();
  return new ModConstructor(properties);
}
async function importLayersSupportCodedValueDomain() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/CodedValueDomain");
  }
  const module2 = await import("@arcgis/core/layers/support/CodedValueDomain.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportCodedValueDomain(properties) {
  const ModConstructor = await importLayersSupportCodedValueDomain();
  return new ModConstructor(properties);
}
async function importLayersSupportControlPointsGeoreference() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/ControlPointsGeoreference");
  }
  const module2 = await import("@arcgis/core/layers/support/ControlPointsGeoreference.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportControlPointsGeoreference(properties) {
  const ModConstructor = await importLayersSupportControlPointsGeoreference();
  return new ModConstructor(properties);
}
async function importLayersSupportCornersGeoreference() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/CornersGeoreference");
  }
  const module2 = await import("@arcgis/core/layers/support/CornersGeoreference.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportCornersGeoreference(properties) {
  const ModConstructor = await importLayersSupportCornersGeoreference();
  return new ModConstructor(properties);
}
async function importLayersSupportDimensionalDefinition() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/DimensionalDefinition");
  }
  const module2 = await import("@arcgis/core/layers/support/DimensionalDefinition.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportDimensionalDefinition(properties) {
  const ModConstructor = await importLayersSupportDimensionalDefinition();
  return new ModConstructor(properties);
}
async function importLayersSupportDisplayFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/DisplayFilter");
  }
  const module2 = await import("@arcgis/core/layers/support/DisplayFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportDisplayFilter(properties) {
  const ModConstructor = await importLayersSupportDisplayFilter();
  return new ModConstructor(properties);
}
async function importLayersSupportDisplayFilterInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/DisplayFilterInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/DisplayFilterInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportDisplayFilterInfo(properties) {
  const ModConstructor = await importLayersSupportDisplayFilterInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportDomain() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/Domain");
  }
  const module2 = await import("@arcgis/core/layers/support/Domain.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportDomain(properties) {
  const ModConstructor = await importLayersSupportDomain();
  return new ModConstructor(properties);
}
async function importLayersSupportElevationSampler() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/ElevationSampler");
  }
  const module2 = await import("@arcgis/core/layers/support/ElevationSampler.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportElevationSampler() {
  const ModConstructor = await importLayersSupportElevationSampler();
  return new ModConstructor();
}
async function importLayersSupportExpressionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/ExpressionInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/ExpressionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportExpressionInfo(properties) {
  const ModConstructor = await importLayersSupportExpressionInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportExtentAndRotationGeoreference() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/ExtentAndRotationGeoreference");
  }
  const module2 = await import("@arcgis/core/layers/support/ExtentAndRotationGeoreference.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportExtentAndRotationGeoreference(properties) {
  const ModConstructor = await importLayersSupportExtentAndRotationGeoreference();
  return new ModConstructor(properties);
}
async function importLayersSupportFacilityLayerInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FacilityLayerInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/FacilityLayerInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFacilityLayerInfo(properties) {
  const ModConstructor = await importLayersSupportFacilityLayerInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureEffect() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureEffect");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureEffect.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureEffect(properties) {
  const ModConstructor = await importLayersSupportFeatureEffect();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureFilter");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureFilter(properties) {
  const ModConstructor = await importLayersSupportFeatureFilter();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureReductionBinning() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureReductionBinning");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureReductionBinning.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureReductionBinning(properties) {
  const ModConstructor = await importLayersSupportFeatureReductionBinning();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureReductionCluster() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureReductionCluster");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureReductionCluster.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureReductionCluster(properties) {
  const ModConstructor = await importLayersSupportFeatureReductionCluster();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureReductionSelection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureReductionSelection");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureReductionSelection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureReductionSelection(properties) {
  const ModConstructor = await importLayersSupportFeatureReductionSelection();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureTemplate");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureTemplate(properties) {
  const ModConstructor = await importLayersSupportFeatureTemplate();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureType");
  }
  const module2 = await import("@arcgis/core/layers/support/FeatureType.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFeatureType(properties) {
  const ModConstructor = await importLayersSupportFeatureType();
  return new ModConstructor(properties);
}
async function importLayersSupportField() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/Field");
  }
  const module2 = await import("@arcgis/core/layers/support/Field.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportField(properties) {
  const ModConstructor = await importLayersSupportField();
  return new ModConstructor(properties);
}
async function importLayersSupportFieldsIndex() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FieldsIndex");
  }
  const module2 = await import("@arcgis/core/layers/support/FieldsIndex.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportFieldsIndex(properties) {
  const ModConstructor = await importLayersSupportFieldsIndex();
  return new ModConstructor(properties);
}
async function importLayersSupportGeometryFieldsInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/GeometryFieldsInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/GeometryFieldsInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportGeometryFieldsInfo(properties) {
  const ModConstructor = await importLayersSupportGeometryFieldsInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportImageElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/ImageElement");
  }
  const module2 = await import("@arcgis/core/layers/support/ImageElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportImageElement(properties) {
  const ModConstructor = await importLayersSupportImageElement();
  return new ModConstructor(properties);
}
async function importLayersSupportInheritedDomain() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/InheritedDomain");
  }
  const module2 = await import("@arcgis/core/layers/support/InheritedDomain.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportInheritedDomain(properties) {
  const ModConstructor = await importLayersSupportInheritedDomain();
  return new ModConstructor(properties);
}
async function importLayersSupportKMLSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/KMLSublayer");
  }
  const module2 = await import("@arcgis/core/layers/support/KMLSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportKMLSublayer(properties) {
  const ModConstructor = await importLayersSupportKMLSublayer();
  return new ModConstructor(properties);
}
async function importLayersSupportLabelClass() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/LabelClass");
  }
  const module2 = await import("@arcgis/core/layers/support/LabelClass.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportLabelClass(properties) {
  const ModConstructor = await importLayersSupportLabelClass();
  return new ModConstructor(properties);
}
async function importLayersSupportLayerFloorInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/LayerFloorInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/LayerFloorInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportLayerFloorInfo(properties) {
  const ModConstructor = await importLayersSupportLayerFloorInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportLevelLayerInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/LevelLayerInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/LevelLayerInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportLevelLayerInfo(properties) {
  const ModConstructor = await importLayersSupportLevelLayerInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportLocalMediaElementSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/LocalMediaElementSource");
  }
  const module2 = await import("@arcgis/core/layers/support/LocalMediaElementSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportLocalMediaElementSource(properties) {
  const ModConstructor = await importLayersSupportLocalMediaElementSource();
  return new ModConstructor(properties);
}
async function importLayersSupportLOD() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/LOD");
  }
  const module2 = await import("@arcgis/core/layers/support/LOD.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportLOD(properties) {
  const ModConstructor = await importLayersSupportLOD();
  return new ModConstructor(properties);
}
async function importLayersSupportMapImage() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/MapImage");
  }
  const module2 = await import("@arcgis/core/layers/support/MapImage.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportMapImage(properties) {
  const ModConstructor = await importLayersSupportMapImage();
  return new ModConstructor(properties);
}
async function importLayersSupportMosaicRule() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/MosaicRule");
  }
  const module2 = await import("@arcgis/core/layers/support/MosaicRule.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportMosaicRule(properties) {
  const ModConstructor = await importLayersSupportMosaicRule();
  return new ModConstructor(properties);
}
async function importLayersSupportMultidimensionalSubset() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/MultidimensionalSubset");
  }
  const module2 = await import("@arcgis/core/layers/support/MultidimensionalSubset.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportMultidimensionalSubset(properties) {
  const ModConstructor = await importLayersSupportMultidimensionalSubset();
  return new ModConstructor(properties);
}
async function importLayersSupportOrderByInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/OrderByInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/OrderByInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportOrderByInfo(properties) {
  const ModConstructor = await importLayersSupportOrderByInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportPixelBlock() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/PixelBlock");
  }
  const module2 = await import("@arcgis/core/layers/support/PixelBlock.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportPixelBlock(properties) {
  const ModConstructor = await importLayersSupportPixelBlock();
  return new ModConstructor(properties);
}
async function importLayersSupportPublishingInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/PublishingInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/PublishingInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportPublishingInfo(properties) {
  const ModConstructor = await importLayersSupportPublishingInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportRangeDomain() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RangeDomain");
  }
  const module2 = await import("@arcgis/core/layers/support/RangeDomain.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRangeDomain(properties) {
  const ModConstructor = await importLayersSupportRangeDomain();
  return new ModConstructor(properties);
}
async function importLayersSupportRasterBandInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RasterBandInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/RasterBandInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRasterBandInfo(properties) {
  const ModConstructor = await importLayersSupportRasterBandInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportRasterFunction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RasterFunction");
  }
  const module2 = await import("@arcgis/core/layers/support/RasterFunction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRasterFunction(properties) {
  const ModConstructor = await importLayersSupportRasterFunction();
  return new ModConstructor(properties);
}
async function importLayersSupportRasterInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RasterInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/RasterInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRasterInfo(properties) {
  const ModConstructor = await importLayersSupportRasterInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportRasterSensorInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RasterSensorInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/RasterSensorInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRasterSensorInfo(properties) {
  const ModConstructor = await importLayersSupportRasterSensorInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportRelationship() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/Relationship");
  }
  const module2 = await import("@arcgis/core/layers/support/Relationship.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRelationship(properties) {
  const ModConstructor = await importLayersSupportRelationship();
  return new ModConstructor(properties);
}
async function importLayersSupportRouteStopSymbols() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RouteStopSymbols");
  }
  const module2 = await import("@arcgis/core/layers/support/RouteStopSymbols.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRouteStopSymbols(properties) {
  const ModConstructor = await importLayersSupportRouteStopSymbols();
  return new ModConstructor(properties);
}
async function importLayersSupportRouteSymbols() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/RouteSymbols");
  }
  const module2 = await import("@arcgis/core/layers/support/RouteSymbols.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportRouteSymbols(properties) {
  const ModConstructor = await importLayersSupportRouteSymbols();
  return new ModConstructor(properties);
}
async function importLayersSupportSceneFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/SceneFilter");
  }
  const module2 = await import("@arcgis/core/layers/support/SceneFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSceneFilter(properties) {
  const ModConstructor = await importLayersSupportSceneFilter();
  return new ModConstructor(properties);
}
async function importLayersSupportSceneModification() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/SceneModification");
  }
  const module2 = await import("@arcgis/core/layers/support/SceneModification.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSceneModification(properties) {
  const ModConstructor = await importLayersSupportSceneModification();
  return new ModConstructor(properties);
}
async function importLayersSupportSceneModifications() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/SceneModifications");
  }
  const module2 = await import("@arcgis/core/layers/support/SceneModifications.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSceneModifications(properties) {
  const ModConstructor = await importLayersSupportSceneModifications();
  return new ModConstructor(properties);
}
async function importLayersSupportSiteLayerInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/SiteLayerInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/SiteLayerInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSiteLayerInfo(properties) {
  const ModConstructor = await importLayersSupportSiteLayerInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/Sublayer");
  }
  const module2 = await import("@arcgis/core/layers/support/Sublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSublayer(properties) {
  const ModConstructor = await importLayersSupportSublayer();
  return new ModConstructor(properties);
}
async function importLayersSupportSubtype() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/Subtype");
  }
  const module2 = await import("@arcgis/core/layers/support/Subtype.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSubtype(properties) {
  const ModConstructor = await importLayersSupportSubtype();
  return new ModConstructor(properties);
}
async function importLayersSupportSubtypeSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/SubtypeSublayer");
  }
  const module2 = await import("@arcgis/core/layers/support/SubtypeSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportSubtypeSublayer(properties) {
  const ModConstructor = await importLayersSupportSubtypeSublayer();
  return new ModConstructor(properties);
}
async function importLayersSupportTelemetryData() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TelemetryData");
  }
  const module2 = await import("@arcgis/core/layers/support/TelemetryData.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTelemetryData(properties) {
  const ModConstructor = await importLayersSupportTelemetryData();
  return new ModConstructor(properties);
}
async function importLayersSupportTelemetryDisplay() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TelemetryDisplay");
  }
  const module2 = await import("@arcgis/core/layers/support/TelemetryDisplay.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTelemetryDisplay(properties) {
  const ModConstructor = await importLayersSupportTelemetryDisplay();
  return new ModConstructor(properties);
}
async function importLayersSupportTileInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TileInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/TileInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTileInfo(properties) {
  const ModConstructor = await importLayersSupportTileInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportTileMatrixSet() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TileMatrixSet");
  }
  const module2 = await import("@arcgis/core/layers/support/TileMatrixSet.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTileMatrixSet(properties) {
  const ModConstructor = await importLayersSupportTileMatrixSet();
  return new ModConstructor(properties);
}
async function importLayersSupportTimeInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TimeInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/TimeInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTimeInfo(properties) {
  const ModConstructor = await importLayersSupportTimeInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportTrackInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TrackInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/TrackInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTrackInfo(properties) {
  const ModConstructor = await importLayersSupportTrackInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportTrackPartInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/TrackPartInfo");
  }
  const module2 = await import("@arcgis/core/layers/support/TrackPartInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportTrackPartInfo(properties) {
  const ModConstructor = await importLayersSupportTrackPartInfo();
  return new ModConstructor(properties);
}
async function importLayersSupportVideoElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/VideoElement");
  }
  const module2 = await import("@arcgis/core/layers/support/VideoElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportVideoElement(properties) {
  const ModConstructor = await importLayersSupportVideoElement();
  return new ModConstructor(properties);
}
async function importLayersSupportVideoTimeExtent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/VideoTimeExtent");
  }
  const module2 = await import("@arcgis/core/layers/support/VideoTimeExtent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportVideoTimeExtent(properties) {
  const ModConstructor = await importLayersSupportVideoTimeExtent();
  return new ModConstructor(properties);
}
async function importLayersViewshedLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ViewshedLayer");
  }
  const module2 = await import("@arcgis/core/layers/ViewshedLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersViewshedLayer(properties) {
  const ModConstructor = await importLayersViewshedLayer();
  return new ModConstructor(properties);
}
async function importLayersVoxelVoxelDynamicSection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelDynamicSection");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelDynamicSection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelVoxelDynamicSection(properties) {
  const ModConstructor = await importLayersVoxelVoxelDynamicSection();
  return new ModConstructor(properties);
}
async function importLayersVoxelVoxelSlice() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelSlice");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelSlice.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelVoxelSlice(properties) {
  const ModConstructor = await importLayersVoxelVoxelSlice();
  return new ModConstructor(properties);
}
async function importLayersVoxelVoxelTransferFunctionStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelTransferFunctionStyle");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelTransferFunctionStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelVoxelTransferFunctionStyle(properties) {
  const ModConstructor = await importLayersVoxelVoxelTransferFunctionStyle();
  return new ModConstructor(properties);
}
async function importLayersVoxelVoxelVariableStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelVariableStyle");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelVariableStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelVoxelVariableStyle(properties) {
  const ModConstructor = await importLayersVoxelVoxelVariableStyle();
  return new ModConstructor(properties);
}
async function importLayersVoxelVoxelVolumeStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelVolumeStyle");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelVolumeStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelVoxelVolumeStyle(properties) {
  const ModConstructor = await importLayersVoxelVoxelVolumeStyle();
  return new ModConstructor(properties);
}
async function importLayersSupportWMSSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/WMSSublayer");
  }
  const module2 = await import("@arcgis/core/layers/support/WMSSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportWMSSublayer(properties) {
  const ModConstructor = await importLayersSupportWMSSublayer();
  return new ModConstructor(properties);
}
async function importLayersSupportWMTSStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/WMTSStyle");
  }
  const module2 = await import("@arcgis/core/layers/support/WMTSStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportWMTSStyle(properties) {
  const ModConstructor = await importLayersSupportWMTSStyle();
  return new ModConstructor(properties);
}
async function importLayersSupportWMTSSublayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/WMTSSublayer");
  }
  const module2 = await import("@arcgis/core/layers/support/WMTSSublayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersSupportWMTSSublayer(properties) {
  const ModConstructor = await importLayersSupportWMTSSublayer();
  return new ModConstructor(properties);
}
async function importLayersTileLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/TileLayer");
  }
  const module2 = await import("@arcgis/core/layers/TileLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersTileLayer(properties) {
  const ModConstructor = await importLayersTileLayer();
  return new ModConstructor(properties);
}
async function importLayersUnknownLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/UnknownLayer");
  }
  const module2 = await import("@arcgis/core/layers/UnknownLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersUnknownLayer(properties) {
  const ModConstructor = await importLayersUnknownLayer();
  return new ModConstructor(properties);
}
async function importLayersUnsupportedLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/UnsupportedLayer");
  }
  const module2 = await import("@arcgis/core/layers/UnsupportedLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersUnsupportedLayer(properties) {
  const ModConstructor = await importLayersUnsupportedLayer();
  return new ModConstructor(properties);
}
async function importLayersVectorTileLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/VectorTileLayer");
  }
  const module2 = await import("@arcgis/core/layers/VectorTileLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVectorTileLayer(properties) {
  const ModConstructor = await importLayersVectorTileLayer();
  return new ModConstructor(properties);
}
async function importLayersVideoLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/VideoLayer");
  }
  const module2 = await import("@arcgis/core/layers/VideoLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVideoLayer(properties) {
  const ModConstructor = await importLayersVideoLayer();
  return new ModConstructor(properties);
}
async function importLayersVoxelLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/VoxelLayer");
  }
  const module2 = await import("@arcgis/core/layers/VoxelLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersVoxelLayer(properties) {
  const ModConstructor = await importLayersVoxelLayer();
  return new ModConstructor(properties);
}
async function importLayersWCSLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/WCSLayer");
  }
  const module2 = await import("@arcgis/core/layers/WCSLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersWCSLayer(properties) {
  const ModConstructor = await importLayersWCSLayer();
  return new ModConstructor(properties);
}
async function importLayersWebTileLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/WebTileLayer");
  }
  const module2 = await import("@arcgis/core/layers/WebTileLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersWebTileLayer(properties) {
  const ModConstructor = await importLayersWebTileLayer();
  return new ModConstructor(properties);
}
async function importLayersWFSLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/WFSLayer");
  }
  const module2 = await import("@arcgis/core/layers/WFSLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersWFSLayer(properties) {
  const ModConstructor = await importLayersWFSLayer();
  return new ModConstructor(properties);
}
async function importLayersWMSLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/WMSLayer");
  }
  const module2 = await import("@arcgis/core/layers/WMSLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersWMSLayer(properties) {
  const ModConstructor = await importLayersWMSLayer();
  return new ModConstructor(properties);
}
async function importLayersWMTSLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/WMTSLayer");
  }
  const module2 = await import("@arcgis/core/layers/WMTSLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLayersWMTSLayer(properties) {
  const ModConstructor = await importLayersWMTSLayer();
  return new ModConstructor(properties);
}
async function importLinkChartChronologicalLayoutSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/linkChart/ChronologicalLayoutSettings");
  }
  const module2 = await import("@arcgis/core/linkChart/ChronologicalLayoutSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLinkChartChronologicalLayoutSettings(properties) {
  const ModConstructor = await importLinkChartChronologicalLayoutSettings();
  return new ModConstructor(properties);
}
async function importLinkChartLayoutSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/linkChart/LayoutSettings");
  }
  const module2 = await import("@arcgis/core/linkChart/LayoutSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLinkChartLayoutSettings(properties) {
  const ModConstructor = await importLinkChartLayoutSettings();
  return new ModConstructor(properties);
}
async function importLinkChartLinkChartProperties() {
  if (isAMD) {
    return await window.$arcgis.import("esri/linkChart/LinkChartProperties");
  }
  const module2 = await import("@arcgis/core/linkChart/LinkChartProperties.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLinkChartLinkChartProperties(properties) {
  const ModConstructor = await importLinkChartLinkChartProperties();
  return new ModConstructor(properties);
}
async function importLinkChartNonspatialDataDisplay() {
  if (isAMD) {
    return await window.$arcgis.import("esri/linkChart/NonspatialDataDisplay");
  }
  const module2 = await import("@arcgis/core/linkChart/NonspatialDataDisplay.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLinkChartNonspatialDataDisplay(properties) {
  const ModConstructor = await importLinkChartNonspatialDataDisplay();
  return new ModConstructor(properties);
}
async function importLinkChartOrganicLayoutSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/linkChart/OrganicLayoutSettings");
  }
  const module2 = await import("@arcgis/core/linkChart/OrganicLayoutSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newLinkChartOrganicLayoutSettings(properties) {
  const ModConstructor = await importLinkChartOrganicLayoutSettings();
  return new ModConstructor(properties);
}
async function importMap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Map");
  }
  const module2 = await import("@arcgis/core/Map.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newMap(properties) {
  const ModConstructor = await importMap();
  return new ModConstructor(properties);
}
async function importNetworksNetwork() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/Network");
  }
  const module2 = await import("@arcgis/core/networks/Network.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksNetwork(properties) {
  const ModConstructor = await importNetworksNetwork();
  return new ModConstructor(properties);
}
async function importNetworksUtilityNetwork() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/UtilityNetwork");
  }
  const module2 = await import("@arcgis/core/networks/UtilityNetwork.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksUtilityNetwork(properties) {
  const ModConstructor = await importNetworksUtilityNetwork();
  return new ModConstructor(properties);
}
async function importNetworksSupportNamedTraceConfiguration() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/NamedTraceConfiguration");
  }
  const module2 = await import("@arcgis/core/networks/support/NamedTraceConfiguration.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportNamedTraceConfiguration(properties) {
  const ModConstructor = await importNetworksSupportNamedTraceConfiguration();
  return new ModConstructor(properties);
}
async function importNetworksSupportNetworkSystemLayers() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/NetworkSystemLayers");
  }
  const module2 = await import("@arcgis/core/networks/support/NetworkSystemLayers.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportNetworkSystemLayers(properties) {
  const ModConstructor = await importNetworksSupportNetworkSystemLayers();
  return new ModConstructor(properties);
}
async function importNetworksSupportTerminal() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/Terminal");
  }
  const module2 = await import("@arcgis/core/networks/support/Terminal.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportTerminal(properties) {
  const ModConstructor = await importNetworksSupportTerminal();
  return new ModConstructor(properties);
}
async function importNetworksSupportTerminalConfiguration() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/TerminalConfiguration");
  }
  const module2 = await import("@arcgis/core/networks/support/TerminalConfiguration.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportTerminalConfiguration(properties) {
  const ModConstructor = await importNetworksSupportTerminalConfiguration();
  return new ModConstructor(properties);
}
async function importNetworksSupportTopologyValidationJobInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/TopologyValidationJobInfo");
  }
  const module2 = await import("@arcgis/core/networks/support/TopologyValidationJobInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportTopologyValidationJobInfo(properties) {
  const ModConstructor = await importNetworksSupportTopologyValidationJobInfo();
  return new ModConstructor(properties);
}
async function importNetworksSupportTraceConfiguration() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/TraceConfiguration");
  }
  const module2 = await import("@arcgis/core/networks/support/TraceConfiguration.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportTraceConfiguration(properties) {
  const ModConstructor = await importNetworksSupportTraceConfiguration();
  return new ModConstructor(properties);
}
async function importNetworksSupportTraceJobInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/TraceJobInfo");
  }
  const module2 = await import("@arcgis/core/networks/support/TraceJobInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportTraceJobInfo(properties) {
  const ModConstructor = await importNetworksSupportTraceJobInfo();
  return new ModConstructor(properties);
}
async function importNetworksSupportUNTraceConfiguration() {
  if (isAMD) {
    return await window.$arcgis.import("esri/networks/support/UNTraceConfiguration");
  }
  const module2 = await import("@arcgis/core/networks/support/UNTraceConfiguration.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newNetworksSupportUNTraceConfiguration(properties) {
  const ModConstructor = await importNetworksSupportUNTraceConfiguration();
  return new ModConstructor(properties);
}
async function importPopupContentAttachmentsContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/AttachmentsContent");
  }
  const module2 = await import("@arcgis/core/popup/content/AttachmentsContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentAttachmentsContent(properties) {
  const ModConstructor = await importPopupContentAttachmentsContent();
  return new ModConstructor(properties);
}
async function importPopupContentBarChartMediaInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/BarChartMediaInfo");
  }
  const module2 = await import("@arcgis/core/popup/content/BarChartMediaInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentBarChartMediaInfo(properties) {
  const ModConstructor = await importPopupContentBarChartMediaInfo();
  return new ModConstructor(properties);
}
async function importPopupContentColumnChartMediaInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/ColumnChartMediaInfo");
  }
  const module2 = await import("@arcgis/core/popup/content/ColumnChartMediaInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentColumnChartMediaInfo(properties) {
  const ModConstructor = await importPopupContentColumnChartMediaInfo();
  return new ModConstructor(properties);
}
async function importPopupContentContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/Content");
  }
  const module2 = await import("@arcgis/core/popup/content/Content.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentContent(properties) {
  const ModConstructor = await importPopupContentContent();
  return new ModConstructor(properties);
}
async function importPopupContentCustomContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/CustomContent");
  }
  const module2 = await import("@arcgis/core/popup/content/CustomContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentCustomContent(properties) {
  const ModConstructor = await importPopupContentCustomContent();
  return new ModConstructor(properties);
}
async function importPopupContentExpressionContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/ExpressionContent");
  }
  const module2 = await import("@arcgis/core/popup/content/ExpressionContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentExpressionContent(properties) {
  const ModConstructor = await importPopupContentExpressionContent();
  return new ModConstructor(properties);
}
async function importPopupContentFieldsContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/FieldsContent");
  }
  const module2 = await import("@arcgis/core/popup/content/FieldsContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentFieldsContent(properties) {
  const ModConstructor = await importPopupContentFieldsContent();
  return new ModConstructor(properties);
}
async function importPopupContentImageMediaInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/ImageMediaInfo");
  }
  const module2 = await import("@arcgis/core/popup/content/ImageMediaInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentImageMediaInfo(properties) {
  const ModConstructor = await importPopupContentImageMediaInfo();
  return new ModConstructor(properties);
}
async function importPopupContentLineChartMediaInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/LineChartMediaInfo");
  }
  const module2 = await import("@arcgis/core/popup/content/LineChartMediaInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentLineChartMediaInfo(properties) {
  const ModConstructor = await importPopupContentLineChartMediaInfo();
  return new ModConstructor(properties);
}
async function importPopupContentMediaContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/MediaContent");
  }
  const module2 = await import("@arcgis/core/popup/content/MediaContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentMediaContent(properties) {
  const ModConstructor = await importPopupContentMediaContent();
  return new ModConstructor(properties);
}
async function importPopupContentPieChartMediaInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/PieChartMediaInfo");
  }
  const module2 = await import("@arcgis/core/popup/content/PieChartMediaInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentPieChartMediaInfo(properties) {
  const ModConstructor = await importPopupContentPieChartMediaInfo();
  return new ModConstructor(properties);
}
async function importPopupContentRelationshipContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/RelationshipContent");
  }
  const module2 = await import("@arcgis/core/popup/content/RelationshipContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentRelationshipContent(properties) {
  const ModConstructor = await importPopupContentRelationshipContent();
  return new ModConstructor(properties);
}
async function importPopupContentSupportChartMediaInfoValue() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/support/ChartMediaInfoValue");
  }
  const module2 = await import("@arcgis/core/popup/content/support/ChartMediaInfoValue.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentSupportChartMediaInfoValue(properties) {
  const ModConstructor = await importPopupContentSupportChartMediaInfoValue();
  return new ModConstructor(properties);
}
async function importPopupContentSupportChartMediaInfoValueSeries() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/support/ChartMediaInfoValueSeries");
  }
  const module2 = await import("@arcgis/core/popup/content/support/ChartMediaInfoValueSeries.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentSupportChartMediaInfoValueSeries(properties) {
  const ModConstructor = await importPopupContentSupportChartMediaInfoValueSeries();
  return new ModConstructor(properties);
}
async function importPopupContentSupportImageMediaInfoValue() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/support/ImageMediaInfoValue");
  }
  const module2 = await import("@arcgis/core/popup/content/support/ImageMediaInfoValue.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentSupportImageMediaInfoValue(properties) {
  const ModConstructor = await importPopupContentSupportImageMediaInfoValue();
  return new ModConstructor(properties);
}
async function importPopupContentTextContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/TextContent");
  }
  const module2 = await import("@arcgis/core/popup/content/TextContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentTextContent(properties) {
  const ModConstructor = await importPopupContentTextContent();
  return new ModConstructor(properties);
}
async function importPopupContentUtilityNetworkAssociationsContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content/UtilityNetworkAssociationsContent");
  }
  const module2 = await import("@arcgis/core/popup/content/UtilityNetworkAssociationsContent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupContentUtilityNetworkAssociationsContent(properties) {
  const ModConstructor = await importPopupContentUtilityNetworkAssociationsContent();
  return new ModConstructor(properties);
}
async function importPopupElementExpressionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/ElementExpressionInfo");
  }
  const module2 = await import("@arcgis/core/popup/ElementExpressionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupElementExpressionInfo(properties) {
  const ModConstructor = await importPopupElementExpressionInfo();
  return new ModConstructor(properties);
}
async function importPopupExpressionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/ExpressionInfo");
  }
  const module2 = await import("@arcgis/core/popup/ExpressionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupExpressionInfo(properties) {
  const ModConstructor = await importPopupExpressionInfo();
  return new ModConstructor(properties);
}
async function importPopupFieldInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/FieldInfo");
  }
  const module2 = await import("@arcgis/core/popup/FieldInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupFieldInfo(properties) {
  const ModConstructor = await importPopupFieldInfo();
  return new ModConstructor(properties);
}
async function importPopupLayerOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/LayerOptions");
  }
  const module2 = await import("@arcgis/core/popup/LayerOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupLayerOptions(properties) {
  const ModConstructor = await importPopupLayerOptions();
  return new ModConstructor(properties);
}
async function importPopupRelatedRecordsInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/RelatedRecordsInfo");
  }
  const module2 = await import("@arcgis/core/popup/RelatedRecordsInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupRelatedRecordsInfo(properties) {
  const ModConstructor = await importPopupRelatedRecordsInfo();
  return new ModConstructor(properties);
}
async function importPopupSupportAttachmentsOrderByInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/support/AttachmentsOrderByInfo");
  }
  const module2 = await import("@arcgis/core/popup/support/AttachmentsOrderByInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupSupportAttachmentsOrderByInfo(properties) {
  const ModConstructor = await importPopupSupportAttachmentsOrderByInfo();
  return new ModConstructor(properties);
}
async function importPopupSupportFieldInfoFormat() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/support/FieldInfoFormat");
  }
  const module2 = await import("@arcgis/core/popup/support/FieldInfoFormat.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupSupportFieldInfoFormat(properties) {
  const ModConstructor = await importPopupSupportFieldInfoFormat();
  return new ModConstructor(properties);
}
async function importPopupSupportRelatedRecordsInfoFieldOrder() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/support/RelatedRecordsInfoFieldOrder");
  }
  const module2 = await import("@arcgis/core/popup/support/RelatedRecordsInfoFieldOrder.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupSupportRelatedRecordsInfoFieldOrder(properties) {
  const ModConstructor = await importPopupSupportRelatedRecordsInfoFieldOrder();
  return new ModConstructor(properties);
}
async function importPopupSupportUtilityNetworkAssociationType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/support/UtilityNetworkAssociationType");
  }
  const module2 = await import("@arcgis/core/popup/support/UtilityNetworkAssociationType.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupSupportUtilityNetworkAssociationType(properties) {
  const ModConstructor = await importPopupSupportUtilityNetworkAssociationType();
  return new ModConstructor(properties);
}
async function importPopupTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/PopupTemplate");
  }
  const module2 = await import("@arcgis/core/PopupTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPopupTemplate(properties) {
  const ModConstructor = await importPopupTemplate();
  return new ModConstructor(properties);
}
async function importPortalPortal() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/Portal");
  }
  const module2 = await import("@arcgis/core/portal/Portal.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortal(properties) {
  const ModConstructor = await importPortalPortal();
  return new ModConstructor(properties);
}
async function importPortalPortalFolder() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalFolder");
  }
  const module2 = await import("@arcgis/core/portal/PortalFolder.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalFolder(properties) {
  const ModConstructor = await importPortalPortalFolder();
  return new ModConstructor(properties);
}
async function importPortalPortalGroup() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalGroup");
  }
  const module2 = await import("@arcgis/core/portal/PortalGroup.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalGroup(properties) {
  const ModConstructor = await importPortalPortalGroup();
  return new ModConstructor(properties);
}
async function importPortalPortalItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalItem");
  }
  const module2 = await import("@arcgis/core/portal/PortalItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalItem(properties) {
  const ModConstructor = await importPortalPortalItem();
  return new ModConstructor(properties);
}
async function importPortalPortalItemResource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalItemResource");
  }
  const module2 = await import("@arcgis/core/portal/PortalItemResource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalItemResource(properties) {
  const ModConstructor = await importPortalPortalItemResource();
  return new ModConstructor(properties);
}
async function importPortalPortalQueryParams() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalQueryParams");
  }
  const module2 = await import("@arcgis/core/portal/PortalQueryParams.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalQueryParams(properties) {
  const ModConstructor = await importPortalPortalQueryParams();
  return new ModConstructor(properties);
}
async function importPortalPortalQueryResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalQueryResult");
  }
  const module2 = await import("@arcgis/core/portal/PortalQueryResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalQueryResult(properties) {
  const ModConstructor = await importPortalPortalQueryResult();
  return new ModConstructor(properties);
}
async function importPortalPortalRating() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalRating");
  }
  const module2 = await import("@arcgis/core/portal/PortalRating.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalRating(properties) {
  const ModConstructor = await importPortalPortalRating();
  return new ModConstructor(properties);
}
async function importPortalPortalUser() {
  if (isAMD) {
    return await window.$arcgis.import("esri/portal/PortalUser");
  }
  const module2 = await import("@arcgis/core/portal/PortalUser.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newPortalPortalUser(properties) {
  const ModConstructor = await importPortalPortalUser();
  return new ModConstructor(properties);
}
async function importRenderersClassBreaksRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/ClassBreaksRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/ClassBreaksRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersClassBreaksRenderer(properties) {
  const ModConstructor = await importRenderersClassBreaksRenderer();
  return new ModConstructor(properties);
}
async function importRenderersDictionaryRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/DictionaryRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/DictionaryRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersDictionaryRenderer(properties) {
  const ModConstructor = await importRenderersDictionaryRenderer();
  return new ModConstructor(properties);
}
async function importRenderersDotDensityRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/DotDensityRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/DotDensityRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersDotDensityRenderer(properties) {
  const ModConstructor = await importRenderersDotDensityRenderer();
  return new ModConstructor(properties);
}
async function importRenderersFlowRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/FlowRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/FlowRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersFlowRenderer(properties) {
  const ModConstructor = await importRenderersFlowRenderer();
  return new ModConstructor(properties);
}
async function importRenderersHeatmapRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/HeatmapRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/HeatmapRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersHeatmapRenderer(properties) {
  const ModConstructor = await importRenderersHeatmapRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPieChartRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PieChartRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PieChartRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPieChartRenderer(properties) {
  const ModConstructor = await importRenderersPieChartRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPointCloudClassBreaksRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PointCloudClassBreaksRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PointCloudClassBreaksRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPointCloudClassBreaksRenderer(properties) {
  const ModConstructor = await importRenderersPointCloudClassBreaksRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPointCloudRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PointCloudRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PointCloudRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPointCloudRenderer(properties) {
  const ModConstructor = await importRenderersPointCloudRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPointCloudRGBRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PointCloudRGBRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PointCloudRGBRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPointCloudRGBRenderer(properties) {
  const ModConstructor = await importRenderersPointCloudRGBRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPointCloudStretchRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PointCloudStretchRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PointCloudStretchRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPointCloudStretchRenderer(properties) {
  const ModConstructor = await importRenderersPointCloudStretchRenderer();
  return new ModConstructor(properties);
}
async function importRenderersPointCloudUniqueValueRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/PointCloudUniqueValueRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/PointCloudUniqueValueRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersPointCloudUniqueValueRenderer(properties) {
  const ModConstructor = await importRenderersPointCloudUniqueValueRenderer();
  return new ModConstructor(properties);
}
async function importRenderersRasterColormapRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/RasterColormapRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/RasterColormapRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersRasterColormapRenderer(properties) {
  const ModConstructor = await importRenderersRasterColormapRenderer();
  return new ModConstructor(properties);
}
async function importRenderersSupportRasterPresetRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/RasterPresetRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/support/RasterPresetRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportRasterPresetRenderer(properties) {
  const ModConstructor = await importRenderersSupportRasterPresetRenderer();
  return new ModConstructor(properties);
}
async function importRenderersRasterShadedReliefRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/RasterShadedReliefRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/RasterShadedReliefRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersRasterShadedReliefRenderer(properties) {
  const ModConstructor = await importRenderersRasterShadedReliefRenderer();
  return new ModConstructor(properties);
}
async function importRenderersRasterStretchRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/RasterStretchRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/RasterStretchRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersRasterStretchRenderer(properties) {
  const ModConstructor = await importRenderersRasterStretchRenderer();
  return new ModConstructor(properties);
}
async function importRenderersRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/Renderer");
  }
  const module2 = await import("@arcgis/core/renderers/Renderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersRenderer(properties) {
  const ModConstructor = await importRenderersRenderer();
  return new ModConstructor(properties);
}
async function importRenderersSimpleRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/SimpleRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/SimpleRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSimpleRenderer(properties) {
  const ModConstructor = await importRenderersSimpleRenderer();
  return new ModConstructor(properties);
}
async function importRenderersSupportAttributeColorInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/AttributeColorInfo");
  }
  const module2 = await import("@arcgis/core/renderers/support/AttributeColorInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportAttributeColorInfo(properties) {
  const ModConstructor = await importRenderersSupportAttributeColorInfo();
  return new ModConstructor(properties);
}
async function importRenderersSupportAuthoringInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/AuthoringInfo");
  }
  const module2 = await import("@arcgis/core/renderers/support/AuthoringInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportAuthoringInfo(properties) {
  const ModConstructor = await importRenderersSupportAuthoringInfo();
  return new ModConstructor(properties);
}
async function importRenderersSupportAuthoringInfoVisualVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/AuthoringInfoVisualVariable");
  }
  const module2 = await import("@arcgis/core/renderers/support/AuthoringInfoVisualVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportAuthoringInfoVisualVariable(properties) {
  const ModConstructor = await importRenderersSupportAuthoringInfoVisualVariable();
  return new ModConstructor(properties);
}
async function importRenderersSupportClassBreakInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/ClassBreakInfo");
  }
  const module2 = await import("@arcgis/core/renderers/support/ClassBreakInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportClassBreakInfo(properties) {
  const ModConstructor = await importRenderersSupportClassBreakInfo();
  return new ModConstructor(properties);
}
async function importRenderersSupportColormapInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/ColormapInfo");
  }
  const module2 = await import("@arcgis/core/renderers/support/ColormapInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportColormapInfo(properties) {
  const ModConstructor = await importRenderersSupportColormapInfo();
  return new ModConstructor(properties);
}
async function importRenderersSupportHeatmapColorStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/HeatmapColorStop");
  }
  const module2 = await import("@arcgis/core/renderers/support/HeatmapColorStop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportHeatmapColorStop(properties) {
  const ModConstructor = await importRenderersSupportHeatmapColorStop();
  return new ModConstructor(properties);
}
async function importRenderersSupportUniqueValue() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/UniqueValue");
  }
  const module2 = await import("@arcgis/core/renderers/support/UniqueValue.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportUniqueValue(properties) {
  const ModConstructor = await importRenderersSupportUniqueValue();
  return new ModConstructor(properties);
}
async function importRenderersSupportUniqueValueClass() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/UniqueValueClass");
  }
  const module2 = await import("@arcgis/core/renderers/support/UniqueValueClass.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportUniqueValueClass(properties) {
  const ModConstructor = await importRenderersSupportUniqueValueClass();
  return new ModConstructor(properties);
}
async function importRenderersSupportUniqueValueGroup() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/UniqueValueGroup");
  }
  const module2 = await import("@arcgis/core/renderers/support/UniqueValueGroup.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportUniqueValueGroup(properties) {
  const ModConstructor = await importRenderersSupportUniqueValueGroup();
  return new ModConstructor(properties);
}
async function importRenderersSupportUniqueValueInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/UniqueValueInfo");
  }
  const module2 = await import("@arcgis/core/renderers/support/UniqueValueInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersSupportUniqueValueInfo(properties) {
  const ModConstructor = await importRenderersSupportUniqueValueInfo();
  return new ModConstructor(properties);
}
async function importRenderersUniqueValueRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/UniqueValueRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/UniqueValueRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersUniqueValueRenderer(properties) {
  const ModConstructor = await importRenderersUniqueValueRenderer();
  return new ModConstructor(properties);
}
async function importRenderersVectorFieldRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/VectorFieldRenderer");
  }
  const module2 = await import("@arcgis/core/renderers/VectorFieldRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVectorFieldRenderer(properties) {
  const ModConstructor = await importRenderersVectorFieldRenderer();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesColorVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/ColorVariable");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/ColorVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesColorVariable(properties) {
  const ModConstructor = await importRenderersVisualVariablesColorVariable();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesOpacityVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/OpacityVariable");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/OpacityVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesOpacityVariable(properties) {
  const ModConstructor = await importRenderersVisualVariablesOpacityVariable();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesRotationVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/RotationVariable");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/RotationVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesRotationVariable(properties) {
  const ModConstructor = await importRenderersVisualVariablesRotationVariable();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesSizeVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/SizeVariable");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/SizeVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesSizeVariable(properties) {
  const ModConstructor = await importRenderersVisualVariablesSizeVariable();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesSupportColorSizeStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/support/ColorSizeStop");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/support/ColorSizeStop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesSupportColorSizeStop(properties) {
  const ModConstructor = await importRenderersVisualVariablesSupportColorSizeStop();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesSupportColorStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/support/ColorStop");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/support/ColorStop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesSupportColorStop(properties) {
  const ModConstructor = await importRenderersVisualVariablesSupportColorStop();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesSupportOpacityStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/support/OpacityStop");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/support/OpacityStop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesSupportOpacityStop(properties) {
  const ModConstructor = await importRenderersVisualVariablesSupportOpacityStop();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesSupportSizeStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/support/SizeStop");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/support/SizeStop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesSupportSizeStop(properties) {
  const ModConstructor = await importRenderersVisualVariablesSupportSizeStop();
  return new ModConstructor(properties);
}
async function importRenderersVisualVariablesVisualVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/visualVariables/VisualVariable");
  }
  const module2 = await import("@arcgis/core/renderers/visualVariables/VisualVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRenderersVisualVariablesVisualVariable(properties) {
  const ModConstructor = await importRenderersVisualVariablesVisualVariable();
  return new ModConstructor(properties);
}
async function importRestFeatureServiceFeatureService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/featureService/FeatureService");
  }
  const module2 = await import("@arcgis/core/rest/featureService/FeatureService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestFeatureServiceFeatureService(properties) {
  const ModConstructor = await importRestFeatureServiceFeatureService();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphDataModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/DataModel");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/DataModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphDataModel(properties) {
  const ModConstructor = await importRestKnowledgeGraphDataModel();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphEntity() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/Entity");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/Entity.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphEntity(properties) {
  const ModConstructor = await importRestKnowledgeGraphEntity();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphEntityType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/EntityType");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/EntityType.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphEntityType(properties) {
  const ModConstructor = await importRestKnowledgeGraphEntityType();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphFieldIndex() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/FieldIndex");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/FieldIndex.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphFieldIndex(properties) {
  const ModConstructor = await importRestKnowledgeGraphFieldIndex();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphApplyEdits() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphApplyEdits");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphApplyEdits.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphApplyEdits(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphApplyEdits();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphApplyEditsResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphApplyEditsResult");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphApplyEditsResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphApplyEditsResult(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphApplyEditsResult();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphNamedObject() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphNamedObject");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphNamedObject.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphNamedObject(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphNamedObject();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphObject() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphObject");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphObject.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphObject(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphObject();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphObjectType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphObjectType");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphObjectType.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphObjectType(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphObjectType();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphProperty() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphProperty");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphProperty.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphProperty(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphProperty();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphQuery");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphQuery(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphQuery();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphQueryResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphQueryResult");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphQueryResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphQueryResult(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphQueryResult();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphQueryResultHeader() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphQueryResultHeader");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphQueryResultHeader.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphQueryResultHeader(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphQueryResultHeader();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphQueryStreaming() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphQueryStreaming");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphQueryStreaming.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphQueryStreaming(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphQueryStreaming();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphQueryStreamingResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphQueryStreamingResult");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphQueryStreamingResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphQueryStreamingResult(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphQueryStreamingResult();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphSearch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphSearch");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphSearch.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphSearch(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphSearch();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphGraphSearchStreaming() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/GraphSearchStreaming");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/GraphSearchStreaming.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphGraphSearchStreaming(properties) {
  const ModConstructor = await importRestKnowledgeGraphGraphSearchStreaming();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphInputQuantizationParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/InputQuantizationParameters");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/InputQuantizationParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphInputQuantizationParameters(properties) {
  const ModConstructor = await importRestKnowledgeGraphInputQuantizationParameters();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphKnowledgeGraph() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/KnowledgeGraph");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/KnowledgeGraph.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphKnowledgeGraph(properties) {
  const ModConstructor = await importRestKnowledgeGraphKnowledgeGraph();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphOutputQuantizationParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/OutputQuantizationParameters");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/OutputQuantizationParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphOutputQuantizationParameters(properties) {
  const ModConstructor = await importRestKnowledgeGraphOutputQuantizationParameters();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphPath() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/Path");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/Path.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphPath(properties) {
  const ModConstructor = await importRestKnowledgeGraphPath();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphRelationship() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/Relationship");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/Relationship.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphRelationship(properties) {
  const ModConstructor = await importRestKnowledgeGraphRelationship();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphRelationshipType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/RelationshipType");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/RelationshipType.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphRelationshipType(properties) {
  const ModConstructor = await importRestKnowledgeGraphRelationshipType();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphSearchIndex() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/SearchIndex");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/SearchIndex.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphSearchIndex(properties) {
  const ModConstructor = await importRestKnowledgeGraphSearchIndex();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphServiceDefinition() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/ServiceDefinition");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/ServiceDefinition.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphServiceDefinition(properties) {
  const ModConstructor = await importRestKnowledgeGraphServiceDefinition();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphSourceTypeValueBehavior() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/SourceTypeValueBehavior");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/SourceTypeValueBehavior.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphSourceTypeValueBehavior(properties) {
  const ModConstructor = await importRestKnowledgeGraphSourceTypeValueBehavior();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsConfiguration");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsConfiguration.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration(properties) {
  const ModConstructor = await importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsEntity");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsEntity.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity(properties) {
  const ModConstructor = await importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsPathFilter");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/toolService/findPaths/CIMFilteredFindPathsPathFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter(properties) {
  const ModConstructor = await importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/toolService/findPaths/CIMKGTraversalDirection");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/toolService/findPaths/CIMKGTraversalDirection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection(properties) {
  const ModConstructor = await importRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection();
  return new ModConstructor(properties);
}
async function importRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraph/toolService/findPaths/FindPathsToolSettings");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraph/toolService/findPaths/FindPathsToolSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings(properties) {
  const ModConstructor = await importRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportAggregatedGeometry() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/AggregatedGeometry");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/AggregatedGeometry.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportAggregatedGeometry(properties) {
  const ModConstructor = await importRestNetworksSupportAggregatedGeometry();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportAssociation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/Association");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/Association.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportAssociation(properties) {
  const ModConstructor = await importRestNetworksSupportAssociation();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportAssociationGeometriesResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/AssociationGeometriesResult");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/AssociationGeometriesResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportAssociationGeometriesResult(properties) {
  const ModConstructor = await importRestNetworksSupportAssociationGeometriesResult();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportFunctionResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/FunctionResult");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/FunctionResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportFunctionResult(properties) {
  const ModConstructor = await importRestNetworksSupportFunctionResult();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportNetworkElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/NetworkElement");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/NetworkElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportNetworkElement(properties) {
  const ModConstructor = await importRestNetworksSupportNetworkElement();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportQueryAssociationsParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/QueryAssociationsParameters");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/QueryAssociationsParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportQueryAssociationsParameters(properties) {
  const ModConstructor = await importRestNetworksSupportQueryAssociationsParameters();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportQueryAssociationsResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/QueryAssociationsResult");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/QueryAssociationsResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportQueryAssociationsResult(properties) {
  const ModConstructor = await importRestNetworksSupportQueryAssociationsResult();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportSynthesizeAssociationGeometriesParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/SynthesizeAssociationGeometriesParameters");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/SynthesizeAssociationGeometriesParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportSynthesizeAssociationGeometriesParameters(properties) {
  const ModConstructor = await importRestNetworksSupportSynthesizeAssociationGeometriesParameters();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportTraceLocation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/TraceLocation");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/TraceLocation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportTraceLocation(properties) {
  const ModConstructor = await importRestNetworksSupportTraceLocation();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportTraceParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/TraceParameters");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/TraceParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportTraceParameters(properties) {
  const ModConstructor = await importRestNetworksSupportTraceParameters();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportTraceResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/TraceResult");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/TraceResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportTraceResult(properties) {
  const ModConstructor = await importRestNetworksSupportTraceResult();
  return new ModConstructor(properties);
}
async function importRestNetworksSupportValidateNetworkTopologyParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/ValidateNetworkTopologyParameters");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/ValidateNetworkTopologyParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestNetworksSupportValidateNetworkTopologyParameters(properties) {
  const ModConstructor = await importRestNetworksSupportValidateNetworkTopologyParameters();
  return new ModConstructor(properties);
}
async function importRestQuerySupportAttachmentInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/query/support/AttachmentInfo");
  }
  const module2 = await import("@arcgis/core/rest/query/support/AttachmentInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestQuerySupportAttachmentInfo(properties) {
  const ModConstructor = await importRestQuerySupportAttachmentInfo();
  return new ModConstructor(properties);
}
async function importRestSupportAddressCandidate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AddressCandidate");
  }
  const module2 = await import("@arcgis/core/rest/support/AddressCandidate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAddressCandidate(properties) {
  const ModConstructor = await importRestSupportAddressCandidate();
  return new ModConstructor(properties);
}
async function importRestSupportAttributeBinsFeatureSet() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AttributeBinsFeatureSet");
  }
  const module2 = await import("@arcgis/core/rest/support/AttributeBinsFeatureSet.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAttributeBinsFeatureSet(properties) {
  const ModConstructor = await importRestSupportAttributeBinsFeatureSet();
  return new ModConstructor(properties);
}
async function importRestSupportAttributeBinsQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AttributeBinsQuery");
  }
  const module2 = await import("@arcgis/core/rest/support/AttributeBinsQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAttributeBinsQuery(properties) {
  const ModConstructor = await importRestSupportAttributeBinsQuery();
  return new ModConstructor(properties);
}
async function importRestSupportAttributeBinsGrouping() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AttributeBinsGrouping");
  }
  const module2 = await import("@arcgis/core/rest/support/AttributeBinsGrouping.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAttributeBinsGrouping(properties) {
  const ModConstructor = await importRestSupportAttributeBinsGrouping();
  return new ModConstructor(properties);
}
async function importRestSupportAutoIntervalBinParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AutoIntervalBinParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/AutoIntervalBinParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAutoIntervalBinParameters(properties) {
  const ModConstructor = await importRestSupportAutoIntervalBinParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFixedBoundariesBinParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FixedBoundariesBinParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/FixedBoundariesBinParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFixedBoundariesBinParameters(properties) {
  const ModConstructor = await importRestSupportFixedBoundariesBinParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFixedIntervalBinParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FixedIntervalBinParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/FixedIntervalBinParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFixedIntervalBinParameters(properties) {
  const ModConstructor = await importRestSupportFixedIntervalBinParameters();
  return new ModConstructor(properties);
}
async function importRestSupportDateBinParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DateBinParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/DateBinParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDateBinParameters(properties) {
  const ModConstructor = await importRestSupportDateBinParameters();
  return new ModConstructor(properties);
}
async function importRestSupportDateBinTimeInterval() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DateBinTimeInterval");
  }
  const module2 = await import("@arcgis/core/rest/support/DateBinTimeInterval.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDateBinTimeInterval(properties) {
  const ModConstructor = await importRestSupportDateBinTimeInterval();
  return new ModConstructor(properties);
}
async function importRestSupportAlgorithmicColorRamp() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AlgorithmicColorRamp");
  }
  const module2 = await import("@arcgis/core/rest/support/AlgorithmicColorRamp.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAlgorithmicColorRamp(properties) {
  const ModConstructor = await importRestSupportAlgorithmicColorRamp();
  return new ModConstructor(properties);
}
async function importRestSupportArealUnit() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ArealUnit");
  }
  const module2 = await import("@arcgis/core/rest/support/ArealUnit.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportArealUnit(properties) {
  const ModConstructor = await importRestSupportArealUnit();
  return new ModConstructor(properties);
}
async function importRestSupportAreasAndLengthsParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AreasAndLengthsParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/AreasAndLengthsParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAreasAndLengthsParameters(properties) {
  const ModConstructor = await importRestSupportAreasAndLengthsParameters();
  return new ModConstructor(properties);
}
async function importRestSupportAttachmentQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/AttachmentQuery");
  }
  const module2 = await import("@arcgis/core/rest/support/AttachmentQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportAttachmentQuery(properties) {
  const ModConstructor = await importRestSupportAttachmentQuery();
  return new ModConstructor(properties);
}
async function importRestSupportBaseImageMeasureParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/BaseImageMeasureParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/BaseImageMeasureParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportBaseImageMeasureParameters(properties) {
  const ModConstructor = await importRestSupportBaseImageMeasureParameters();
  return new ModConstructor(properties);
}
async function importRestSupportBaseImageMeasureResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/BaseImageMeasureResult");
  }
  const module2 = await import("@arcgis/core/rest/support/BaseImageMeasureResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportBaseImageMeasureResult(properties) {
  const ModConstructor = await importRestSupportBaseImageMeasureResult();
  return new ModConstructor(properties);
}
async function importRestSupportBufferParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/BufferParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/BufferParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportBufferParameters(properties) {
  const ModConstructor = await importRestSupportBufferParameters();
  return new ModConstructor(properties);
}
async function importRestSupportCameraInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/CameraInfo");
  }
  const module2 = await import("@arcgis/core/rest/support/CameraInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportCameraInfo(properties) {
  const ModConstructor = await importRestSupportCameraInfo();
  return new ModConstructor(properties);
}
async function importRestSupportClosestFacilityParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ClosestFacilityParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ClosestFacilityParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportClosestFacilityParameters(properties) {
  const ModConstructor = await importRestSupportClosestFacilityParameters();
  return new ModConstructor(properties);
}
async function importRestSupportClosestFacilitySolveResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ClosestFacilitySolveResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ClosestFacilitySolveResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportClosestFacilitySolveResult(properties) {
  const ModConstructor = await importRestSupportClosestFacilitySolveResult();
  return new ModConstructor(properties);
}
async function importRestSupportColorRamp() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ColorRamp");
  }
  const module2 = await import("@arcgis/core/rest/support/ColorRamp.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportColorRamp(properties) {
  const ModConstructor = await importRestSupportColorRamp();
  return new ModConstructor(properties);
}
async function importRestSupportDataFile() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DataFile");
  }
  const module2 = await import("@arcgis/core/rest/support/DataFile.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDataFile(properties) {
  const ModConstructor = await importRestSupportDataFile();
  return new ModConstructor(properties);
}
async function importRestSupportDataLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DataLayer");
  }
  const module2 = await import("@arcgis/core/rest/support/DataLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDataLayer(properties) {
  const ModConstructor = await importRestSupportDataLayer();
  return new ModConstructor(properties);
}
async function importRestSupportDensifyParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DensifyParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/DensifyParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDensifyParameters(properties) {
  const ModConstructor = await importRestSupportDensifyParameters();
  return new ModConstructor(properties);
}
async function importRestSupportDirectionLine() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DirectionLine");
  }
  const module2 = await import("@arcgis/core/rest/support/DirectionLine.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDirectionLine(properties) {
  const ModConstructor = await importRestSupportDirectionLine();
  return new ModConstructor(properties);
}
async function importRestSupportDirectionPoint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DirectionPoint");
  }
  const module2 = await import("@arcgis/core/rest/support/DirectionPoint.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDirectionPoint(properties) {
  const ModConstructor = await importRestSupportDirectionPoint();
  return new ModConstructor(properties);
}
async function importRestSupportDirectionsEvent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DirectionsEvent");
  }
  const module2 = await import("@arcgis/core/rest/support/DirectionsEvent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDirectionsEvent(properties) {
  const ModConstructor = await importRestSupportDirectionsEvent();
  return new ModConstructor(properties);
}
async function importRestSupportDirectionsFeature() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DirectionsFeature");
  }
  const module2 = await import("@arcgis/core/rest/support/DirectionsFeature.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDirectionsFeature(properties) {
  const ModConstructor = await importRestSupportDirectionsFeature();
  return new ModConstructor(properties);
}
async function importRestSupportDirectionsFeatureSet() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DirectionsFeatureSet");
  }
  const module2 = await import("@arcgis/core/rest/support/DirectionsFeatureSet.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDirectionsFeatureSet(properties) {
  const ModConstructor = await importRestSupportDirectionsFeatureSet();
  return new ModConstructor(properties);
}
async function importRestSupportDistanceParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/DistanceParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/DistanceParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportDistanceParameters(properties) {
  const ModConstructor = await importRestSupportDistanceParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFeatureSet() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FeatureSet");
  }
  const module2 = await import("@arcgis/core/rest/support/FeatureSet.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFeatureSet(properties) {
  const ModConstructor = await importRestSupportFeatureSet();
  return new ModConstructor(properties);
}
async function importRestSupportFetchPlaceParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FetchPlaceParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/FetchPlaceParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFetchPlaceParameters(properties) {
  const ModConstructor = await importRestSupportFetchPlaceParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFindImagesParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FindImagesParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/FindImagesParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFindImagesParameters(properties) {
  const ModConstructor = await importRestSupportFindImagesParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFindImagesResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FindImagesResult");
  }
  const module2 = await import("@arcgis/core/rest/support/FindImagesResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFindImagesResult(properties) {
  const ModConstructor = await importRestSupportFindImagesResult();
  return new ModConstructor(properties);
}
async function importRestSupportFindParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FindParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/FindParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFindParameters(properties) {
  const ModConstructor = await importRestSupportFindParameters();
  return new ModConstructor(properties);
}
async function importRestSupportFindResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/FindResult");
  }
  const module2 = await import("@arcgis/core/rest/support/FindResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportFindResult(properties) {
  const ModConstructor = await importRestSupportFindResult();
  return new ModConstructor(properties);
}
async function importRestSupportGeneralizeParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/GeneralizeParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/GeneralizeParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportGeneralizeParameters(properties) {
  const ModConstructor = await importRestSupportGeneralizeParameters();
  return new ModConstructor(properties);
}
async function importRestSupportGPMessage() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/GPMessage");
  }
  const module2 = await import("@arcgis/core/rest/support/GPMessage.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportGPMessage(properties) {
  const ModConstructor = await importRestSupportGPMessage();
  return new ModConstructor(properties);
}
async function importRestSupportIdentifyParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/IdentifyParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/IdentifyParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportIdentifyParameters(properties) {
  const ModConstructor = await importRestSupportIdentifyParameters();
  return new ModConstructor(properties);
}
async function importRestSupportIdentifyResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/IdentifyResult");
  }
  const module2 = await import("@arcgis/core/rest/support/IdentifyResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportIdentifyResult(properties) {
  const ModConstructor = await importRestSupportIdentifyResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageAngleParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageAngleParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageAngleParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageAngleParameters(properties) {
  const ModConstructor = await importRestSupportImageAngleParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageAngleResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageAngleResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageAngleResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageAngleResult(properties) {
  const ModConstructor = await importRestSupportImageAngleResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageAreaParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageAreaParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageAreaParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageAreaParameters(properties) {
  const ModConstructor = await importRestSupportImageAreaParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageAreaResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageAreaResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageAreaResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageAreaResult(properties) {
  const ModConstructor = await importRestSupportImageAreaResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageBoundaryParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageBoundaryParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageBoundaryParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageBoundaryParameters(properties) {
  const ModConstructor = await importRestSupportImageBoundaryParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageBoundaryResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageBoundaryResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageBoundaryResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageBoundaryResult(properties) {
  const ModConstructor = await importRestSupportImageBoundaryResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageDistanceParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageDistanceParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageDistanceParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageDistanceParameters(properties) {
  const ModConstructor = await importRestSupportImageDistanceParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageDistanceResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageDistanceResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageDistanceResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageDistanceResult(properties) {
  const ModConstructor = await importRestSupportImageDistanceResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageGPSInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageGPSInfo");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageGPSInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageGPSInfo(properties) {
  const ModConstructor = await importRestSupportImageGPSInfo();
  return new ModConstructor(properties);
}
async function importRestSupportImageGPSInfoParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageGPSInfoParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageGPSInfoParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageGPSInfoParameters(properties) {
  const ModConstructor = await importRestSupportImageGPSInfoParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageGPSInfoResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageGPSInfoResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageGPSInfoResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageGPSInfoResult(properties) {
  const ModConstructor = await importRestSupportImageGPSInfoResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageHeightParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageHeightParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageHeightParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageHeightParameters(properties) {
  const ModConstructor = await importRestSupportImageHeightParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageHeightResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageHeightResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageHeightResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageHeightResult(properties) {
  const ModConstructor = await importRestSupportImageHeightResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageHistogramParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageHistogramParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageHistogramParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageHistogramParameters(properties) {
  const ModConstructor = await importRestSupportImageHistogramParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageIdentifyParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageIdentifyParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageIdentifyParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageIdentifyParameters(properties) {
  const ModConstructor = await importRestSupportImageIdentifyParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageIdentifyResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageIdentifyResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageIdentifyResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageIdentifyResult(properties) {
  const ModConstructor = await importRestSupportImageIdentifyResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageInspectionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageInspectionInfo");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageInspectionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageInspectionInfo(properties) {
  const ModConstructor = await importRestSupportImageInspectionInfo();
  return new ModConstructor(properties);
}
async function importRestSupportImageParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageParameters(properties) {
  const ModConstructor = await importRestSupportImageParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImagePixelLocationParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImagePixelLocationParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImagePixelLocationParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImagePixelLocationParameters(properties) {
  const ModConstructor = await importRestSupportImagePixelLocationParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImagePixelLocationResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImagePixelLocationResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImagePixelLocationResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImagePixelLocationResult(properties) {
  const ModConstructor = await importRestSupportImagePixelLocationResult();
  return new ModConstructor(properties);
}
async function importRestSupportImagePointParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImagePointParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImagePointParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImagePointParameters(properties) {
  const ModConstructor = await importRestSupportImagePointParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImagePointResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImagePointResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImagePointResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImagePointResult(properties) {
  const ModConstructor = await importRestSupportImagePointResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageSample() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageSample");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageSample.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageSample(properties) {
  const ModConstructor = await importRestSupportImageSample();
  return new ModConstructor(properties);
}
async function importRestSupportImageSampleParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageSampleParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageSampleParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageSampleParameters(properties) {
  const ModConstructor = await importRestSupportImageSampleParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageSampleResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageSampleResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageSampleResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageSampleResult(properties) {
  const ModConstructor = await importRestSupportImageSampleResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageToMapMultirayParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageToMapMultirayParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageToMapMultirayParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageToMapMultirayParameters(properties) {
  const ModConstructor = await importRestSupportImageToMapMultirayParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageToMapParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageToMapParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageToMapParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageToMapParameters(properties) {
  const ModConstructor = await importRestSupportImageToMapParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageUrlParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageUrlParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageUrlParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageUrlParameters(properties) {
  const ModConstructor = await importRestSupportImageUrlParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageUrlResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageUrlResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageUrlResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageUrlResult(properties) {
  const ModConstructor = await importRestSupportImageUrlResult();
  return new ModConstructor(properties);
}
async function importRestSupportImageVolume() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageVolume");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageVolume.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageVolume(properties) {
  const ModConstructor = await importRestSupportImageVolume();
  return new ModConstructor(properties);
}
async function importRestSupportImageVolumeParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageVolumeParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageVolumeParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageVolumeParameters(properties) {
  const ModConstructor = await importRestSupportImageVolumeParameters();
  return new ModConstructor(properties);
}
async function importRestSupportImageVolumeResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ImageVolumeResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ImageVolumeResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportImageVolumeResult(properties) {
  const ModConstructor = await importRestSupportImageVolumeResult();
  return new ModConstructor(properties);
}
async function importRestSupportJobInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/JobInfo");
  }
  const module2 = await import("@arcgis/core/rest/support/JobInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportJobInfo(properties) {
  const ModConstructor = await importRestSupportJobInfo();
  return new ModConstructor(properties);
}
async function importRestSupportLegendLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/LegendLayer");
  }
  const module2 = await import("@arcgis/core/rest/support/LegendLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportLegendLayer(properties) {
  const ModConstructor = await importRestSupportLegendLayer();
  return new ModConstructor(properties);
}
async function importRestSupportLengthsParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/LengthsParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/LengthsParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportLengthsParameters(properties) {
  const ModConstructor = await importRestSupportLengthsParameters();
  return new ModConstructor(properties);
}
async function importRestSupportLinearUnit() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/LinearUnit");
  }
  const module2 = await import("@arcgis/core/rest/support/LinearUnit.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportLinearUnit(properties) {
  const ModConstructor = await importRestSupportLinearUnit();
  return new ModConstructor(properties);
}
async function importRestSupportMapToImageParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/MapToImageParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/MapToImageParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportMapToImageParameters(properties) {
  const ModConstructor = await importRestSupportMapToImageParameters();
  return new ModConstructor(properties);
}
async function importRestSupportMeasureAreaFromImageResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/MeasureAreaFromImageResult");
  }
  const module2 = await import("@arcgis/core/rest/support/MeasureAreaFromImageResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportMeasureAreaFromImageResult(properties) {
  const ModConstructor = await importRestSupportMeasureAreaFromImageResult();
  return new ModConstructor(properties);
}
async function importRestSupportMeasureFromImageParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/MeasureFromImageParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/MeasureFromImageParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportMeasureFromImageParameters(properties) {
  const ModConstructor = await importRestSupportMeasureFromImageParameters();
  return new ModConstructor(properties);
}
async function importRestSupportMeasureLengthFromImageResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/MeasureLengthFromImageResult");
  }
  const module2 = await import("@arcgis/core/rest/support/MeasureLengthFromImageResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportMeasureLengthFromImageResult(properties) {
  const ModConstructor = await importRestSupportMeasureLengthFromImageResult();
  return new ModConstructor(properties);
}
async function importRestSupportMultipartColorRamp() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/MultipartColorRamp");
  }
  const module2 = await import("@arcgis/core/rest/support/MultipartColorRamp.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportMultipartColorRamp(properties) {
  const ModConstructor = await importRestSupportMultipartColorRamp();
  return new ModConstructor(properties);
}
async function importRestSupportNAMessage() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/NAMessage");
  }
  const module2 = await import("@arcgis/core/rest/support/NAMessage.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportNAMessage(properties) {
  const ModConstructor = await importRestSupportNAMessage();
  return new ModConstructor(properties);
}
async function importRestSupportNetworkFeatureSet() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/NetworkFeatureSet");
  }
  const module2 = await import("@arcgis/core/rest/support/NetworkFeatureSet.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportNetworkFeatureSet(properties) {
  const ModConstructor = await importRestSupportNetworkFeatureSet();
  return new ModConstructor(properties);
}
async function importRestSupportNetworkUrl() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/NetworkUrl");
  }
  const module2 = await import("@arcgis/core/rest/support/NetworkUrl.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportNetworkUrl(properties) {
  const ModConstructor = await importRestSupportNetworkUrl();
  return new ModConstructor(properties);
}
async function importRestSupportOffsetParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/OffsetParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/OffsetParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportOffsetParameters(properties) {
  const ModConstructor = await importRestSupportOffsetParameters();
  return new ModConstructor(properties);
}
async function importRestSupportParameterValue() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ParameterValue");
  }
  const module2 = await import("@arcgis/core/rest/support/ParameterValue.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportParameterValue(properties) {
  const ModConstructor = await importRestSupportParameterValue();
  return new ModConstructor(properties);
}
async function importRestSupportPlaceResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PlaceResult");
  }
  const module2 = await import("@arcgis/core/rest/support/PlaceResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPlaceResult(properties) {
  const ModConstructor = await importRestSupportPlaceResult();
  return new ModConstructor(properties);
}
async function importRestSupportPlacesParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PlacesParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/PlacesParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPlacesParameters(properties) {
  const ModConstructor = await importRestSupportPlacesParameters();
  return new ModConstructor(properties);
}
async function importRestSupportPlacesQueryParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PlacesQueryParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/PlacesQueryParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPlacesQueryParameters(properties) {
  const ModConstructor = await importRestSupportPlacesQueryParameters();
  return new ModConstructor(properties);
}
async function importRestSupportPlacesQueryResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PlacesQueryResult");
  }
  const module2 = await import("@arcgis/core/rest/support/PlacesQueryResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPlacesQueryResult(properties) {
  const ModConstructor = await importRestSupportPlacesQueryResult();
  return new ModConstructor(properties);
}
async function importRestSupportPointBarrier() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PointBarrier");
  }
  const module2 = await import("@arcgis/core/rest/support/PointBarrier.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPointBarrier(properties) {
  const ModConstructor = await importRestSupportPointBarrier();
  return new ModConstructor(properties);
}
async function importRestSupportPolygonBarrier() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PolygonBarrier");
  }
  const module2 = await import("@arcgis/core/rest/support/PolygonBarrier.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPolygonBarrier(properties) {
  const ModConstructor = await importRestSupportPolygonBarrier();
  return new ModConstructor(properties);
}
async function importRestSupportPolylineBarrier() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PolylineBarrier");
  }
  const module2 = await import("@arcgis/core/rest/support/PolylineBarrier.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPolylineBarrier(properties) {
  const ModConstructor = await importRestSupportPolylineBarrier();
  return new ModConstructor(properties);
}
async function importRestSupportPrintParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PrintParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/PrintParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPrintParameters(properties) {
  const ModConstructor = await importRestSupportPrintParameters();
  return new ModConstructor(properties);
}
async function importRestSupportPrintTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/PrintTemplate");
  }
  const module2 = await import("@arcgis/core/rest/support/PrintTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportPrintTemplate(properties) {
  const ModConstructor = await importRestSupportPrintTemplate();
  return new ModConstructor(properties);
}
async function importRestSupportProjectParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ProjectParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ProjectParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportProjectParameters(properties) {
  const ModConstructor = await importRestSupportProjectParameters();
  return new ModConstructor(properties);
}
async function importRestSupportQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/Query");
  }
  const module2 = await import("@arcgis/core/rest/support/Query.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportQuery(properties) {
  const ModConstructor = await importRestSupportQuery();
  return new ModConstructor(properties);
}
async function importRestSupportRasterData() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RasterData");
  }
  const module2 = await import("@arcgis/core/rest/support/RasterData.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRasterData(properties) {
  const ModConstructor = await importRestSupportRasterData();
  return new ModConstructor(properties);
}
async function importRestSupportRelationParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RelationParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/RelationParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRelationParameters(properties) {
  const ModConstructor = await importRestSupportRelationParameters();
  return new ModConstructor(properties);
}
async function importRestSupportRelationshipQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RelationshipQuery");
  }
  const module2 = await import("@arcgis/core/rest/support/RelationshipQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRelationshipQuery(properties) {
  const ModConstructor = await importRestSupportRelationshipQuery();
  return new ModConstructor(properties);
}
async function importRestSupportRouteInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RouteInfo");
  }
  const module2 = await import("@arcgis/core/rest/support/RouteInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRouteInfo(properties) {
  const ModConstructor = await importRestSupportRouteInfo();
  return new ModConstructor(properties);
}
async function importRestSupportRouteParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RouteParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/RouteParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRouteParameters(properties) {
  const ModConstructor = await importRestSupportRouteParameters();
  return new ModConstructor(properties);
}
async function importRestSupportRouteResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RouteResult");
  }
  const module2 = await import("@arcgis/core/rest/support/RouteResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRouteResult(properties) {
  const ModConstructor = await importRestSupportRouteResult();
  return new ModConstructor(properties);
}
async function importRestSupportRouteSolveResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/RouteSolveResult");
  }
  const module2 = await import("@arcgis/core/rest/support/RouteSolveResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportRouteSolveResult(properties) {
  const ModConstructor = await importRestSupportRouteSolveResult();
  return new ModConstructor(properties);
}
async function importRestSupportServiceAreaParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ServiceAreaParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/ServiceAreaParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportServiceAreaParameters(properties) {
  const ModConstructor = await importRestSupportServiceAreaParameters();
  return new ModConstructor(properties);
}
async function importRestSupportServiceAreaSolveResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/ServiceAreaSolveResult");
  }
  const module2 = await import("@arcgis/core/rest/support/ServiceAreaSolveResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportServiceAreaSolveResult(properties) {
  const ModConstructor = await importRestSupportServiceAreaSolveResult();
  return new ModConstructor(properties);
}
async function importRestSupportStatisticDefinition() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/StatisticDefinition");
  }
  const module2 = await import("@arcgis/core/rest/support/StatisticDefinition.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportStatisticDefinition(properties) {
  const ModConstructor = await importRestSupportStatisticDefinition();
  return new ModConstructor(properties);
}
async function importRestSupportStop() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/Stop");
  }
  const module2 = await import("@arcgis/core/rest/support/Stop.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportStop(properties) {
  const ModConstructor = await importRestSupportStop();
  return new ModConstructor(properties);
}
async function importRestSupportTopFeaturesQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/TopFeaturesQuery");
  }
  const module2 = await import("@arcgis/core/rest/support/TopFeaturesQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportTopFeaturesQuery(properties) {
  const ModConstructor = await importRestSupportTopFeaturesQuery();
  return new ModConstructor(properties);
}
async function importRestSupportTopFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/TopFilter");
  }
  const module2 = await import("@arcgis/core/rest/support/TopFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportTopFilter(properties) {
  const ModConstructor = await importRestSupportTopFilter();
  return new ModConstructor(properties);
}
async function importRestSupportTravelMode() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/TravelMode");
  }
  const module2 = await import("@arcgis/core/rest/support/TravelMode.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportTravelMode(properties) {
  const ModConstructor = await importRestSupportTravelMode();
  return new ModConstructor(properties);
}
async function importRestSupportTrimExtendParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/support/TrimExtendParameters");
  }
  const module2 = await import("@arcgis/core/rest/support/TrimExtendParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newRestSupportTrimExtendParameters(properties) {
  const ModConstructor = await importRestSupportTrimExtendParameters();
  return new ModConstructor(properties);
}
async function importSupportActionsActionBase() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/actions/ActionBase");
  }
  const module2 = await import("@arcgis/core/support/actions/ActionBase.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSupportActionsActionBase(properties) {
  const ModConstructor = await importSupportActionsActionBase();
  return new ModConstructor(properties);
}
async function importSupportActionsActionButton() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/actions/ActionButton");
  }
  const module2 = await import("@arcgis/core/support/actions/ActionButton.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSupportActionsActionButton(properties) {
  const ModConstructor = await importSupportActionsActionButton();
  return new ModConstructor(properties);
}
async function importSupportActionsActionToggle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/actions/ActionToggle");
  }
  const module2 = await import("@arcgis/core/support/actions/ActionToggle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSupportActionsActionToggle(properties) {
  const ModConstructor = await importSupportActionsActionToggle();
  return new ModConstructor(properties);
}
async function importSupportBasemapStyle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/BasemapStyle");
  }
  const module2 = await import("@arcgis/core/support/BasemapStyle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSupportBasemapStyle(properties) {
  const ModConstructor = await importSupportBasemapStyle();
  return new ModConstructor(properties);
}
async function importSupportMapFloorInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/MapFloorInfo");
  }
  const module2 = await import("@arcgis/core/support/MapFloorInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSupportMapFloorInfo(properties) {
  const ModConstructor = await importSupportMapFloorInfo();
  return new ModConstructor(properties);
}
async function importSymbolsCalloutsCallout3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/callouts/Callout3D");
  }
  const module2 = await import("@arcgis/core/symbols/callouts/Callout3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsCalloutsCallout3D(properties) {
  const ModConstructor = await importSymbolsCalloutsCallout3D();
  return new ModConstructor(properties);
}
async function importSymbolsCalloutsLineCallout3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/callouts/LineCallout3D");
  }
  const module2 = await import("@arcgis/core/symbols/callouts/LineCallout3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsCalloutsLineCallout3D(properties) {
  const ModConstructor = await importSymbolsCalloutsLineCallout3D();
  return new ModConstructor(properties);
}
async function importSymbolsCIMSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/CIMSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/CIMSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsCIMSymbol(properties) {
  const ModConstructor = await importSymbolsCIMSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsEdgesEdges3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/edges/Edges3D");
  }
  const module2 = await import("@arcgis/core/symbols/edges/Edges3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsEdgesEdges3D(properties) {
  const ModConstructor = await importSymbolsEdgesEdges3D();
  return new ModConstructor(properties);
}
async function importSymbolsEdgesSketchEdges3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/edges/SketchEdges3D");
  }
  const module2 = await import("@arcgis/core/symbols/edges/SketchEdges3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsEdgesSketchEdges3D(properties) {
  const ModConstructor = await importSymbolsEdgesSketchEdges3D();
  return new ModConstructor(properties);
}
async function importSymbolsEdgesSolidEdges3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/edges/SolidEdges3D");
  }
  const module2 = await import("@arcgis/core/symbols/edges/SolidEdges3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsEdgesSolidEdges3D(properties) {
  const ModConstructor = await importSymbolsEdgesSolidEdges3D();
  return new ModConstructor(properties);
}
async function importSymbolsExtrudeSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/ExtrudeSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/ExtrudeSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsExtrudeSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsExtrudeSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsFillSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/FillSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/FillSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsFillSymbol(properties) {
  const ModConstructor = await importSymbolsFillSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsFillSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/FillSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/FillSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsFillSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsFillSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsFont() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/Font");
  }
  const module2 = await import("@arcgis/core/symbols/Font.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsFont(properties) {
  const ModConstructor = await importSymbolsFont();
  return new ModConstructor(properties);
}
async function importSymbolsIconSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/IconSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/IconSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsIconSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsIconSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsLabelSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LabelSymbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/LabelSymbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLabelSymbol3D(properties) {
  const ModConstructor = await importSymbolsLabelSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsLineStyleMarker3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LineStyleMarker3D");
  }
  const module2 = await import("@arcgis/core/symbols/LineStyleMarker3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLineStyleMarker3D(properties) {
  const ModConstructor = await importSymbolsLineStyleMarker3D();
  return new ModConstructor(properties);
}
async function importSymbolsLineSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LineSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/LineSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLineSymbol(properties) {
  const ModConstructor = await importSymbolsLineSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsLineSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LineSymbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/LineSymbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLineSymbol3D(properties) {
  const ModConstructor = await importSymbolsLineSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsLineSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LineSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/LineSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLineSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsLineSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsLineSymbolMarker() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/LineSymbolMarker");
  }
  const module2 = await import("@arcgis/core/symbols/LineSymbolMarker.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsLineSymbolMarker(properties) {
  const ModConstructor = await importSymbolsLineSymbolMarker();
  return new ModConstructor(properties);
}
async function importSymbolsMarkerSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/MarkerSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/MarkerSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsMarkerSymbol(properties) {
  const ModConstructor = await importSymbolsMarkerSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsMeshSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/MeshSymbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/MeshSymbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsMeshSymbol3D(properties) {
  const ModConstructor = await importSymbolsMeshSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsObjectSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/ObjectSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/ObjectSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsObjectSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsObjectSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsPathSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/PathSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/PathSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPathSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsPathSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsPatternsLineStylePattern3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/patterns/LineStylePattern3D");
  }
  const module2 = await import("@arcgis/core/symbols/patterns/LineStylePattern3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPatternsLineStylePattern3D(properties) {
  const ModConstructor = await importSymbolsPatternsLineStylePattern3D();
  return new ModConstructor(properties);
}
async function importSymbolsPatternsStylePattern3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/patterns/StylePattern3D");
  }
  const module2 = await import("@arcgis/core/symbols/patterns/StylePattern3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPatternsStylePattern3D(properties) {
  const ModConstructor = await importSymbolsPatternsStylePattern3D();
  return new ModConstructor(properties);
}
async function importSymbolsPictureFillSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/PictureFillSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/PictureFillSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPictureFillSymbol(properties) {
  const ModConstructor = await importSymbolsPictureFillSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsPictureMarkerSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/PictureMarkerSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/PictureMarkerSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPictureMarkerSymbol(properties) {
  const ModConstructor = await importSymbolsPictureMarkerSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsPointSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/PointSymbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/PointSymbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPointSymbol3D(properties) {
  const ModConstructor = await importSymbolsPointSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsPolygonSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/PolygonSymbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/PolygonSymbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsPolygonSymbol3D(properties) {
  const ModConstructor = await importSymbolsPolygonSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsSimpleFillSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/SimpleFillSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/SimpleFillSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSimpleFillSymbol(properties) {
  const ModConstructor = await importSymbolsSimpleFillSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsSimpleLineSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/SimpleLineSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/SimpleLineSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSimpleLineSymbol(properties) {
  const ModConstructor = await importSymbolsSimpleLineSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsSimpleMarkerSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/SimpleMarkerSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/SimpleMarkerSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSimpleMarkerSymbol(properties) {
  const ModConstructor = await importSymbolsSimpleMarkerSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsSupportStyleOrigin() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/StyleOrigin");
  }
  const module2 = await import("@arcgis/core/symbols/support/StyleOrigin.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSupportStyleOrigin(properties) {
  const ModConstructor = await importSymbolsSupportStyleOrigin();
  return new ModConstructor(properties);
}
async function importSymbolsSupportSymbol3DVerticalOffset() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/Symbol3DVerticalOffset");
  }
  const module2 = await import("@arcgis/core/symbols/support/Symbol3DVerticalOffset.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSupportSymbol3DVerticalOffset(properties) {
  const ModConstructor = await importSymbolsSupportSymbol3DVerticalOffset();
  return new ModConstructor(properties);
}
async function importSymbolsSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/Symbol");
  }
  const module2 = await import("@arcgis/core/symbols/Symbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSymbol(properties) {
  const ModConstructor = await importSymbolsSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsSymbol3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/Symbol3D");
  }
  const module2 = await import("@arcgis/core/symbols/Symbol3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSymbol3D(properties) {
  const ModConstructor = await importSymbolsSymbol3D();
  return new ModConstructor(properties);
}
async function importSymbolsSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/Symbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/Symbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsTextSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/TextSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/TextSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsTextSymbol(properties) {
  const ModConstructor = await importSymbolsTextSymbol();
  return new ModConstructor(properties);
}
async function importSymbolsTextSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/TextSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/TextSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsTextSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsTextSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsWaterSymbol3DLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/WaterSymbol3DLayer");
  }
  const module2 = await import("@arcgis/core/symbols/WaterSymbol3DLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsWaterSymbol3DLayer(properties) {
  const ModConstructor = await importSymbolsWaterSymbol3DLayer();
  return new ModConstructor(properties);
}
async function importSymbolsWebStyleSymbol() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/WebStyleSymbol");
  }
  const module2 = await import("@arcgis/core/symbols/WebStyleSymbol.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newSymbolsWebStyleSymbol(properties) {
  const ModConstructor = await importSymbolsWebStyleSymbol();
  return new ModConstructor(properties);
}
async function importTablesAttributeTableTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/AttributeTableTemplate");
  }
  const module2 = await import("@arcgis/core/tables/AttributeTableTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesAttributeTableTemplate(properties) {
  const ModConstructor = await importTablesAttributeTableTemplate();
  return new ModConstructor(properties);
}
async function importTablesElementsAttributeTableAttachmentElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements/AttributeTableAttachmentElement");
  }
  const module2 = await import("@arcgis/core/tables/elements/AttributeTableAttachmentElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesElementsAttributeTableAttachmentElement(properties) {
  const ModConstructor = await importTablesElementsAttributeTableAttachmentElement();
  return new ModConstructor(properties);
}
async function importTablesElementsAttributeTableElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements/AttributeTableElement");
  }
  const module2 = await import("@arcgis/core/tables/elements/AttributeTableElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesElementsAttributeTableElement(properties) {
  const ModConstructor = await importTablesElementsAttributeTableElement();
  return new ModConstructor(properties);
}
async function importTablesElementsAttributeTableGroupElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements/AttributeTableGroupElement");
  }
  const module2 = await import("@arcgis/core/tables/elements/AttributeTableGroupElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesElementsAttributeTableGroupElement(properties) {
  const ModConstructor = await importTablesElementsAttributeTableGroupElement();
  return new ModConstructor(properties);
}
async function importTablesElementsAttributeTableFieldElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements/AttributeTableFieldElement");
  }
  const module2 = await import("@arcgis/core/tables/elements/AttributeTableFieldElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesElementsAttributeTableFieldElement(properties) {
  const ModConstructor = await importTablesElementsAttributeTableFieldElement();
  return new ModConstructor(properties);
}
async function importTablesElementsAttributeTableRelationshipElement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements/AttributeTableRelationshipElement");
  }
  const module2 = await import("@arcgis/core/tables/elements/AttributeTableRelationshipElement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTablesElementsAttributeTableRelationshipElement(properties) {
  const ModConstructor = await importTablesElementsAttributeTableRelationshipElement();
  return new ModConstructor(properties);
}
async function importTimeTimeExtent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/time/TimeExtent");
  }
  const module2 = await import("@arcgis/core/time/TimeExtent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTimeTimeExtent(properties) {
  const ModConstructor = await importTimeTimeExtent();
  return new ModConstructor(properties);
}
async function importTimeTimeInterval() {
  if (isAMD) {
    return await window.$arcgis.import("esri/time/TimeInterval");
  }
  const module2 = await import("@arcgis/core/time/TimeInterval.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTimeTimeInterval(properties) {
  const ModConstructor = await importTimeTimeInterval();
  return new ModConstructor(properties);
}
async function importTimeExtent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/TimeExtent");
  }
  const module2 = await import("@arcgis/core/TimeExtent.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTimeExtent(properties) {
  const ModConstructor = await importTimeExtent();
  return new ModConstructor(properties);
}
async function importTimeInterval() {
  if (isAMD) {
    return await window.$arcgis.import("esri/TimeInterval");
  }
  const module2 = await import("@arcgis/core/TimeInterval.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newTimeInterval(properties) {
  const ModConstructor = await importTimeInterval();
  return new ModConstructor(properties);
}
async function importVersionManagementVersioningState() {
  if (isAMD) {
    return await window.$arcgis.import("esri/versionManagement/VersioningState");
  }
  const module2 = await import("@arcgis/core/versionManagement/VersioningState.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newVersionManagementVersioningState(properties) {
  const ModConstructor = await importVersionManagementVersioningState();
  return new ModConstructor(properties);
}
async function importVersionManagementVersionManagementService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/versionManagement/VersionManagementService");
  }
  const module2 = await import("@arcgis/core/versionManagement/VersionManagementService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newVersionManagementVersionManagementService(properties) {
  const ModConstructor = await importVersionManagementVersionManagementService();
  return new ModConstructor(properties);
}
async function importViewpoint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Viewpoint");
  }
  const module2 = await import("@arcgis/core/Viewpoint.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewpoint(properties) {
  const ModConstructor = await importViewpoint();
  return new ModConstructor(properties);
}
async function importViews2dLayersBaseLayerView2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/2d/layers/BaseLayerView2D");
  }
  const module2 = await import("@arcgis/core/views/2d/layers/BaseLayerView2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews2dLayersBaseLayerView2D(properties) {
  const ModConstructor = await importViews2dLayersBaseLayerView2D();
  return new ModConstructor(properties);
}
async function importViews2dLayersBaseLayerViewGL2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/2d/layers/BaseLayerViewGL2D");
  }
  const module2 = await import("@arcgis/core/views/2d/layers/BaseLayerViewGL2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews2dLayersBaseLayerViewGL2D(properties) {
  const ModConstructor = await importViews2dLayersBaseLayerViewGL2D();
  return new ModConstructor(properties);
}
async function importViews2dViewState() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/2d/ViewState");
  }
  const module2 = await import("@arcgis/core/views/2d/ViewState.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews2dViewState(properties) {
  const ModConstructor = await importViews2dViewState();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisAreaMeasurementAnalysisView3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/AreaMeasurementAnalysisView3D");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/AreaMeasurementAnalysisView3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisAreaMeasurementAnalysisView3D(properties) {
  const ModConstructor = await importViews3dAnalysisAreaMeasurementAnalysisView3D();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisDirectLineMeasurementAnalysisView3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/DirectLineMeasurementAnalysisView3D");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/DirectLineMeasurementAnalysisView3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisDirectLineMeasurementAnalysisView3D(properties) {
  const ModConstructor = await importViews3dAnalysisDirectLineMeasurementAnalysisView3D();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisLineOfSightAnalysisResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/LineOfSightAnalysisResult");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/LineOfSightAnalysisResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisLineOfSightAnalysisResult(properties) {
  const ModConstructor = await importViews3dAnalysisLineOfSightAnalysisResult();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisLineOfSightAnalysisView3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/LineOfSightAnalysisView3D");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/LineOfSightAnalysisView3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisLineOfSightAnalysisView3D(properties) {
  const ModConstructor = await importViews3dAnalysisLineOfSightAnalysisView3D();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisSliceAnalysisView3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/SliceAnalysisView3D");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/SliceAnalysisView3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisSliceAnalysisView3D(properties) {
  const ModConstructor = await importViews3dAnalysisSliceAnalysisView3D();
  return new ModConstructor(properties);
}
async function importViews3dAnalysisViewshedAnalysisView3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/analysis/ViewshedAnalysisView3D");
  }
  const module2 = await import("@arcgis/core/views/3d/analysis/ViewshedAnalysisView3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dAnalysisViewshedAnalysisView3D(properties) {
  const ModConstructor = await importViews3dAnalysisViewshedAnalysisView3D();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentCloudyWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/CloudyWeather");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/CloudyWeather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentCloudyWeather(properties) {
  const ModConstructor = await importViews3dEnvironmentCloudyWeather();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentFoggyWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/FoggyWeather");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/FoggyWeather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentFoggyWeather(properties) {
  const ModConstructor = await importViews3dEnvironmentFoggyWeather();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentRainyWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/RainyWeather");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/RainyWeather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentRainyWeather(properties) {
  const ModConstructor = await importViews3dEnvironmentRainyWeather();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentSnowyWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/SnowyWeather");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/SnowyWeather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentSnowyWeather(properties) {
  const ModConstructor = await importViews3dEnvironmentSnowyWeather();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentSunLighting() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/SunLighting");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/SunLighting.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentSunLighting(properties) {
  const ModConstructor = await importViews3dEnvironmentSunLighting();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentSunnyWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/SunnyWeather");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/SunnyWeather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentSunnyWeather(properties) {
  const ModConstructor = await importViews3dEnvironmentSunnyWeather();
  return new ModConstructor(properties);
}
async function importViews3dEnvironmentVirtualLighting() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/environment/VirtualLighting");
  }
  const module2 = await import("@arcgis/core/views/3d/environment/VirtualLighting.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dEnvironmentVirtualLighting(properties) {
  const ModConstructor = await importViews3dEnvironmentVirtualLighting();
  return new ModConstructor(properties);
}
async function importViews3dWebglRenderNode() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/webgl/RenderNode");
  }
  const module2 = await import("@arcgis/core/views/3d/webgl/RenderNode.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViews3dWebglRenderNode(properties) {
  const ModConstructor = await importViews3dWebglRenderNode();
  return new ModConstructor(properties);
}
async function importViewsAnalysisDimensionAnalysisView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/analysis/DimensionAnalysisView");
  }
  const module2 = await import("@arcgis/core/views/analysis/DimensionAnalysisView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsAnalysisDimensionAnalysisView(properties) {
  const ModConstructor = await importViewsAnalysisDimensionAnalysisView();
  return new ModConstructor(properties);
}
async function importViewsBasemapView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/BasemapView");
  }
  const module2 = await import("@arcgis/core/views/BasemapView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsBasemapView(properties) {
  const ModConstructor = await importViewsBasemapView();
  return new ModConstructor(properties);
}
async function importViewsDrawDraw() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/Draw");
  }
  const module2 = await import("@arcgis/core/views/draw/Draw.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawDraw(properties) {
  const ModConstructor = await importViewsDrawDraw();
  return new ModConstructor(properties);
}
async function importViewsDrawDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/DrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/DrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawDrawAction(properties) {
  const ModConstructor = await importViewsDrawDrawAction();
  return new ModConstructor(properties);
}
async function importViewsDrawMultipointDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/MultipointDrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/MultipointDrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawMultipointDrawAction(properties) {
  const ModConstructor = await importViewsDrawMultipointDrawAction();
  return new ModConstructor(properties);
}
async function importViewsDrawPointDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/PointDrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/PointDrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawPointDrawAction(properties) {
  const ModConstructor = await importViewsDrawPointDrawAction();
  return new ModConstructor(properties);
}
async function importViewsDrawPolygonDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/PolygonDrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/PolygonDrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawPolygonDrawAction(properties) {
  const ModConstructor = await importViewsDrawPolygonDrawAction();
  return new ModConstructor(properties);
}
async function importViewsDrawPolylineDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/PolylineDrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/PolylineDrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawPolylineDrawAction(properties) {
  const ModConstructor = await importViewsDrawPolylineDrawAction();
  return new ModConstructor(properties);
}
async function importViewsDrawSegmentDrawAction() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/draw/SegmentDrawAction");
  }
  const module2 = await import("@arcgis/core/views/draw/SegmentDrawAction.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsDrawSegmentDrawAction(properties) {
  const ModConstructor = await importViewsDrawSegmentDrawAction();
  return new ModConstructor(properties);
}
async function importViewsGroundView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/GroundView");
  }
  const module2 = await import("@arcgis/core/views/GroundView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsGroundView(properties) {
  const ModConstructor = await importViewsGroundView();
  return new ModConstructor(properties);
}
async function importViewsInputGamepadGamepadInputDevice() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/input/gamepad/GamepadInputDevice");
  }
  const module2 = await import("@arcgis/core/views/input/gamepad/GamepadInputDevice.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInputGamepadGamepadInputDevice(properties) {
  const ModConstructor = await importViewsInputGamepadGamepadInputDevice();
  return new ModConstructor(properties);
}
async function importViewsInputGamepadGamepadSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/input/gamepad/GamepadSettings");
  }
  const module2 = await import("@arcgis/core/views/input/gamepad/GamepadSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInputGamepadGamepadSettings(properties) {
  const ModConstructor = await importViewsInputGamepadGamepadSettings();
  return new ModConstructor(properties);
}
async function importViewsInputInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/input/Input");
  }
  const module2 = await import("@arcgis/core/views/input/Input.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInputInput(properties) {
  const ModConstructor = await importViewsInputInput();
  return new ModConstructor(properties);
}
async function importViewsInteractiveSketchSketchLabelOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/sketch/SketchLabelOptions");
  }
  const module2 = await import("@arcgis/core/views/interactive/sketch/SketchLabelOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveSketchSketchLabelOptions(properties) {
  const ModConstructor = await importViewsInteractiveSketchSketchLabelOptions();
  return new ModConstructor(properties);
}
async function importViewsInteractiveSketchSketchTooltipOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/sketch/SketchTooltipOptions");
  }
  const module2 = await import("@arcgis/core/views/interactive/sketch/SketchTooltipOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveSketchSketchTooltipOptions(properties) {
  const ModConstructor = await importViewsInteractiveSketchSketchTooltipOptions();
  return new ModConstructor(properties);
}
async function importViewsInteractiveSketchSketchValueOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/sketch/SketchValueOptions");
  }
  const module2 = await import("@arcgis/core/views/interactive/sketch/SketchValueOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveSketchSketchValueOptions(properties) {
  const ModConstructor = await importViewsInteractiveSketchSketchValueOptions();
  return new ModConstructor(properties);
}
async function importViewsInteractiveSnappingFeatureSnappingLayerSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/snapping/FeatureSnappingLayerSource");
  }
  const module2 = await import("@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveSnappingFeatureSnappingLayerSource(properties) {
  const ModConstructor = await importViewsInteractiveSnappingFeatureSnappingLayerSource();
  return new ModConstructor(properties);
}
async function importViewsInteractiveSnappingSnappingOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/snapping/SnappingOptions");
  }
  const module2 = await import("@arcgis/core/views/interactive/snapping/SnappingOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveSnappingSnappingOptions(properties) {
  const ModConstructor = await importViewsInteractiveSnappingSnappingOptions();
  return new ModConstructor(properties);
}
async function importViewsInteractiveTooltip() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/interactive/Tooltip");
  }
  const module2 = await import("@arcgis/core/views/interactive/Tooltip.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsInteractiveTooltip(properties) {
  const ModConstructor = await importViewsInteractiveTooltip();
  return new ModConstructor(properties);
}
async function importViewsLayersBuildingComponentSublayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/BuildingComponentSublayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/BuildingComponentSublayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersBuildingComponentSublayerView(properties) {
  const ModConstructor = await importViewsLayersBuildingComponentSublayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersBuildingSceneLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/BuildingSceneLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/BuildingSceneLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersBuildingSceneLayerView(properties) {
  const ModConstructor = await importViewsLayersBuildingSceneLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersCatalogLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/CatalogLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/CatalogLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersCatalogLayerView(properties) {
  const ModConstructor = await importViewsLayersCatalogLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersCatalogDynamicGroupLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/CatalogDynamicGroupLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/CatalogDynamicGroupLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersCatalogDynamicGroupLayerView(properties) {
  const ModConstructor = await importViewsLayersCatalogDynamicGroupLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersCatalogFootprintLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/CatalogFootprintLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/CatalogFootprintLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersCatalogFootprintLayerView(properties) {
  const ModConstructor = await importViewsLayersCatalogFootprintLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersDimensionLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/DimensionLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/DimensionLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersDimensionLayerView(properties) {
  const ModConstructor = await importViewsLayersDimensionLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersFeatureLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/FeatureLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/FeatureLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersFeatureLayerView(properties) {
  const ModConstructor = await importViewsLayersFeatureLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersGroupLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/GroupLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/GroupLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersGroupLayerView(properties) {
  const ModConstructor = await importViewsLayersGroupLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersImageryLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/ImageryLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/ImageryLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersImageryLayerView(properties) {
  const ModConstructor = await importViewsLayersImageryLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersImageryTileLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/ImageryTileLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/ImageryTileLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersImageryTileLayerView(properties) {
  const ModConstructor = await importViewsLayersImageryTileLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/LayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/LayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersLayerView(properties) {
  const ModConstructor = await importViewsLayersLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersMediaLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/MediaLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/MediaLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersMediaLayerView(properties) {
  const ModConstructor = await importViewsLayersMediaLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersOGCFeatureLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/OGCFeatureLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/OGCFeatureLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersOGCFeatureLayerView(properties) {
  const ModConstructor = await importViewsLayersOGCFeatureLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersSceneLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/SceneLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/SceneLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersSceneLayerView(properties) {
  const ModConstructor = await importViewsLayersSceneLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersStreamLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/StreamLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/StreamLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersStreamLayerView(properties) {
  const ModConstructor = await importViewsLayersStreamLayerView();
  return new ModConstructor(properties);
}
async function importViewsLayersViewshedLayerView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/layers/ViewshedLayerView");
  }
  const module2 = await import("@arcgis/core/views/layers/ViewshedLayerView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLayersViewshedLayerView(properties) {
  const ModConstructor = await importViewsLayersViewshedLayerView();
  return new ModConstructor(properties);
}
async function importViewsLinkChartView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/LinkChartView");
  }
  const module2 = await import("@arcgis/core/views/LinkChartView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsLinkChartView(properties) {
  const ModConstructor = await importViewsLinkChartView();
  return new ModConstructor(properties);
}
async function importViewsMagnifier() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/Magnifier");
  }
  const module2 = await import("@arcgis/core/views/Magnifier.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsMagnifier(properties) {
  const ModConstructor = await importViewsMagnifier();
  return new ModConstructor(properties);
}
async function importViewsMapView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/MapView");
  }
  const module2 = await import("@arcgis/core/views/MapView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsMapView(properties) {
  const ModConstructor = await importViewsMapView();
  return new ModConstructor(properties);
}
async function importViewsNavigationGamepadGamepadSettings() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/navigation/gamepad/GamepadSettings");
  }
  const module2 = await import("@arcgis/core/views/navigation/gamepad/GamepadSettings.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsNavigationGamepadGamepadSettings(properties) {
  const ModConstructor = await importViewsNavigationGamepadGamepadSettings();
  return new ModConstructor(properties);
}
async function importViewsNavigationNavigation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/navigation/Navigation");
  }
  const module2 = await import("@arcgis/core/views/navigation/Navigation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsNavigationNavigation(properties) {
  const ModConstructor = await importViewsNavigationNavigation();
  return new ModConstructor(properties);
}
async function importViewsNavigationNavigationActionMap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/navigation/NavigationActionMap");
  }
  const module2 = await import("@arcgis/core/views/navigation/NavigationActionMap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsNavigationNavigationActionMap(properties) {
  const ModConstructor = await importViewsNavigationNavigationActionMap();
  return new ModConstructor(properties);
}
async function importViewsSceneView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/SceneView");
  }
  const module2 = await import("@arcgis/core/views/SceneView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsSceneView(properties) {
  const ModConstructor = await importViewsSceneView();
  return new ModConstructor(properties);
}
async function importViewsSupportHighlightOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/support/HighlightOptions");
  }
  const module2 = await import("@arcgis/core/views/support/HighlightOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsSupportHighlightOptions(properties) {
  const ModConstructor = await importViewsSupportHighlightOptions();
  return new ModConstructor(properties);
}
async function importViewsUiDefaultUI() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/ui/DefaultUI");
  }
  const module2 = await import("@arcgis/core/views/ui/DefaultUI.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsUiDefaultUI(properties) {
  const ModConstructor = await importViewsUiDefaultUI();
  return new ModConstructor(properties);
}
async function importViewsUiUI() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/ui/UI");
  }
  const module2 = await import("@arcgis/core/views/ui/UI.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsUiUI(properties) {
  const ModConstructor = await importViewsUiUI();
  return new ModConstructor(properties);
}
async function importViewsTheme() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/Theme");
  }
  const module2 = await import("@arcgis/core/views/Theme.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsTheme(properties) {
  const ModConstructor = await importViewsTheme();
  return new ModConstructor(properties);
}
async function importViewsView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/View");
  }
  const module2 = await import("@arcgis/core/views/View.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsView(properties) {
  const ModConstructor = await importViewsView();
  return new ModConstructor(properties);
}
async function importViewsView2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/View2D");
  }
  const module2 = await import("@arcgis/core/views/View2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsView2D(properties) {
  const ModConstructor = await importViewsView2D();
  return new ModConstructor(properties);
}
async function importViewsViewAnimation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/ViewAnimation");
  }
  const module2 = await import("@arcgis/core/views/ViewAnimation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newViewsViewAnimation(properties) {
  const ModConstructor = await importViewsViewAnimation();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesSearch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/Search");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/Search.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesSearch(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesSearch();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesSearchLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/SearchLayer");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/SearchLayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesSearchLayer(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesSearchLayer();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesSearchLayerField() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/SearchLayerField");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/SearchLayerField.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesSearchLayerField(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesSearchLayerField();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesSearchTable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/SearchTable");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/SearchTable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesSearchTable(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesSearchTable();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesSearchTableField() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/SearchTableField");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/SearchTableField.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesSearchTableField(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesSearchTableField();
  return new ModConstructor(properties);
}
async function importWebdocApplicationPropertiesViewing() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/applicationProperties/Viewing");
  }
  const module2 = await import("@arcgis/core/webdoc/applicationProperties/Viewing.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocApplicationPropertiesViewing(properties) {
  const ModConstructor = await importWebdocApplicationPropertiesViewing();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/GeotriggersInfo");
  }
  const module2 = await import("@arcgis/core/webdoc/GeotriggersInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfo(properties) {
  const ModConstructor = await importWebdocGeotriggersInfo();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoDeviceLocationFeed() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/DeviceLocationFeed");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/DeviceLocationFeed.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoDeviceLocationFeed(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoDeviceLocationFeed();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoExpressionInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/ExpressionInfo");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/ExpressionInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoExpressionInfo(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoExpressionInfo();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoFeatureFenceParameters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/FeatureFenceParameters");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/FeatureFenceParameters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoFeatureFenceParameters(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoFeatureFenceParameters();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoFeatureFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/FeatureFilter");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/FeatureFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoFeatureFilter(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoFeatureFilter();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoFeatureLayerSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/FeatureLayerSource");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/FeatureLayerSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoFeatureLayerSource(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoFeatureLayerSource();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoFenceGeotrigger() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/FenceGeotrigger");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/FenceGeotrigger.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoFenceGeotrigger(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoFenceGeotrigger();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoGeotrigger() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/Geotrigger");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/Geotrigger.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoGeotrigger(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoGeotrigger();
  return new ModConstructor(properties);
}
async function importWebdocGeotriggersInfoGeotriggerNotificationOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/geotriggersInfo/GeotriggerNotificationOptions");
  }
  const module2 = await import("@arcgis/core/webdoc/geotriggersInfo/GeotriggerNotificationOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocGeotriggersInfoGeotriggerNotificationOptions(properties) {
  const ModConstructor = await importWebdocGeotriggersInfoGeotriggerNotificationOptions();
  return new ModConstructor(properties);
}
async function importWebdocIPSInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/IPSInfo");
  }
  const module2 = await import("@arcgis/core/webdoc/IPSInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocIPSInfo(properties) {
  const ModConstructor = await importWebdocIPSInfo();
  return new ModConstructor(properties);
}
async function importWebdocIpsPositioningService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/ips/PositioningService");
  }
  const module2 = await import("@arcgis/core/webdoc/ips/PositioningService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocIpsPositioningService(properties) {
  const ModConstructor = await importWebdocIpsPositioningService();
  return new ModConstructor(properties);
}
async function importWebdocWidgetsTimeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webdoc/widgets/TimeSlider");
  }
  const module2 = await import("@arcgis/core/webdoc/widgets/TimeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebdocWidgetsTimeSlider(properties) {
  const ModConstructor = await importWebdocWidgetsTimeSlider();
  return new ModConstructor(properties);
}
async function importWebDocument2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebDocument2D");
  }
  const module2 = await import("@arcgis/core/WebDocument2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebDocument2D(properties) {
  const ModConstructor = await importWebDocument2D();
  return new ModConstructor(properties);
}
async function importWebLinkChart() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebLinkChart");
  }
  const module2 = await import("@arcgis/core/WebLinkChart.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebLinkChart(properties) {
  const ModConstructor = await importWebLinkChart();
  return new ModConstructor(properties);
}
async function importWebMap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebMap");
  }
  const module2 = await import("@arcgis/core/WebMap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebMap(properties) {
  const ModConstructor = await importWebMap();
  return new ModConstructor(properties);
}
async function importWebmapApplicationProperties() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webmap/ApplicationProperties");
  }
  const module2 = await import("@arcgis/core/webmap/ApplicationProperties.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebmapApplicationProperties(properties) {
  const ModConstructor = await importWebmapApplicationProperties();
  return new ModConstructor(properties);
}
async function importWebmapBackgroundColorBackground() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webmap/background/ColorBackground");
  }
  const module2 = await import("@arcgis/core/webmap/background/ColorBackground.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebmapBackgroundColorBackground(properties) {
  const ModConstructor = await importWebmapBackgroundColorBackground();
  return new ModConstructor(properties);
}
async function importWebmapBookmark() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webmap/Bookmark");
  }
  const module2 = await import("@arcgis/core/webmap/Bookmark.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebmapBookmark(properties) {
  const ModConstructor = await importWebmapBookmark();
  return new ModConstructor(properties);
}
async function importWebmapInitialViewProperties() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webmap/InitialViewProperties");
  }
  const module2 = await import("@arcgis/core/webmap/InitialViewProperties.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebmapInitialViewProperties(properties) {
  const ModConstructor = await importWebmapInitialViewProperties();
  return new ModConstructor(properties);
}
async function importWebScene() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebScene");
  }
  const module2 = await import("@arcgis/core/WebScene.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebScene(properties) {
  const ModConstructor = await importWebScene();
  return new ModConstructor(properties);
}
async function importWebsceneApplicationProperties() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/ApplicationProperties");
  }
  const module2 = await import("@arcgis/core/webscene/ApplicationProperties.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneApplicationProperties(properties) {
  const ModConstructor = await importWebsceneApplicationProperties();
  return new ModConstructor(properties);
}
async function importWebsceneBackgroundBackground() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/background/Background");
  }
  const module2 = await import("@arcgis/core/webscene/background/Background.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneBackgroundBackground(properties) {
  const ModConstructor = await importWebsceneBackgroundBackground();
  return new ModConstructor(properties);
}
async function importWebsceneBackgroundColorBackground() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/background/ColorBackground");
  }
  const module2 = await import("@arcgis/core/webscene/background/ColorBackground.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneBackgroundColorBackground(properties) {
  const ModConstructor = await importWebsceneBackgroundColorBackground();
  return new ModConstructor(properties);
}
async function importWebsceneEnvironment() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/Environment");
  }
  const module2 = await import("@arcgis/core/webscene/Environment.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneEnvironment(properties) {
  const ModConstructor = await importWebsceneEnvironment();
  return new ModConstructor(properties);
}
async function importWebsceneInitialViewProperties() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/InitialViewProperties");
  }
  const module2 = await import("@arcgis/core/webscene/InitialViewProperties.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneInitialViewProperties(properties) {
  const ModConstructor = await importWebsceneInitialViewProperties();
  return new ModConstructor(properties);
}
async function importWebscenePresentation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/Presentation");
  }
  const module2 = await import("@arcgis/core/webscene/Presentation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebscenePresentation(properties) {
  const ModConstructor = await importWebscenePresentation();
  return new ModConstructor(properties);
}
async function importWebsceneSlide() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/Slide");
  }
  const module2 = await import("@arcgis/core/webscene/Slide.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneSlide(properties) {
  const ModConstructor = await importWebsceneSlide();
  return new ModConstructor(properties);
}
async function importWebsceneSlideLegendInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/SlideLegendInfo");
  }
  const module2 = await import("@arcgis/core/webscene/SlideLegendInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneSlideLegendInfo(properties) {
  const ModConstructor = await importWebsceneSlideLegendInfo();
  return new ModConstructor(properties);
}
async function importWebsceneSunLighting() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/SunLighting");
  }
  const module2 = await import("@arcgis/core/webscene/SunLighting.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneSunLighting(properties) {
  const ModConstructor = await importWebsceneSunLighting();
  return new ModConstructor(properties);
}
async function importWebsceneVirtualLighting() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/VirtualLighting");
  }
  const module2 = await import("@arcgis/core/webscene/VirtualLighting.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWebsceneVirtualLighting(properties) {
  const ModConstructor = await importWebsceneVirtualLighting();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement2D");
  }
  const module2 = await import("@arcgis/core/widgets/AreaMeasurement2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAreaMeasurement2D(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement2D();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement2DAreaMeasurement2DViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAreaMeasurement2DAreaMeasurement2DViewModel(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement2DAreaMeasurement2DViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement3D");
  }
  const module2 = await import("@arcgis/core/widgets/AreaMeasurement3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAreaMeasurement3D(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement3D();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement3DAreaMeasurement3DViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement3D/AreaMeasurement3DViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/AreaMeasurement3D/AreaMeasurement3DViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAreaMeasurement3DAreaMeasurement3DViewModel(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement3DAreaMeasurement3DViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsAttachments() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Attachments");
  }
  const module2 = await import("@arcgis/core/widgets/Attachments.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAttachments(properties) {
  const ModConstructor = await importWidgetsAttachments();
  return new ModConstructor(properties);
}
async function importWidgetsAttachmentsAttachmentsViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Attachments/AttachmentsViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Attachments/AttachmentsViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAttachmentsAttachmentsViewModel(properties) {
  const ModConstructor = await importWidgetsAttachmentsAttachmentsViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsAttribution() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Attribution");
  }
  const module2 = await import("@arcgis/core/widgets/Attribution.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAttribution(properties) {
  const ModConstructor = await importWidgetsAttribution();
  return new ModConstructor(properties);
}
async function importWidgetsAttributionAttributionViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Attribution/AttributionViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Attribution/AttributionViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsAttributionAttributionViewModel(properties) {
  const ModConstructor = await importWidgetsAttributionAttributionViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGallery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapGallery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapGallery(properties) {
  const ModConstructor = await importWidgetsBasemapGallery();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGalleryBasemapGalleryViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery/BasemapGalleryViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapGalleryBasemapGalleryViewModel(properties) {
  const ModConstructor = await importWidgetsBasemapGalleryBasemapGalleryViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGallerySupportBasemapGalleryItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery/support/BasemapGalleryItem");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapGallerySupportBasemapGalleryItem(properties) {
  const ModConstructor = await importWidgetsBasemapGallerySupportBasemapGalleryItem();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGallerySupportLocalBasemapsSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery/support/LocalBasemapsSource");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapGallerySupportLocalBasemapsSource(properties) {
  const ModConstructor = await importWidgetsBasemapGallerySupportLocalBasemapsSource();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGallerySupportPortalBasemapsSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery/support/PortalBasemapsSource");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapGallerySupportPortalBasemapsSource(properties) {
  const ModConstructor = await importWidgetsBasemapGallerySupportPortalBasemapsSource();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapLayerList");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapLayerList.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapLayerList(properties) {
  const ModConstructor = await importWidgetsBasemapLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapLayerListBasemapLayerListViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapLayerList/BasemapLayerListViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapLayerList/BasemapLayerListViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapLayerListBasemapLayerListViewModel(properties) {
  const ModConstructor = await importWidgetsBasemapLayerListBasemapLayerListViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapToggle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapToggle");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapToggle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapToggle(properties) {
  const ModConstructor = await importWidgetsBasemapToggle();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapToggleBasemapToggleViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapToggle/BasemapToggleViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/BasemapToggle/BasemapToggleViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBasemapToggleBasemapToggleViewModel(properties) {
  const ModConstructor = await importWidgetsBasemapToggleBasemapToggleViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBatchAttributeForm() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BatchAttributeForm");
  }
  const module2 = await import("@arcgis/core/widgets/BatchAttributeForm.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBatchAttributeForm(properties) {
  const ModConstructor = await importWidgetsBatchAttributeForm();
  return new ModConstructor(properties);
}
async function importWidgetsBookmarks() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Bookmarks");
  }
  const module2 = await import("@arcgis/core/widgets/Bookmarks.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBookmarks(properties) {
  const ModConstructor = await importWidgetsBookmarks();
  return new ModConstructor(properties);
}
async function importWidgetsBookmarksBookmarksViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Bookmarks/BookmarksViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Bookmarks/BookmarksViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBookmarksBookmarksViewModel(properties) {
  const ModConstructor = await importWidgetsBookmarksBookmarksViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBuildingExplorer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BuildingExplorer");
  }
  const module2 = await import("@arcgis/core/widgets/BuildingExplorer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBuildingExplorer(properties) {
  const ModConstructor = await importWidgetsBuildingExplorer();
  return new ModConstructor(properties);
}
async function importWidgetsBuildingExplorerBuildingExplorerViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BuildingExplorer/BuildingExplorerViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/BuildingExplorer/BuildingExplorerViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBuildingExplorerBuildingExplorerViewModel(properties) {
  const ModConstructor = await importWidgetsBuildingExplorerBuildingExplorerViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBuildingExplorerBuildingLevel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BuildingExplorer/BuildingLevel");
  }
  const module2 = await import("@arcgis/core/widgets/BuildingExplorer/BuildingLevel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBuildingExplorerBuildingLevel(properties) {
  const ModConstructor = await importWidgetsBuildingExplorerBuildingLevel();
  return new ModConstructor(properties);
}
async function importWidgetsBuildingExplorerBuildingPhase() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BuildingExplorer/BuildingPhase");
  }
  const module2 = await import("@arcgis/core/widgets/BuildingExplorer/BuildingPhase.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsBuildingExplorerBuildingPhase(properties) {
  const ModConstructor = await importWidgetsBuildingExplorerBuildingPhase();
  return new ModConstructor(properties);
}
async function importWidgetsCatalogLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CatalogLayerList");
  }
  const module2 = await import("@arcgis/core/widgets/CatalogLayerList.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCatalogLayerList(properties) {
  const ModConstructor = await importWidgetsCatalogLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsCatalogLayerListCatalogLayerListViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CatalogLayerList/CatalogLayerListViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/CatalogLayerList/CatalogLayerListViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCatalogLayerListCatalogLayerListViewModel(properties) {
  const ModConstructor = await importWidgetsCatalogLayerListCatalogLayerListViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsCompass() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Compass");
  }
  const module2 = await import("@arcgis/core/widgets/Compass.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCompass(properties) {
  const ModConstructor = await importWidgetsCompass();
  return new ModConstructor(properties);
}
async function importWidgetsCompassCompassViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Compass/CompassViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Compass/CompassViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCompassCompassViewModel(properties) {
  const ModConstructor = await importWidgetsCompassCompassViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsCoordinateConversion() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CoordinateConversion");
  }
  const module2 = await import("@arcgis/core/widgets/CoordinateConversion.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCoordinateConversion(properties) {
  const ModConstructor = await importWidgetsCoordinateConversion();
  return new ModConstructor(properties);
}
async function importWidgetsCoordinateConversionCoordinateConversionViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CoordinateConversion/CoordinateConversionViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/CoordinateConversion/CoordinateConversionViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCoordinateConversionCoordinateConversionViewModel(properties) {
  const ModConstructor = await importWidgetsCoordinateConversionCoordinateConversionViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsCoordinateConversionSupportConversion() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CoordinateConversion/support/Conversion");
  }
  const module2 = await import("@arcgis/core/widgets/CoordinateConversion/support/Conversion.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCoordinateConversionSupportConversion(properties) {
  const ModConstructor = await importWidgetsCoordinateConversionSupportConversion();
  return new ModConstructor(properties);
}
async function importWidgetsCoordinateConversionSupportFormat() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CoordinateConversion/support/Format");
  }
  const module2 = await import("@arcgis/core/widgets/CoordinateConversion/support/Format.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsCoordinateConversionSupportFormat(properties) {
  const ModConstructor = await importWidgetsCoordinateConversionSupportFormat();
  return new ModConstructor(properties);
}
async function importWidgetsDaylight() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Daylight");
  }
  const module2 = await import("@arcgis/core/widgets/Daylight.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDaylight(properties) {
  const ModConstructor = await importWidgetsDaylight();
  return new ModConstructor(properties);
}
async function importWidgetsDaylightDaylightViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Daylight/DaylightViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Daylight/DaylightViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDaylightDaylightViewModel(properties) {
  const ModConstructor = await importWidgetsDaylightDaylightViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsDirectionalPad() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectionalPad");
  }
  const module2 = await import("@arcgis/core/widgets/DirectionalPad.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirectionalPad(properties) {
  const ModConstructor = await importWidgetsDirectionalPad();
  return new ModConstructor(properties);
}
async function importWidgetsDirectionalPadDirectionalPadViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectionalPad/DirectionalPadViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/DirectionalPad/DirectionalPadViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirectionalPadDirectionalPadViewModel(properties) {
  const ModConstructor = await importWidgetsDirectionalPadDirectionalPadViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsDirections() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Directions");
  }
  const module2 = await import("@arcgis/core/widgets/Directions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirections(properties) {
  const ModConstructor = await importWidgetsDirections();
  return new ModConstructor(properties);
}
async function importWidgetsDirectionsDirectionsViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Directions/DirectionsViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Directions/DirectionsViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirectionsDirectionsViewModel(properties) {
  const ModConstructor = await importWidgetsDirectionsDirectionsViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsDirectLineMeasurement3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectLineMeasurement3D");
  }
  const module2 = await import("@arcgis/core/widgets/DirectLineMeasurement3D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirectLineMeasurement3D(properties) {
  const ModConstructor = await importWidgetsDirectLineMeasurement3D();
  return new ModConstructor(properties);
}
async function importWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectLineMeasurement3D/DirectLineMeasurement3DViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/DirectLineMeasurement3D/DirectLineMeasurement3DViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel(properties) {
  const ModConstructor = await importWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsDistanceMeasurement2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DistanceMeasurement2D");
  }
  const module2 = await import("@arcgis/core/widgets/DistanceMeasurement2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDistanceMeasurement2D(properties) {
  const ModConstructor = await importWidgetsDistanceMeasurement2D();
  return new ModConstructor(properties);
}
async function importWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DistanceMeasurement2D/DistanceMeasurement2DViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/DistanceMeasurement2D/DistanceMeasurement2DViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel(properties) {
  const ModConstructor = await importWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsEditor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor");
  }
  const module2 = await import("@arcgis/core/widgets/Editor.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditor(properties) {
  const ModConstructor = await importWidgetsEditor();
  return new ModConstructor(properties);
}
async function importWidgetsEditorCreateFeaturesWorkflow() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/CreateFeaturesWorkflow");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/CreateFeaturesWorkflow.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorCreateFeaturesWorkflow(properties) {
  const ModConstructor = await importWidgetsEditorCreateFeaturesWorkflow();
  return new ModConstructor(properties);
}
async function importWidgetsEditorCreateFeaturesWorkflowData() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/CreateFeaturesWorkflowData");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/CreateFeaturesWorkflowData.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorCreateFeaturesWorkflowData(properties) {
  const ModConstructor = await importWidgetsEditorCreateFeaturesWorkflowData();
  return new ModConstructor(properties);
}
async function importWidgetsEditorEditorViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/EditorViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/EditorViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorEditorViewModel(properties) {
  const ModConstructor = await importWidgetsEditorEditorViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsEditorEdits() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/Edits");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/Edits.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorEdits(properties) {
  const ModConstructor = await importWidgetsEditorEdits();
  return new ModConstructor(properties);
}
async function importWidgetsEditorUpdateWorkflow() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/UpdateWorkflow");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/UpdateWorkflow.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorUpdateWorkflow(properties) {
  const ModConstructor = await importWidgetsEditorUpdateWorkflow();
  return new ModConstructor(properties);
}
async function importWidgetsEditorUpdateWorkflowData() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/UpdateWorkflowData");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/UpdateWorkflowData.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorUpdateWorkflowData(properties) {
  const ModConstructor = await importWidgetsEditorUpdateWorkflowData();
  return new ModConstructor(properties);
}
async function importWidgetsEditorWorkflow() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/Workflow");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/Workflow.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorWorkflow(properties) {
  const ModConstructor = await importWidgetsEditorWorkflow();
  return new ModConstructor(properties);
}
async function importWidgetsEditorSupportEditorItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor/support/EditorItem");
  }
  const module2 = await import("@arcgis/core/widgets/Editor/support/EditorItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsEditorSupportEditorItem(properties) {
  const ModConstructor = await importWidgetsEditorSupportEditorItem();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfile() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfile(properties) {
  const ModConstructor = await importWidgetsElevationProfile();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileLine() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileLine");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileLine.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileLine(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileLine();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileLineGround() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileLineGround");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileLineGround.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileLineGround(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileLineGround();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileLineInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileLineInput");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileLineInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileLineInput(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileLineInput();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileLineQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileLineQuery");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileLineQuery.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileLineQuery(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileLineQuery();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileLineView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileLineView");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileLineView.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileLineView(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileLineView();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfileElevationProfileViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile/ElevationProfileViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/ElevationProfile/ElevationProfileViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsElevationProfileElevationProfileViewModel(properties) {
  const ModConstructor = await importWidgetsElevationProfileElevationProfileViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsExpand() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Expand");
  }
  const module2 = await import("@arcgis/core/widgets/Expand.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsExpand(properties) {
  const ModConstructor = await importWidgetsExpand();
  return new ModConstructor(properties);
}
async function importWidgetsExpandExpandViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Expand/ExpandViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Expand/ExpandViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsExpandExpandViewModel(properties) {
  const ModConstructor = await importWidgetsExpandExpandViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeature() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Feature");
  }
  const module2 = await import("@arcgis/core/widgets/Feature.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeature(properties) {
  const ModConstructor = await importWidgetsFeature();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFeatureViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Feature/FeatureViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Feature/FeatureViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFeatureViewModel(properties) {
  const ModConstructor = await importWidgetsFeatureFeatureViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureForm() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureForm(properties) {
  const ModConstructor = await importWidgetsFeatureForm();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormFeatureFormViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/FeatureFormViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/FeatureFormViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormFeatureFormViewModel(properties) {
  const ModConstructor = await importWidgetsFeatureFormFeatureFormViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormFieldInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/FieldInput");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/FieldInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormFieldInput(properties) {
  const ModConstructor = await importWidgetsFeatureFormFieldInput();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormGroupInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/GroupInput");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/GroupInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormGroupInput(properties) {
  const ModConstructor = await importWidgetsFeatureFormGroupInput();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormRelationshipInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/RelationshipInput");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/RelationshipInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormRelationshipInput(properties) {
  const ModConstructor = await importWidgetsFeatureFormRelationshipInput();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormTextElementInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/TextElementInput");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/TextElementInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormTextElementInput(properties) {
  const ModConstructor = await importWidgetsFeatureFormTextElementInput();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureFormUtilityNetworkAssociationInput() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm/UtilityNetworkAssociationInput");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureForm/UtilityNetworkAssociationInput.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureFormUtilityNetworkAssociationInput(properties) {
  const ModConstructor = await importWidgetsFeatureFormUtilityNetworkAssociationInput();
  return new ModConstructor(properties);
}
async function importWidgetsFeatures() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Features");
  }
  const module2 = await import("@arcgis/core/widgets/Features.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatures(properties) {
  const ModConstructor = await importWidgetsFeatures();
  return new ModConstructor(properties);
}
async function importWidgetsFeaturesFeaturesViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Features/FeaturesViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Features/FeaturesViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeaturesFeaturesViewModel(properties) {
  const ModConstructor = await importWidgetsFeaturesFeaturesViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTable(properties) {
  const ModConstructor = await importWidgetsFeatureTable();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableAttachmentsColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/AttachmentsColumn");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/AttachmentsColumn.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableAttachmentsColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableAttachmentsColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableActionColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/ActionColumn");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/ActionColumn.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableActionColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableActionColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableFeatureTableViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/FeatureTableViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/FeatureTableViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableFeatureTableViewModel(properties) {
  const ModConstructor = await importWidgetsFeatureTableFeatureTableViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableFieldColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/FieldColumn");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/FieldColumn.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableFieldColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableFieldColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableRelationshipColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/RelationshipColumn");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/RelationshipColumn.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableRelationshipColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableRelationshipColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableGridColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/Grid/Column");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/Grid/Column.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableGridColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableGridColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableGridGroupColumn() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/Grid/GroupColumn");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/Grid/GroupColumn.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableGridGroupColumn(properties) {
  const ModConstructor = await importWidgetsFeatureTableGridGroupColumn();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableGridSupportButtonMenu() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/Grid/support/ButtonMenu");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenu.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableGridSupportButtonMenu(properties) {
  const ModConstructor = await importWidgetsFeatureTableGridSupportButtonMenu();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableGridSupportButtonMenuItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/Grid/support/ButtonMenuItem");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableGridSupportButtonMenuItem(properties) {
  const ModConstructor = await importWidgetsFeatureTableGridSupportButtonMenuItem();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableGridSupportButtonMenuViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/Grid/support/ButtonMenuViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableGridSupportButtonMenuViewModel(properties) {
  const ModConstructor = await importWidgetsFeatureTableGridSupportButtonMenuViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportColumnTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/ColumnTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/ColumnTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportColumnTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportColumnTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportColumnTemplateBase() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/ColumnTemplateBase");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/ColumnTemplateBase.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportColumnTemplateBase(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportColumnTemplateBase();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportFieldColumnTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/FieldColumnTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/FieldColumnTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportFieldColumnTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportFieldColumnTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportAttachmentsColumnTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/AttachmentsColumnTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/AttachmentsColumnTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportAttachmentsColumnTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportAttachmentsColumnTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportRelationshipColumnTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/RelationshipColumnTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/RelationshipColumnTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportRelationshipColumnTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportRelationshipColumnTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportGroupColumnTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/GroupColumnTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/GroupColumnTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportGroupColumnTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportGroupColumnTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTableSupportTableTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable/support/TableTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTable/support/TableTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTableSupportTableTemplate(properties) {
  const ModConstructor = await importWidgetsFeatureTableSupportTableTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTemplates() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTemplates");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTemplates.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTemplates(properties) {
  const ModConstructor = await importWidgetsFeatureTemplates();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTemplatesFeatureTemplatesViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTemplates/FeatureTemplatesViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTemplates/FeatureTemplatesViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTemplatesFeatureTemplatesViewModel(properties) {
  const ModConstructor = await importWidgetsFeatureTemplatesFeatureTemplatesViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTemplatesTemplateItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTemplates/TemplateItem");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTemplates/TemplateItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTemplatesTemplateItem(properties) {
  const ModConstructor = await importWidgetsFeatureTemplatesTemplateItem();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTemplatesTemplateItemGroup() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTemplates/TemplateItemGroup");
  }
  const module2 = await import("@arcgis/core/widgets/FeatureTemplates/TemplateItemGroup.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFeatureTemplatesTemplateItemGroup(properties) {
  const ModConstructor = await importWidgetsFeatureTemplatesTemplateItemGroup();
  return new ModConstructor(properties);
}
async function importWidgetsFloorFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FloorFilter");
  }
  const module2 = await import("@arcgis/core/widgets/FloorFilter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFloorFilter(properties) {
  const ModConstructor = await importWidgetsFloorFilter();
  return new ModConstructor(properties);
}
async function importWidgetsFloorFilterFloorFilterViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FloorFilter/FloorFilterViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/FloorFilter/FloorFilterViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFloorFilterFloorFilterViewModel(properties) {
  const ModConstructor = await importWidgetsFloorFilterFloorFilterViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsFullscreen() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Fullscreen");
  }
  const module2 = await import("@arcgis/core/widgets/Fullscreen.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFullscreen(properties) {
  const ModConstructor = await importWidgetsFullscreen();
  return new ModConstructor(properties);
}
async function importWidgetsFullscreenFullscreenViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Fullscreen/FullscreenViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Fullscreen/FullscreenViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsFullscreenFullscreenViewModel(properties) {
  const ModConstructor = await importWidgetsFullscreenFullscreenViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsHistogram() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Histogram");
  }
  const module2 = await import("@arcgis/core/widgets/Histogram.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHistogram(properties) {
  const ModConstructor = await importWidgetsHistogram();
  return new ModConstructor(properties);
}
async function importWidgetsHistogramHistogramViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Histogram/HistogramViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Histogram/HistogramViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHistogramHistogramViewModel(properties) {
  const ModConstructor = await importWidgetsHistogramHistogramViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsHistogramRangeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/HistogramRangeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/HistogramRangeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHistogramRangeSlider(properties) {
  const ModConstructor = await importWidgetsHistogramRangeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsHistogramRangeSliderHistogramRangeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/HistogramRangeSlider/HistogramRangeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/HistogramRangeSlider/HistogramRangeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHistogramRangeSliderHistogramRangeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsHistogramRangeSliderHistogramRangeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsHome() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Home");
  }
  const module2 = await import("@arcgis/core/widgets/Home.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHome(properties) {
  const ModConstructor = await importWidgetsHome();
  return new ModConstructor(properties);
}
async function importWidgetsHomeHomeViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Home/HomeViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Home/HomeViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsHomeHomeViewModel(properties) {
  const ModConstructor = await importWidgetsHomeHomeViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LayerList");
  }
  const module2 = await import("@arcgis/core/widgets/LayerList.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLayerList(properties) {
  const ModConstructor = await importWidgetsLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsLayerListLayerListViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LayerList/LayerListViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/LayerList/LayerListViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLayerListLayerListViewModel(properties) {
  const ModConstructor = await importWidgetsLayerListLayerListViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLayerListListItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LayerList/ListItem");
  }
  const module2 = await import("@arcgis/core/widgets/LayerList/ListItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLayerListListItem(properties) {
  const ModConstructor = await importWidgetsLayerListListItem();
  return new ModConstructor(properties);
}
async function importWidgetsLayerListListItemPanel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LayerList/ListItemPanel");
  }
  const module2 = await import("@arcgis/core/widgets/LayerList/ListItemPanel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLayerListListItemPanel(properties) {
  const ModConstructor = await importWidgetsLayerListListItemPanel();
  return new ModConstructor(properties);
}
async function importWidgetsLegend() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Legend");
  }
  const module2 = await import("@arcgis/core/widgets/Legend.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLegend(properties) {
  const ModConstructor = await importWidgetsLegend();
  return new ModConstructor(properties);
}
async function importWidgetsLegendLegendViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Legend/LegendViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Legend/LegendViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLegendLegendViewModel(properties) {
  const ModConstructor = await importWidgetsLegendLegendViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLegendSupportActiveLayerInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Legend/support/ActiveLayerInfo");
  }
  const module2 = await import("@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLegendSupportActiveLayerInfo(properties) {
  const ModConstructor = await importWidgetsLegendSupportActiveLayerInfo();
  return new ModConstructor(properties);
}
async function importWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LinkChartLayoutSwitcher/LinkChartLayoutSwitcherViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/LinkChartLayoutSwitcher/LinkChartLayoutSwitcherViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel(properties) {
  const ModConstructor = await importWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLineOfSight() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LineOfSight");
  }
  const module2 = await import("@arcgis/core/widgets/LineOfSight.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLineOfSight(properties) {
  const ModConstructor = await importWidgetsLineOfSight();
  return new ModConstructor(properties);
}
async function importWidgetsLineOfSightLineOfSightTarget() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LineOfSight/LineOfSightTarget");
  }
  const module2 = await import("@arcgis/core/widgets/LineOfSight/LineOfSightTarget.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLineOfSightLineOfSightTarget(properties) {
  const ModConstructor = await importWidgetsLineOfSightLineOfSightTarget();
  return new ModConstructor(properties);
}
async function importWidgetsLineOfSightLineOfSightViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LineOfSight/LineOfSightViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/LineOfSight/LineOfSightViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLineOfSightLineOfSightViewModel(properties) {
  const ModConstructor = await importWidgetsLineOfSightLineOfSightViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLocate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Locate");
  }
  const module2 = await import("@arcgis/core/widgets/Locate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLocate(properties) {
  const ModConstructor = await importWidgetsLocate();
  return new ModConstructor(properties);
}
async function importWidgetsLocateLocateViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Locate/LocateViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Locate/LocateViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsLocateLocateViewModel(properties) {
  const ModConstructor = await importWidgetsLocateLocateViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsMeasurement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Measurement");
  }
  const module2 = await import("@arcgis/core/widgets/Measurement.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsMeasurement(properties) {
  const ModConstructor = await importWidgetsMeasurement();
  return new ModConstructor(properties);
}
async function importWidgetsMeasurementMeasurementViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Measurement/MeasurementViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Measurement/MeasurementViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsMeasurementMeasurementViewModel(properties) {
  const ModConstructor = await importWidgetsMeasurementMeasurementViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsNavigationToggle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/NavigationToggle");
  }
  const module2 = await import("@arcgis/core/widgets/NavigationToggle.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsNavigationToggle(properties) {
  const ModConstructor = await importWidgetsNavigationToggle();
  return new ModConstructor(properties);
}
async function importWidgetsNavigationToggleNavigationToggleViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/NavigationToggle/NavigationToggleViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsNavigationToggleNavigationToggleViewModel(properties) {
  const ModConstructor = await importWidgetsNavigationToggleNavigationToggleViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsOrientedImageryViewer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/OrientedImageryViewer");
  }
  const module2 = await import("@arcgis/core/widgets/OrientedImageryViewer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsOrientedImageryViewer(properties) {
  const ModConstructor = await importWidgetsOrientedImageryViewer();
  return new ModConstructor(properties);
}
async function importWidgetsOrientedImageryViewerOrientedImageryViewerViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/OrientedImageryViewer/OrientedImageryViewerViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/OrientedImageryViewer/OrientedImageryViewerViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsOrientedImageryViewerOrientedImageryViewerViewModel(properties) {
  const ModConstructor = await importWidgetsOrientedImageryViewerOrientedImageryViewerViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsPopup() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Popup");
  }
  const module2 = await import("@arcgis/core/widgets/Popup.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPopup(properties) {
  const ModConstructor = await importWidgetsPopup();
  return new ModConstructor(properties);
}
async function importWidgetsPopupPopupViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Popup/PopupViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Popup/PopupViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPopupPopupViewModel(properties) {
  const ModConstructor = await importWidgetsPopupPopupViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsPrint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Print");
  }
  const module2 = await import("@arcgis/core/widgets/Print.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPrint(properties) {
  const ModConstructor = await importWidgetsPrint();
  return new ModConstructor(properties);
}
async function importWidgetsPrintCustomTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Print/CustomTemplate");
  }
  const module2 = await import("@arcgis/core/widgets/Print/CustomTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPrintCustomTemplate(properties) {
  const ModConstructor = await importWidgetsPrintCustomTemplate();
  return new ModConstructor(properties);
}
async function importWidgetsPrintPrintViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Print/PrintViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Print/PrintViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPrintPrintViewModel(properties) {
  const ModConstructor = await importWidgetsPrintPrintViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsPrintTemplateOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Print/TemplateOptions");
  }
  const module2 = await import("@arcgis/core/widgets/Print/TemplateOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsPrintTemplateOptions(properties) {
  const ModConstructor = await importWidgetsPrintTemplateOptions();
  return new ModConstructor(properties);
}
async function importWidgetsScaleBar() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleBar");
  }
  const module2 = await import("@arcgis/core/widgets/ScaleBar.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsScaleBar(properties) {
  const ModConstructor = await importWidgetsScaleBar();
  return new ModConstructor(properties);
}
async function importWidgetsScaleBarScaleBarViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleBar/ScaleBarViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/ScaleBar/ScaleBarViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsScaleBarScaleBarViewModel(properties) {
  const ModConstructor = await importWidgetsScaleBarScaleBarViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsScaleRangeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleRangeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/ScaleRangeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsScaleRangeSlider(properties) {
  const ModConstructor = await importWidgetsScaleRangeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsScaleRangeSliderScaleRanges() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleRangeSlider/ScaleRanges");
  }
  const module2 = await import("@arcgis/core/widgets/ScaleRangeSlider/ScaleRanges.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsScaleRangeSliderScaleRanges(properties) {
  const ModConstructor = await importWidgetsScaleRangeSliderScaleRanges();
  return new ModConstructor(properties);
}
async function importWidgetsScaleRangeSliderScaleRangeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleRangeSlider/ScaleRangeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/ScaleRangeSlider/ScaleRangeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsScaleRangeSliderScaleRangeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsScaleRangeSliderScaleRangeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSearch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search");
  }
  const module2 = await import("@arcgis/core/widgets/Search.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearch(properties) {
  const ModConstructor = await importWidgetsSearch();
  return new ModConstructor(properties);
}
async function importWidgetsSearchLayerSearchSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search/LayerSearchSource");
  }
  const module2 = await import("@arcgis/core/widgets/Search/LayerSearchSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearchLayerSearchSource(properties) {
  const ModConstructor = await importWidgetsSearchLayerSearchSource();
  return new ModConstructor(properties);
}
async function importWidgetsSearchLocatorSearchSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search/LocatorSearchSource");
  }
  const module2 = await import("@arcgis/core/widgets/Search/LocatorSearchSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearchLocatorSearchSource(properties) {
  const ModConstructor = await importWidgetsSearchLocatorSearchSource();
  return new ModConstructor(properties);
}
async function importWidgetsSearchSearchResultRenderer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search/SearchResultRenderer");
  }
  const module2 = await import("@arcgis/core/widgets/Search/SearchResultRenderer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearchSearchResultRenderer(properties) {
  const ModConstructor = await importWidgetsSearchSearchResultRenderer();
  return new ModConstructor(properties);
}
async function importWidgetsSearchSearchSource() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search/SearchSource");
  }
  const module2 = await import("@arcgis/core/widgets/Search/SearchSource.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearchSearchSource(properties) {
  const ModConstructor = await importWidgetsSearchSearchSource();
  return new ModConstructor(properties);
}
async function importWidgetsSearchSearchViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search/SearchViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Search/SearchViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSearchSearchViewModel(properties) {
  const ModConstructor = await importWidgetsSearchSearchViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsShadowCast() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ShadowCast");
  }
  const module2 = await import("@arcgis/core/widgets/ShadowCast.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsShadowCast(properties) {
  const ModConstructor = await importWidgetsShadowCast();
  return new ModConstructor(properties);
}
async function importWidgetsShadowCastShadowCastViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ShadowCast/ShadowCastViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/ShadowCast/ShadowCastViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsShadowCastShadowCastViewModel(properties) {
  const ModConstructor = await importWidgetsShadowCastShadowCastViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSketch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Sketch");
  }
  const module2 = await import("@arcgis/core/widgets/Sketch.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSketch(properties) {
  const ModConstructor = await importWidgetsSketch();
  return new ModConstructor(properties);
}
async function importWidgetsSketchSketchViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Sketch/SketchViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Sketch/SketchViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSketchSketchViewModel(properties) {
  const ModConstructor = await importWidgetsSketchSketchViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSlice() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slice");
  }
  const module2 = await import("@arcgis/core/widgets/Slice.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSlice(properties) {
  const ModConstructor = await importWidgetsSlice();
  return new ModConstructor(properties);
}
async function importWidgetsSliceSliceViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slice/SliceViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Slice/SliceViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSliceSliceViewModel(properties) {
  const ModConstructor = await importWidgetsSliceSliceViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slider");
  }
  const module2 = await import("@arcgis/core/widgets/Slider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSlider(properties) {
  const ModConstructor = await importWidgetsSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSliderSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slider/SliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Slider/SliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSliderSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSliderSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingBinaryColorSizeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/BinaryColorSizeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/BinaryColorSizeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingBinaryColorSizeSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingBinaryColorSizeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/BinaryColorSizeSlider/BinaryColorSizeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/BinaryColorSizeSlider/BinaryColorSizeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingClassedColorSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ClassedColorSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ClassedColorSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingClassedColorSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingClassedColorSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ClassedColorSlider/ClassedColorSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ClassedColorSlider/ClassedColorSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingClassedSizeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ClassedSizeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ClassedSizeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingClassedSizeSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingClassedSizeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ClassedSizeSlider/ClassedSizeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ClassedSizeSlider/ClassedSizeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingColorSizeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ColorSizeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ColorSizeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingColorSizeSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingColorSizeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ColorSizeSlider/ColorSizeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ColorSizeSlider/ColorSizeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingColorSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ColorSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ColorSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingColorSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingColorSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingColorSliderColorSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/ColorSlider/ColorSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/ColorSlider/ColorSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingColorSliderColorSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingColorSliderColorSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingHeatmapSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/HeatmapSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/HeatmapSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingHeatmapSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingHeatmapSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/HeatmapSlider/HeatmapSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/HeatmapSlider/HeatmapSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingOpacitySlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/OpacitySlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/OpacitySlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingOpacitySlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingOpacitySlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingOpacitySliderOpacitySliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/OpacitySlider/OpacitySliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/OpacitySlider/OpacitySliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingOpacitySliderOpacitySliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingOpacitySliderOpacitySliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingSizeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/SizeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/SizeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingSizeSlider(properties) {
  const ModConstructor = await importWidgetsSmartMappingSizeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingSizeSliderSizeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/SizeSlider/SizeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/SizeSlider/SizeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingSizeSliderSizeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingSizeSliderSizeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/SmartMappingPrimaryHandleSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/SmartMappingPrimaryHandleSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingSmartMappingSliderBase() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/SmartMappingSliderBase");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/SmartMappingSliderBase.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingSmartMappingSliderBase(properties) {
  const ModConstructor = await importWidgetsSmartMappingSmartMappingSliderBase();
  return new ModConstructor(properties);
}
async function importWidgetsSmartMappingSmartMappingSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/SmartMappingSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/SmartMappingSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSmartMappingSmartMappingSliderViewModel(properties) {
  const ModConstructor = await importWidgetsSmartMappingSmartMappingSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSupportSnappingControls() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/support/SnappingControls");
  }
  const module2 = await import("@arcgis/core/widgets/support/SnappingControls.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSupportSnappingControls(properties) {
  const ModConstructor = await importWidgetsSupportSnappingControls();
  return new ModConstructor(properties);
}
async function importWidgetsSupportGridControls() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/support/GridControls");
  }
  const module2 = await import("@arcgis/core/widgets/support/GridControls.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSupportGridControls(properties) {
  const ModConstructor = await importWidgetsSupportGridControls();
  return new ModConstructor(properties);
}
async function importWidgetsSupportSnappingControlsSnappingControlsViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/support/SnappingControls/SnappingControlsViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/support/SnappingControls/SnappingControlsViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSupportSnappingControlsSnappingControlsViewModel(properties) {
  const ModConstructor = await importWidgetsSupportSnappingControlsSnappingControlsViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSupportGridControlsGridControlsViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/support/GridControls/GridControlsViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/support/GridControls/GridControlsViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSupportGridControlsGridControlsViewModel(properties) {
  const ModConstructor = await importWidgetsSupportGridControlsGridControlsViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsSwipe() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Swipe");
  }
  const module2 = await import("@arcgis/core/widgets/Swipe.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSwipe(properties) {
  const ModConstructor = await importWidgetsSwipe();
  return new ModConstructor(properties);
}
async function importWidgetsSwipeSwipeViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Swipe/SwipeViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Swipe/SwipeViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsSwipeSwipeViewModel(properties) {
  const ModConstructor = await importWidgetsSwipeSwipeViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsTableList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TableList");
  }
  const module2 = await import("@arcgis/core/widgets/TableList.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTableList(properties) {
  const ModConstructor = await importWidgetsTableList();
  return new ModConstructor(properties);
}
async function importWidgetsTableListListItem() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TableList/ListItem");
  }
  const module2 = await import("@arcgis/core/widgets/TableList/ListItem.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTableListListItem() {
  const ModConstructor = await importWidgetsTableListListItem();
  return new ModConstructor();
}
async function importWidgetsTableListListItemPanel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TableList/ListItemPanel");
  }
  const module2 = await import("@arcgis/core/widgets/TableList/ListItemPanel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTableListListItemPanel(properties) {
  const ModConstructor = await importWidgetsTableListListItemPanel();
  return new ModConstructor(properties);
}
async function importWidgetsTableListTableListViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TableList/TableListViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/TableList/TableListViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTableListTableListViewModel(properties) {
  const ModConstructor = await importWidgetsTableListTableListViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsTimeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TimeSlider");
  }
  const module2 = await import("@arcgis/core/widgets/TimeSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTimeSlider(properties) {
  const ModConstructor = await importWidgetsTimeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsTimeSliderTimeSliderViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TimeSlider/TimeSliderViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/TimeSlider/TimeSliderViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTimeSliderTimeSliderViewModel(properties) {
  const ModConstructor = await importWidgetsTimeSliderTimeSliderViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsTimeZoneLabel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TimeZoneLabel");
  }
  const module2 = await import("@arcgis/core/widgets/TimeZoneLabel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTimeZoneLabel(properties) {
  const ModConstructor = await importWidgetsTimeZoneLabel();
  return new ModConstructor(properties);
}
async function importWidgetsTrack() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Track");
  }
  const module2 = await import("@arcgis/core/widgets/Track.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTrack(properties) {
  const ModConstructor = await importWidgetsTrack();
  return new ModConstructor(properties);
}
async function importWidgetsTrackTrackViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Track/TrackViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Track/TrackViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsTrackTrackViewModel(properties) {
  const ModConstructor = await importWidgetsTrackTrackViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkAssociations() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkAssociations");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkAssociations.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkAssociations(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkAssociations();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkAssociations/UtilityNetworkAssociationsViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkAssociations/UtilityNetworkAssociationsViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkTrace() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkTrace");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkTrace.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkTrace(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkTrace();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkTraceAnalysis/UtilityNetworkTraceAnalysisViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkTraceAnalysis/UtilityNetworkTraceAnalysisViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkTrace/UtilityNetworkTraceViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkTrace/UtilityNetworkTraceViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkValidateTopology() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkValidateTopology");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkValidateTopology.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkValidateTopology(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkValidateTopology();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkValidateTopology/UtilityNetworkValidateTopologyViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/UtilityNetworkValidateTopology/UtilityNetworkValidateTopologyViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsValuePicker() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker");
  }
  const module2 = await import("@arcgis/core/widgets/ValuePicker.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsValuePicker(properties) {
  const ModConstructor = await importWidgetsValuePicker();
  return new ModConstructor(properties);
}
async function importWidgetsValuePickerValuePickerCollection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker/ValuePickerCollection");
  }
  const module2 = await import("@arcgis/core/widgets/ValuePicker/ValuePickerCollection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsValuePickerValuePickerCollection(properties) {
  const ModConstructor = await importWidgetsValuePickerValuePickerCollection();
  return new ModConstructor(properties);
}
async function importWidgetsValuePickerValuePickerCombobox() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker/ValuePickerCombobox");
  }
  const module2 = await import("@arcgis/core/widgets/ValuePicker/ValuePickerCombobox.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsValuePickerValuePickerCombobox(properties) {
  const ModConstructor = await importWidgetsValuePickerValuePickerCombobox();
  return new ModConstructor(properties);
}
async function importWidgetsValuePickerValuePickerLabel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker/ValuePickerLabel");
  }
  const module2 = await import("@arcgis/core/widgets/ValuePicker/ValuePickerLabel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsValuePickerValuePickerLabel(properties) {
  const ModConstructor = await importWidgetsValuePickerValuePickerLabel();
  return new ModConstructor(properties);
}
async function importWidgetsValuePickerValuePickerSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker/ValuePickerSlider");
  }
  const module2 = await import("@arcgis/core/widgets/ValuePicker/ValuePickerSlider.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsValuePickerValuePickerSlider(properties) {
  const ModConstructor = await importWidgetsValuePickerValuePickerSlider();
  return new ModConstructor(properties);
}
async function importWidgetsVersionManagementVersionManagementViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/VersionManagement/VersionManagementViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/VersionManagement/VersionManagementViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsVersionManagementVersionManagementViewModel(properties) {
  const ModConstructor = await importWidgetsVersionManagementVersionManagementViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsVideoPlayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/VideoPlayer");
  }
  const module2 = await import("@arcgis/core/widgets/VideoPlayer.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsVideoPlayer(properties) {
  const ModConstructor = await importWidgetsVideoPlayer();
  return new ModConstructor(properties);
}
async function importWidgetsVideoPlayerVideoPlayerViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/VideoPlayer/VideoPlayerViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/VideoPlayer/VideoPlayerViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsVideoPlayerVideoPlayerViewModel(properties) {
  const ModConstructor = await importWidgetsVideoPlayerVideoPlayerViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Weather");
  }
  const module2 = await import("@arcgis/core/widgets/Weather.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsWeather(properties) {
  const ModConstructor = await importWidgetsWeather();
  return new ModConstructor(properties);
}
async function importWidgetsWeatherWeatherViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Weather/WeatherViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Weather/WeatherViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsWeatherWeatherViewModel(properties) {
  const ModConstructor = await importWidgetsWeatherWeatherViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsWidget() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Widget");
  }
  const module2 = await import("@arcgis/core/widgets/Widget.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsWidget(properties) {
  const ModConstructor = await importWidgetsWidget();
  return new ModConstructor(properties);
}
async function importWidgetsZoom() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Zoom");
  }
  const module2 = await import("@arcgis/core/widgets/Zoom.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsZoom(properties) {
  const ModConstructor = await importWidgetsZoom();
  return new ModConstructor(properties);
}
async function importWidgetsZoomZoomViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Zoom/ZoomViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/Zoom/ZoomViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function newWidgetsZoomZoomViewModel(properties) {
  const ModConstructor = await importWidgetsZoomZoomViewModel();
  return new ModConstructor(properties);
}
async function importArcade() {
  if (isAMD) {
    return await window.$arcgis.import("esri/arcade");
  }
  const module2 = await import("@arcgis/core/arcade.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importConfig() {
  if (isAMD) {
    return await window.$arcgis.import("esri/config");
  }
  const module2 = await import("@arcgis/core/config.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreAccessorSupportDecorators() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/accessorSupport/decorators");
  }
  const module2 = await import("@arcgis/core/core/accessorSupport/decorators.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreLang() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/lang");
  }
  const module2 = await import("@arcgis/core/core/lang.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCorePromiseUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/promiseUtils");
  }
  const module2 = await import("@arcgis/core/core/promiseUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreReactiveUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/reactiveUtils");
  }
  const module2 = await import("@arcgis/core/core/reactiveUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreScheduling() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/scheduling");
  }
  const module2 = await import("@arcgis/core/core/scheduling.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreSql() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/sql");
  }
  const module2 = await import("@arcgis/core/core/sql.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreSqlWhereClause() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/sql/WhereClause");
  }
  const module2 = await import("@arcgis/core/core/sql/WhereClause.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreUrlUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/urlUtils");
  }
  const module2 = await import("@arcgis/core/core/urlUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importCoreWorkers() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/workers");
  }
  const module2 = await import("@arcgis/core/core/workers.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importEditingSharedTemplatesSharedTemplate() {
  if (isAMD) {
    return await window.$arcgis.import("esri/editing/sharedTemplates/SharedTemplate");
  }
  const module2 = await import("@arcgis/core/editing/sharedTemplates/SharedTemplate.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importEditingSharedTemplatesSharedTemplateMetadata() {
  if (isAMD) {
    return await window.$arcgis.import("esri/editing/sharedTemplates/SharedTemplateMetadata");
  }
  const module2 = await import("@arcgis/core/editing/sharedTemplates/SharedTemplateMetadata.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importFormElementsInputs() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements/inputs");
  }
  const module2 = await import("@arcgis/core/form/elements/inputs.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importFormElements() {
  if (isAMD) {
    return await window.$arcgis.import("esri/form/elements");
  }
  const module2 = await import("@arcgis/core/form/elements.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometry() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry");
  }
  const module2 = await import("@arcgis/core/geometry.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryCoordinateFormatter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/coordinateFormatter");
  }
  const module2 = await import("@arcgis/core/geometry/coordinateFormatter.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryGeometryEngine() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/geometryEngine");
  }
  const module2 = await import("@arcgis/core/geometry/geometryEngine.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryGeometryEngineAsync() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/geometryEngineAsync");
  }
  const module2 = await import("@arcgis/core/geometry/geometryEngineAsync.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryProjection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/projection");
  }
  const module2 = await import("@arcgis/core/geometry/projection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsAffineTransformOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/affineTransformOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/affineTransformOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsAlphaShapeOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/alphaShapeOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/alphaShapeOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsAreaOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/areaOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/areaOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsAutoCompleteOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/autoCompleteOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/autoCompleteOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsBoundaryOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/boundaryOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/boundaryOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsBufferOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/bufferOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/bufferOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsCentroidOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/centroidOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/centroidOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsClipOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/clipOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/clipOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsContainsOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/containsOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/containsOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsConvexHullOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/convexHullOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/convexHullOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsCrossesOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/crossesOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/crossesOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsCutOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/cutOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/cutOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsDensifyOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/densifyOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/densifyOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsDifferenceOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/differenceOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/differenceOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsDisjointOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/disjointOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/disjointOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsDistanceOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/distanceOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/distanceOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsEqualsOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/equalsOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/equalsOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsExtendOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/extendOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/extendOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeneralizeOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/generalizeOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/generalizeOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodesicBufferOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodesicBufferOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodesicBufferOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodesicProximityOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodesicProximityOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodesicProximityOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodeticAreaOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodeticAreaOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodeticAreaOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodeticDensifyOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodeticDensifyOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodeticDensifyOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodeticDistanceOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodeticDistanceOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodeticDistanceOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGeodeticLengthOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/geodeticLengthOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/geodeticLengthOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsGraphicBufferOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/graphicBufferOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/graphicBufferOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsIntegrateOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/integrateOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/integrateOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsIntersectionOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/intersectionOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/intersectionOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsIntersectsOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/intersectsOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/intersectsOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsIsNearOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/isNearOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/isNearOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsLabelPointOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/labelPointOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/labelPointOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsLengthOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/lengthOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/lengthOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsLinesToPolygonsOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/linesToPolygonsOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/linesToPolygonsOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsLocateBetweenOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/locateBetweenOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/locateBetweenOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsMinimumBoundingCircleOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/minimumBoundingCircleOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/minimumBoundingCircleOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsMultiPartToSinglePartOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/multiPartToSinglePartOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/multiPartToSinglePartOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsOffsetOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/offsetOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/offsetOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsOverlapsOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/overlapsOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/overlapsOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsPolygonOverlayOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/polygonOverlayOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/polygonOverlayOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsPolygonSlicerOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/polygonSlicerOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/polygonSlicerOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsProjectOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/projectOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/projectOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsProximityOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/proximityOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/proximityOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsRelateOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/relateOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/relateOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsReshapeOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/reshapeOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/reshapeOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsShapePreservingProjectOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/shapePreservingProjectOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/shapePreservingProjectOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsSimplifyOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/simplifyOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/simplifyOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsSymmetricDifferenceOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/symmetricDifferenceOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/symmetricDifferenceOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsTouchesOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/touchesOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/touchesOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsUnionOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/unionOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/unionOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsWithinOperator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/withinOperator");
  }
  const module2 = await import("@arcgis/core/geometry/operators/withinOperator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometryOperatorsSupportGeographicTransformationUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/operators/support/geographicTransformationUtils");
  }
  const module2 = await import("@arcgis/core/geometry/operators/support/geographicTransformationUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometrySupportGeodesicUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/geodesicUtils");
  }
  const module2 = await import("@arcgis/core/geometry/support/geodesicUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometrySupportJsonUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/jsonUtils");
  }
  const module2 = await import("@arcgis/core/geometry/support/jsonUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometrySupportMeshUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/meshUtils");
  }
  const module2 = await import("@arcgis/core/geometry/support/meshUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometrySupportNormalizeUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/normalizeUtils");
  }
  const module2 = await import("@arcgis/core/geometry/support/normalizeUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importGeometrySupportWebMercatorUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/geometry/support/webMercatorUtils");
  }
  const module2 = await import("@arcgis/core/geometry/support/webMercatorUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importIntl() {
  if (isAMD) {
    return await window.$arcgis.import("esri/intl");
  }
  const module2 = await import("@arcgis/core/intl.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importKernel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/kernel");
  }
  const module2 = await import("@arcgis/core/kernel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersCatalogCatalogUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/catalog/catalogUtils");
  }
  const module2 = await import("@arcgis/core/layers/catalog/catalogUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersKnowledgeGraphSupportUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/knowledgeGraph/supportUtils");
  }
  const module2 = await import("@arcgis/core/layers/knowledgeGraph/supportUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersOgcWfsUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ogc/wfsUtils");
  }
  const module2 = await import("@arcgis/core/layers/ogc/wfsUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersOgcWcsUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/ogc/wcsUtils");
  }
  const module2 = await import("@arcgis/core/layers/ogc/wcsUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersOrientedImageryTransformationsWorldToImage() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/orientedImagery/transformations/worldToImage");
  }
  const module2 = await import("@arcgis/core/layers/orientedImagery/transformations/worldToImage.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersOrientedImageryTransformationsImageToWorld() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/orientedImagery/transformations/imageToWorld");
  }
  const module2 = await import("@arcgis/core/layers/orientedImagery/transformations/imageToWorld.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportArcadeUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/arcadeUtils");
  }
  const module2 = await import("@arcgis/core/layers/support/arcadeUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportCsvUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/csvUtils");
  }
  const module2 = await import("@arcgis/core/layers/support/csvUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportFieldUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/fieldUtils");
  }
  const module2 = await import("@arcgis/core/layers/support/fieldUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportRasterFunctionConstants() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/rasterFunctionConstants");
  }
  const module2 = await import("@arcgis/core/layers/support/rasterFunctionConstants.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportRasterFunctionUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/rasterFunctionUtils");
  }
  const module2 = await import("@arcgis/core/layers/support/rasterFunctionUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersSupportStreamConnection() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/StreamConnection");
  }
  const module2 = await import("@arcgis/core/layers/support/StreamConnection.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersVoxelVoxelVariable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelVariable");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelVariable.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importLayersVoxelVoxelVolume() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/voxel/VoxelVolume");
  }
  const module2 = await import("@arcgis/core/layers/voxel/VoxelVolume.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importPointCloudRenderers() {
  if (isAMD) {
    return await window.$arcgis.import("esri/pointCloudRenderers");
  }
  const module2 = await import("@arcgis/core/pointCloudRenderers.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importPopupContent() {
  if (isAMD) {
    return await window.$arcgis.import("esri/popup/content");
  }
  const module2 = await import("@arcgis/core/popup/content.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRasterRenderers() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rasterRenderers");
  }
  const module2 = await import("@arcgis/core/rasterRenderers.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRenderers() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers");
  }
  const module2 = await import("@arcgis/core/renderers.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRenderersSupportJsonUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/jsonUtils");
  }
  const module2 = await import("@arcgis/core/renderers/support/jsonUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRenderersSupportUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/utils");
  }
  const module2 = await import("@arcgis/core/renderers/support/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRequest() {
  if (isAMD) {
    return await window.$arcgis.import("esri/request");
  }
  const module2 = await import("@arcgis/core/request.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestClosestFacility() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/closestFacility");
  }
  const module2 = await import("@arcgis/core/rest/closestFacility.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestFeatureServiceUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/featureService/utils");
  }
  const module2 = await import("@arcgis/core/rest/featureService/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestFind() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/find");
  }
  const module2 = await import("@arcgis/core/rest/find.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestGeometryService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/geometryService");
  }
  const module2 = await import("@arcgis/core/rest/geometryService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestGeoprocessor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/geoprocessor");
  }
  const module2 = await import("@arcgis/core/rest/geoprocessor.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestGeoprocessorGPOptions() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/geoprocessor/GPOptions");
  }
  const module2 = await import("@arcgis/core/rest/geoprocessor/GPOptions.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestIdentify() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/identify");
  }
  const module2 = await import("@arcgis/core/rest/identify.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestImageService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/imageService");
  }
  const module2 = await import("@arcgis/core/rest/imageService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestKnowledgeGraphService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/knowledgeGraphService");
  }
  const module2 = await import("@arcgis/core/rest/knowledgeGraphService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestLocator() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/locator");
  }
  const module2 = await import("@arcgis/core/rest/locator.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestNetworksQueryAssociations() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/queryAssociations");
  }
  const module2 = await import("@arcgis/core/rest/networks/queryAssociations.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestNetworksSupportValidateNetworkTopologyResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/support/ValidateNetworkTopologyResult");
  }
  const module2 = await import("@arcgis/core/rest/networks/support/ValidateNetworkTopologyResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestNetworksSynthesizeAssociationGeometries() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/synthesizeAssociationGeometries");
  }
  const module2 = await import("@arcgis/core/rest/networks/synthesizeAssociationGeometries.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestNetworksTrace() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networks/trace");
  }
  const module2 = await import("@arcgis/core/rest/networks/trace.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestNetworkService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/networkService");
  }
  const module2 = await import("@arcgis/core/rest/networkService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestPlaces() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/places");
  }
  const module2 = await import("@arcgis/core/rest/places.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestPrint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/print");
  }
  const module2 = await import("@arcgis/core/rest/print.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestQuery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/query");
  }
  const module2 = await import("@arcgis/core/rest/query.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestRoute() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/route");
  }
  const module2 = await import("@arcgis/core/rest/route.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestServiceArea() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/serviceArea");
  }
  const module2 = await import("@arcgis/core/rest/serviceArea.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importRestSymbolService() {
  if (isAMD) {
    return await window.$arcgis.import("esri/rest/symbolService");
  }
  const module2 = await import("@arcgis/core/rest/symbolService.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingHeuristicsBinLevel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/heuristics/binLevel");
  }
  const module2 = await import("@arcgis/core/smartMapping/heuristics/binLevel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingHeuristicsScaleRange() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/heuristics/scaleRange");
  }
  const module2 = await import("@arcgis/core/smartMapping/heuristics/scaleRange.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingHeuristicsSizeRange() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/heuristics/sizeRange");
  }
  const module2 = await import("@arcgis/core/smartMapping/heuristics/sizeRange.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingLabelsBins() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/labels/bins");
  }
  const module2 = await import("@arcgis/core/smartMapping/labels/bins.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingLabelsClusters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/labels/clusters");
  }
  const module2 = await import("@arcgis/core/smartMapping/labels/clusters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingPopupClusters() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/popup/clusters");
  }
  const module2 = await import("@arcgis/core/smartMapping/popup/clusters.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingPopupTemplates() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/popup/templates");
  }
  const module2 = await import("@arcgis/core/smartMapping/popup/templates.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersClassBreaks() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/classBreaks");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/classBreaks.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersColormap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/colormap");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/colormap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersFlow() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/flow");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/flow.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersRgb() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/rgb");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/rgb.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersShadedRelief() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/shadedRelief");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/shadedRelief.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersStretch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/stretch");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/stretch.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersUniqueValue() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/uniqueValue");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/uniqueValue.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterRenderersVectorField() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/renderers/vectorField");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/renderers/vectorField.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterSupportColorRamps() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/support/colorRamps");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/support/colorRamps.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRasterSupportUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/raster/support/utils");
  }
  const module2 = await import("@arcgis/core/smartMapping/raster/support/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersColor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/color");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/color.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersDotDensity() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/dotDensity");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/dotDensity.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersHeatmap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/heatmap");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/heatmap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersLocation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/location");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/location.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersOpacity() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/opacity");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/opacity.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersPieChart() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/pieChart");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/pieChart.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersPredominance() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/predominance");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/predominance.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersRelationship() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/relationship");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/relationship.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersSize() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/size");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/size.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/type");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/type.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersUnivariateColorSize() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/univariateColorSize");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/univariateColorSize.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingRenderersSupportRendererUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/renderers/support/rendererUtils");
  }
  const module2 = await import("@arcgis/core/smartMapping/renderers/support/rendererUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsClassBreaks() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/classBreaks");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/classBreaks.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsHeatmapStatistics() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/heatmapStatistics");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/heatmapStatistics.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsHistogram() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/histogram");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/histogram.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsPredominantCategories() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/predominantCategories");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/predominantCategories.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsSummaryStatistics() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/summaryStatistics");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/summaryStatistics.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsSummaryStatisticsForAge() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/summaryStatisticsForAge");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/summaryStatisticsForAge.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsSupportAgeUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/support/ageUtils");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/support/ageUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsSupportPredominanceUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/support/predominanceUtils");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/support/predominanceUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingStatisticsUniqueValues() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/uniqueValues");
  }
  const module2 = await import("@arcgis/core/smartMapping/statistics/uniqueValues.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyColor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/color");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/color.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyDotDensity() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/dotDensity");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/dotDensity.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyFlow() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/flow");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/flow.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyHeatmap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/heatmap");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/heatmap.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyLocation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/location");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/location.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyPieChart() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/pieChart");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/pieChart.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyPredominance() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/predominance");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/predominance.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyRelationship() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/relationship");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/relationship.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologySize() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/size");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/size.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologySupportColorRamps() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/support/colorRamps");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/support/colorRamps.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSmartMappingSymbologyType() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/symbology/type");
  }
  const module2 = await import("@arcgis/core/smartMapping/symbology/type.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSupportPopupUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/popupUtils");
  }
  const module2 = await import("@arcgis/core/support/popupUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSupportTimeUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/support/timeUtils");
  }
  const module2 = await import("@arcgis/core/support/timeUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSymbols() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols");
  }
  const module2 = await import("@arcgis/core/symbols.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSymbolsSupportCimConversionUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/cimConversionUtils");
  }
  const module2 = await import("@arcgis/core/symbols/support/cimConversionUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSymbolsSupportCimSymbolUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/cimSymbolUtils");
  }
  const module2 = await import("@arcgis/core/symbols/support/cimSymbolUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSymbolsSupportJsonUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/jsonUtils");
  }
  const module2 = await import("@arcgis/core/symbols/support/jsonUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importSymbolsSupportSymbolUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/symbolUtils");
  }
  const module2 = await import("@arcgis/core/symbols/support/symbolUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importTablesElements() {
  if (isAMD) {
    return await window.$arcgis.import("esri/tables/elements");
  }
  const module2 = await import("@arcgis/core/tables/elements.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importVersionManagementUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/versionManagement/utils");
  }
  const module2 = await import("@arcgis/core/versionManagement/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importVersionManagementVersionAdaptersUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/versionManagement/versionAdapters/utils");
  }
  const module2 = await import("@arcgis/core/versionManagement/versionAdapters/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViews3dWebglManagedFBO() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/webgl/ManagedFBO");
  }
  const module2 = await import("@arcgis/core/views/3d/webgl/ManagedFBO.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViews3dWebglRenderCamera() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/webgl/RenderCamera");
  }
  const module2 = await import("@arcgis/core/views/3d/webgl/RenderCamera.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViews3dWebgl() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/webgl");
  }
  const module2 = await import("@arcgis/core/views/3d/webgl.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViews3dSupportLayerPerformanceInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/support/LayerPerformanceInfo");
  }
  const module2 = await import("@arcgis/core/views/3d/support/LayerPerformanceInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViews3dSupportSceneViewPerformanceInfo() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/3d/support/SceneViewPerformanceInfo");
  }
  const module2 = await import("@arcgis/core/views/3d/support/SceneViewPerformanceInfo.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViewsAnalysisLengthDimensionResult() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/analysis/LengthDimensionResult");
  }
  const module2 = await import("@arcgis/core/views/analysis/LengthDimensionResult.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importViewsSupportColorUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/support/colorUtils");
  }
  const module2 = await import("@arcgis/core/views/support/colorUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importWebsceneSupportSlideElements() {
  if (isAMD) {
    return await window.$arcgis.import("esri/webscene/support/SlideElements");
  }
  const module2 = await import("@arcgis/core/webscene/support/SlideElements.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importWidgetsBatchAttributeFormBatchAttributeFormViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BatchAttributeForm/BatchAttributeFormViewModel");
  }
  const module2 = await import("@arcgis/core/widgets/BatchAttributeForm/BatchAttributeFormViewModel.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importWidgetsSmartMappingSupportUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/smartMapping/support/utils");
  }
  const module2 = await import("@arcgis/core/widgets/smartMapping/support/utils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importWidgetsSupportWidget() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/support/widget");
  }
  const module2 = await import("@arcgis/core/widgets/support/widget.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsBasemapUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/basemapUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/basemapUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsDrawUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/drawUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/drawUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsFontUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/fontUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/fontUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsGetDefaultUnits() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/getDefaultUnits");
  }
  const module2 = await import("@arcgis/core/applications/Components/getDefaultUnits.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsGfxUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/gfxUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/gfxUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsLayerOriginUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/layerOriginUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/layerOriginUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsLayersEffectsJsonUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/layersEffectsJsonUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/layersEffectsJsonUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsPreviewSymbol2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/previewSymbol2D");
  }
  const module2 = await import("@arcgis/core/applications/Components/previewSymbol2D.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsReactiveUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/reactiveUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/reactiveUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsSelectionOperation() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/SelectionOperation");
  }
  const module2 = await import("@arcgis/core/applications/Components/SelectionOperation.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsSketchTooltipControls() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/SketchTooltipControls");
  }
  const module2 = await import("@arcgis/core/applications/Components/SketchTooltipControls.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsStyleUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/styleUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/styleUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsSvgUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/svgUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/svgUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsComponentsWebStyleSymbolUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/webStyleSymbolUtils");
  }
  const module2 = await import("@arcgis/core/applications/Components/webStyleSymbolUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsExperienceBuilderSketchUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/ExperienceBuilder/sketchUtils");
  }
  const module2 = await import("@arcgis/core/applications/ExperienceBuilder/sketchUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsMapViewerTemplateUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/MapViewer/templateUtils");
  }
  const module2 = await import("@arcgis/core/applications/MapViewer/templateUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsSceneViewerDevEnvironmentUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/SceneViewer/devEnvironmentUtils");
  }
  const module2 = await import("@arcgis/core/applications/SceneViewer/devEnvironmentUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
async function importApplicationsWebEditorSketchUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/WebEditor/sketchUtils");
  }
  const module2 = await import("@arcgis/core/applications/WebEditor/sketchUtils.js");
  return isDefaultModule(module2) ? module2.default : module2;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  importAnalysisAreaMeasurementAnalysis,
  importAnalysisDimensionAnalysis,
  importAnalysisDimensionSimpleStyle,
  importAnalysisDirectLineMeasurementAnalysis,
  importAnalysisLengthDimension,
  importAnalysisLineOfSightAnalysis,
  importAnalysisLineOfSightAnalysisObserver,
  importAnalysisLineOfSightAnalysisTarget,
  importAnalysisSliceAnalysis,
  importAnalysisSlicePlane,
  importAnalysisViewshed,
  importAnalysisViewshedAnalysis,
  importApplicationsComponentsBasemapUtils,
  importApplicationsComponentsDrawUtils,
  importApplicationsComponentsFontUtils,
  importApplicationsComponentsGetDefaultUnits,
  importApplicationsComponentsGfxUtils,
  importApplicationsComponentsLayerOriginUtils,
  importApplicationsComponentsLayersEffectsJsonUtils,
  importApplicationsComponentsPreviewSymbol2D,
  importApplicationsComponentsReactiveUtils,
  importApplicationsComponentsSelectionOperation,
  importApplicationsComponentsSketchTooltipControls,
  importApplicationsComponentsStyleUtils,
  importApplicationsComponentsSvgUtils,
  importApplicationsComponentsWebStyleSymbolUtils,
  importApplicationsExperienceBuilderSketchUtils,
  importApplicationsMapViewerTemplateUtils,
  importApplicationsSceneViewerDevEnvironmentUtils,
  importApplicationsWebEditorSketchUtils,
  importArcade,
  importAttributeBinsGraphic,
  importBasemap,
  importCamera,
  importCameraLayout,
  importColor,
  importConfig,
  importCoreAccessor,
  importCoreAccessorSupportDecorators,
  importCoreCollection,
  importCoreError,
  importCoreHandles,
  importCoreLang,
  importCorePromiseUtils,
  importCoreReactiveUtils,
  importCoreScheduling,
  importCoreSql,
  importCoreSqlWhereClause,
  importCoreUrlUtils,
  importCoreWorkers,
  importCoreWorkersConnection,
  importEditingSharedTemplatesSharedTemplate,
  importEditingSharedTemplatesSharedTemplateMetadata,
  importFormElements,
  importFormElementsAttachmentElement,
  importFormElementsElement,
  importFormElementsFieldElement,
  importFormElementsGroupElement,
  importFormElementsInputs,
  importFormElementsInputsAttachmentsAttachmentInput,
  importFormElementsInputsAttachmentsAudioInput,
  importFormElementsInputsAttachmentsDocumentInput,
  importFormElementsInputsAttachmentsImageInput,
  importFormElementsInputsAttachmentsSignatureInput,
  importFormElementsInputsAttachmentsVideoInput,
  importFormElementsInputsBarcodeScannerInput,
  importFormElementsInputsComboBoxInput,
  importFormElementsInputsDatePickerInput,
  importFormElementsInputsDateTimeOffsetPickerInput,
  importFormElementsInputsDateTimePickerInput,
  importFormElementsInputsRadioButtonsInput,
  importFormElementsInputsSwitchInput,
  importFormElementsInputsTextAreaInput,
  importFormElementsInputsTextBoxInput,
  importFormElementsInputsTimePickerInput,
  importFormElementsRelationshipElement,
  importFormElementsTextElement,
  importFormElementsUtilityNetworkAssociationsElement,
  importFormExpressionInfo,
  importFormFormTemplate,
  importGeometry,
  importGeometryCircle,
  importGeometryCoordinateFormatter,
  importGeometryExtent,
  importGeometryGeometry,
  importGeometryGeometryEngine,
  importGeometryGeometryEngineAsync,
  importGeometryHeightModelInfo,
  importGeometryMesh,
  importGeometryMultipoint,
  importGeometryOperatorsAffineTransformOperator,
  importGeometryOperatorsAlphaShapeOperator,
  importGeometryOperatorsAreaOperator,
  importGeometryOperatorsAutoCompleteOperator,
  importGeometryOperatorsBoundaryOperator,
  importGeometryOperatorsBufferOperator,
  importGeometryOperatorsCentroidOperator,
  importGeometryOperatorsClipOperator,
  importGeometryOperatorsContainsOperator,
  importGeometryOperatorsConvexHullOperator,
  importGeometryOperatorsCrossesOperator,
  importGeometryOperatorsCutOperator,
  importGeometryOperatorsDensifyOperator,
  importGeometryOperatorsDifferenceOperator,
  importGeometryOperatorsDisjointOperator,
  importGeometryOperatorsDistanceOperator,
  importGeometryOperatorsEqualsOperator,
  importGeometryOperatorsExtendOperator,
  importGeometryOperatorsGeneralizeOperator,
  importGeometryOperatorsGeodesicBufferOperator,
  importGeometryOperatorsGeodesicProximityOperator,
  importGeometryOperatorsGeodeticAreaOperator,
  importGeometryOperatorsGeodeticDensifyOperator,
  importGeometryOperatorsGeodeticDistanceOperator,
  importGeometryOperatorsGeodeticLengthOperator,
  importGeometryOperatorsGraphicBufferOperator,
  importGeometryOperatorsIntegrateOperator,
  importGeometryOperatorsIntersectionOperator,
  importGeometryOperatorsIntersectsOperator,
  importGeometryOperatorsIsNearOperator,
  importGeometryOperatorsLabelPointOperator,
  importGeometryOperatorsLengthOperator,
  importGeometryOperatorsLinesToPolygonsOperator,
  importGeometryOperatorsLocateBetweenOperator,
  importGeometryOperatorsMinimumBoundingCircleOperator,
  importGeometryOperatorsMultiPartToSinglePartOperator,
  importGeometryOperatorsOffsetOperator,
  importGeometryOperatorsOverlapsOperator,
  importGeometryOperatorsPolygonOverlayOperator,
  importGeometryOperatorsPolygonSlicerOperator,
  importGeometryOperatorsProjectOperator,
  importGeometryOperatorsProximityOperator,
  importGeometryOperatorsRelateOperator,
  importGeometryOperatorsReshapeOperator,
  importGeometryOperatorsShapePreservingProjectOperator,
  importGeometryOperatorsSimplifyOperator,
  importGeometryOperatorsSupportGeographicTransformation,
  importGeometryOperatorsSupportGeographicTransformationStep,
  importGeometryOperatorsSupportGeographicTransformationUtils,
  importGeometryOperatorsSupportTransformation,
  importGeometryOperatorsSymmetricDifferenceOperator,
  importGeometryOperatorsTouchesOperator,
  importGeometryOperatorsUnionOperator,
  importGeometryOperatorsWithinOperator,
  importGeometryPoint,
  importGeometryPolygon,
  importGeometryPolyline,
  importGeometryProjection,
  importGeometrySpatialReference,
  importGeometrySupportGeodesicUtils,
  importGeometrySupportGeographicTransformation,
  importGeometrySupportGeographicTransformationStep,
  importGeometrySupportJsonUtils,
  importGeometrySupportMeshComponent,
  importGeometrySupportMeshGeoreferencedVertexSpace,
  importGeometrySupportMeshLocalVertexSpace,
  importGeometrySupportMeshMaterial,
  importGeometrySupportMeshMaterialMetallicRoughness,
  importGeometrySupportMeshTexture,
  importGeometrySupportMeshTextureTransform,
  importGeometrySupportMeshTransform,
  importGeometrySupportMeshUtils,
  importGeometrySupportNormalizeUtils,
  importGeometrySupportWebMercatorUtils,
  importGraphic,
  importGround,
  importIdentityCredential,
  importIdentityIdentityManager,
  importIdentityOAuthInfo,
  importIdentityServerInfo,
  importIntl,
  importKernel,
  importLayersBaseDynamicLayer,
  importLayersBaseElevationLayer,
  importLayersBaseTileLayer,
  importLayersBingMapsLayer,
  importLayersBuildingSceneLayer,
  importLayersBuildingSublayersBuildingComponentSublayer,
  importLayersBuildingSublayersBuildingGroupSublayer,
  importLayersBuildingSublayersBuildingSublayer,
  importLayersCSVLayer,
  importLayersCatalogCatalogDynamicGroupLayer,
  importLayersCatalogCatalogFootprintLayer,
  importLayersCatalogCatalogUtils,
  importLayersCatalogLayer,
  importLayersDimensionLayer,
  importLayersElevationLayer,
  importLayersFeatureLayer,
  importLayersGeoJSONLayer,
  importLayersGeoRSSLayer,
  importLayersGraphicsLayer,
  importLayersGroupLayer,
  importLayersImageryLayer,
  importLayersImageryTileLayer,
  importLayersIntegratedMesh3DTilesLayer,
  importLayersIntegratedMeshLayer,
  importLayersKMLLayer,
  importLayersKnowledgeGraphKnowledgeGraphSublayer,
  importLayersKnowledgeGraphLayer,
  importLayersKnowledgeGraphSupportUtils,
  importLayersLayer,
  importLayersLineOfSightLayer,
  importLayersLinkChartLayer,
  importLayersMapImageLayer,
  importLayersMapNotesLayer,
  importLayersMediaLayer,
  importLayersOGCFeatureLayer,
  importLayersOgcWcsUtils,
  importLayersOgcWfsUtils,
  importLayersOpenStreetMapLayer,
  importLayersOrientedImageryLayer,
  importLayersOrientedImageryTransformationsImageToWorld,
  importLayersOrientedImageryTransformationsWorldToImage,
  importLayersPointCloudFiltersPointCloudBitfieldFilter,
  importLayersPointCloudFiltersPointCloudFilter,
  importLayersPointCloudFiltersPointCloudReturnFilter,
  importLayersPointCloudFiltersPointCloudValueFilter,
  importLayersPointCloudLayer,
  importLayersRouteLayer,
  importLayersSceneLayer,
  importLayersStreamLayer,
  importLayersSubtypeGroupLayer,
  importLayersSupportAggregateField,
  importLayersSupportArcadeUtils,
  importLayersSupportBuildingFilter,
  importLayersSupportBuildingSummaryStatistics,
  importLayersSupportCodedValueDomain,
  importLayersSupportControlPointsGeoreference,
  importLayersSupportCornersGeoreference,
  importLayersSupportCsvUtils,
  importLayersSupportDimensionalDefinition,
  importLayersSupportDisplayFilter,
  importLayersSupportDisplayFilterInfo,
  importLayersSupportDomain,
  importLayersSupportElevationSampler,
  importLayersSupportExpressionInfo,
  importLayersSupportExtentAndRotationGeoreference,
  importLayersSupportFacilityLayerInfo,
  importLayersSupportFeatureEffect,
  importLayersSupportFeatureFilter,
  importLayersSupportFeatureReductionBinning,
  importLayersSupportFeatureReductionCluster,
  importLayersSupportFeatureReductionSelection,
  importLayersSupportFeatureTemplate,
  importLayersSupportFeatureType,
  importLayersSupportField,
  importLayersSupportFieldUtils,
  importLayersSupportFieldsIndex,
  importLayersSupportGeometryFieldsInfo,
  importLayersSupportImageElement,
  importLayersSupportInheritedDomain,
  importLayersSupportKMLSublayer,
  importLayersSupportLOD,
  importLayersSupportLabelClass,
  importLayersSupportLayerFloorInfo,
  importLayersSupportLevelLayerInfo,
  importLayersSupportLocalMediaElementSource,
  importLayersSupportMapImage,
  importLayersSupportMosaicRule,
  importLayersSupportMultidimensionalSubset,
  importLayersSupportOrderByInfo,
  importLayersSupportPixelBlock,
  importLayersSupportPublishingInfo,
  importLayersSupportRangeDomain,
  importLayersSupportRasterBandInfo,
  importLayersSupportRasterFunction,
  importLayersSupportRasterFunctionConstants,
  importLayersSupportRasterFunctionUtils,
  importLayersSupportRasterInfo,
  importLayersSupportRasterSensorInfo,
  importLayersSupportRelationship,
  importLayersSupportRouteStopSymbols,
  importLayersSupportRouteSymbols,
  importLayersSupportSceneFilter,
  importLayersSupportSceneModification,
  importLayersSupportSceneModifications,
  importLayersSupportSiteLayerInfo,
  importLayersSupportStreamConnection,
  importLayersSupportSublayer,
  importLayersSupportSubtype,
  importLayersSupportSubtypeSublayer,
  importLayersSupportTelemetryData,
  importLayersSupportTelemetryDisplay,
  importLayersSupportTileInfo,
  importLayersSupportTileMatrixSet,
  importLayersSupportTimeInfo,
  importLayersSupportTrackInfo,
  importLayersSupportTrackPartInfo,
  importLayersSupportVideoElement,
  importLayersSupportVideoTimeExtent,
  importLayersSupportWMSSublayer,
  importLayersSupportWMTSStyle,
  importLayersSupportWMTSSublayer,
  importLayersTileLayer,
  importLayersUnknownLayer,
  importLayersUnsupportedLayer,
  importLayersVectorTileLayer,
  importLayersVideoLayer,
  importLayersViewshedLayer,
  importLayersVoxelLayer,
  importLayersVoxelVoxelDynamicSection,
  importLayersVoxelVoxelSlice,
  importLayersVoxelVoxelTransferFunctionStyle,
  importLayersVoxelVoxelVariable,
  importLayersVoxelVoxelVariableStyle,
  importLayersVoxelVoxelVolume,
  importLayersVoxelVoxelVolumeStyle,
  importLayersWCSLayer,
  importLayersWFSLayer,
  importLayersWMSLayer,
  importLayersWMTSLayer,
  importLayersWebTileLayer,
  importLinkChartChronologicalLayoutSettings,
  importLinkChartLayoutSettings,
  importLinkChartLinkChartProperties,
  importLinkChartNonspatialDataDisplay,
  importLinkChartOrganicLayoutSettings,
  importMap,
  importNetworksNetwork,
  importNetworksSupportNamedTraceConfiguration,
  importNetworksSupportNetworkSystemLayers,
  importNetworksSupportTerminal,
  importNetworksSupportTerminalConfiguration,
  importNetworksSupportTopologyValidationJobInfo,
  importNetworksSupportTraceConfiguration,
  importNetworksSupportTraceJobInfo,
  importNetworksSupportUNTraceConfiguration,
  importNetworksUtilityNetwork,
  importPointCloudRenderers,
  importPopupContent,
  importPopupContentAttachmentsContent,
  importPopupContentBarChartMediaInfo,
  importPopupContentColumnChartMediaInfo,
  importPopupContentContent,
  importPopupContentCustomContent,
  importPopupContentExpressionContent,
  importPopupContentFieldsContent,
  importPopupContentImageMediaInfo,
  importPopupContentLineChartMediaInfo,
  importPopupContentMediaContent,
  importPopupContentPieChartMediaInfo,
  importPopupContentRelationshipContent,
  importPopupContentSupportChartMediaInfoValue,
  importPopupContentSupportChartMediaInfoValueSeries,
  importPopupContentSupportImageMediaInfoValue,
  importPopupContentTextContent,
  importPopupContentUtilityNetworkAssociationsContent,
  importPopupElementExpressionInfo,
  importPopupExpressionInfo,
  importPopupFieldInfo,
  importPopupLayerOptions,
  importPopupRelatedRecordsInfo,
  importPopupSupportAttachmentsOrderByInfo,
  importPopupSupportFieldInfoFormat,
  importPopupSupportRelatedRecordsInfoFieldOrder,
  importPopupSupportUtilityNetworkAssociationType,
  importPopupTemplate,
  importPortalPortal,
  importPortalPortalFolder,
  importPortalPortalGroup,
  importPortalPortalItem,
  importPortalPortalItemResource,
  importPortalPortalQueryParams,
  importPortalPortalQueryResult,
  importPortalPortalRating,
  importPortalPortalUser,
  importRasterRenderers,
  importRenderers,
  importRenderersClassBreaksRenderer,
  importRenderersDictionaryRenderer,
  importRenderersDotDensityRenderer,
  importRenderersFlowRenderer,
  importRenderersHeatmapRenderer,
  importRenderersPieChartRenderer,
  importRenderersPointCloudClassBreaksRenderer,
  importRenderersPointCloudRGBRenderer,
  importRenderersPointCloudRenderer,
  importRenderersPointCloudStretchRenderer,
  importRenderersPointCloudUniqueValueRenderer,
  importRenderersRasterColormapRenderer,
  importRenderersRasterShadedReliefRenderer,
  importRenderersRasterStretchRenderer,
  importRenderersRenderer,
  importRenderersSimpleRenderer,
  importRenderersSupportAttributeColorInfo,
  importRenderersSupportAuthoringInfo,
  importRenderersSupportAuthoringInfoVisualVariable,
  importRenderersSupportClassBreakInfo,
  importRenderersSupportColormapInfo,
  importRenderersSupportHeatmapColorStop,
  importRenderersSupportJsonUtils,
  importRenderersSupportRasterPresetRenderer,
  importRenderersSupportUniqueValue,
  importRenderersSupportUniqueValueClass,
  importRenderersSupportUniqueValueGroup,
  importRenderersSupportUniqueValueInfo,
  importRenderersSupportUtils,
  importRenderersUniqueValueRenderer,
  importRenderersVectorFieldRenderer,
  importRenderersVisualVariablesColorVariable,
  importRenderersVisualVariablesOpacityVariable,
  importRenderersVisualVariablesRotationVariable,
  importRenderersVisualVariablesSizeVariable,
  importRenderersVisualVariablesSupportColorSizeStop,
  importRenderersVisualVariablesSupportColorStop,
  importRenderersVisualVariablesSupportOpacityStop,
  importRenderersVisualVariablesSupportSizeStop,
  importRenderersVisualVariablesVisualVariable,
  importRequest,
  importRestClosestFacility,
  importRestFeatureServiceFeatureService,
  importRestFeatureServiceUtils,
  importRestFind,
  importRestGeometryService,
  importRestGeoprocessor,
  importRestGeoprocessorGPOptions,
  importRestIdentify,
  importRestImageService,
  importRestKnowledgeGraphDataModel,
  importRestKnowledgeGraphEntity,
  importRestKnowledgeGraphEntityType,
  importRestKnowledgeGraphFieldIndex,
  importRestKnowledgeGraphGraphApplyEdits,
  importRestKnowledgeGraphGraphApplyEditsResult,
  importRestKnowledgeGraphGraphNamedObject,
  importRestKnowledgeGraphGraphObject,
  importRestKnowledgeGraphGraphObjectType,
  importRestKnowledgeGraphGraphProperty,
  importRestKnowledgeGraphGraphQuery,
  importRestKnowledgeGraphGraphQueryResult,
  importRestKnowledgeGraphGraphQueryResultHeader,
  importRestKnowledgeGraphGraphQueryStreaming,
  importRestKnowledgeGraphGraphQueryStreamingResult,
  importRestKnowledgeGraphGraphSearch,
  importRestKnowledgeGraphGraphSearchStreaming,
  importRestKnowledgeGraphInputQuantizationParameters,
  importRestKnowledgeGraphKnowledgeGraph,
  importRestKnowledgeGraphOutputQuantizationParameters,
  importRestKnowledgeGraphPath,
  importRestKnowledgeGraphRelationship,
  importRestKnowledgeGraphRelationshipType,
  importRestKnowledgeGraphSearchIndex,
  importRestKnowledgeGraphService,
  importRestKnowledgeGraphServiceDefinition,
  importRestKnowledgeGraphSourceTypeValueBehavior,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity,
  importRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter,
  importRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection,
  importRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings,
  importRestLocator,
  importRestNetworkService,
  importRestNetworksQueryAssociations,
  importRestNetworksSupportAggregatedGeometry,
  importRestNetworksSupportAssociation,
  importRestNetworksSupportAssociationGeometriesResult,
  importRestNetworksSupportFunctionResult,
  importRestNetworksSupportNetworkElement,
  importRestNetworksSupportQueryAssociationsParameters,
  importRestNetworksSupportQueryAssociationsResult,
  importRestNetworksSupportSynthesizeAssociationGeometriesParameters,
  importRestNetworksSupportTraceLocation,
  importRestNetworksSupportTraceParameters,
  importRestNetworksSupportTraceResult,
  importRestNetworksSupportValidateNetworkTopologyParameters,
  importRestNetworksSupportValidateNetworkTopologyResult,
  importRestNetworksSynthesizeAssociationGeometries,
  importRestNetworksTrace,
  importRestPlaces,
  importRestPrint,
  importRestQuery,
  importRestQuerySupportAttachmentInfo,
  importRestRoute,
  importRestServiceArea,
  importRestSupportAddressCandidate,
  importRestSupportAlgorithmicColorRamp,
  importRestSupportArealUnit,
  importRestSupportAreasAndLengthsParameters,
  importRestSupportAttachmentQuery,
  importRestSupportAttributeBinsFeatureSet,
  importRestSupportAttributeBinsGrouping,
  importRestSupportAttributeBinsQuery,
  importRestSupportAutoIntervalBinParameters,
  importRestSupportBaseImageMeasureParameters,
  importRestSupportBaseImageMeasureResult,
  importRestSupportBufferParameters,
  importRestSupportCameraInfo,
  importRestSupportClosestFacilityParameters,
  importRestSupportClosestFacilitySolveResult,
  importRestSupportColorRamp,
  importRestSupportDataFile,
  importRestSupportDataLayer,
  importRestSupportDateBinParameters,
  importRestSupportDateBinTimeInterval,
  importRestSupportDensifyParameters,
  importRestSupportDirectionLine,
  importRestSupportDirectionPoint,
  importRestSupportDirectionsEvent,
  importRestSupportDirectionsFeature,
  importRestSupportDirectionsFeatureSet,
  importRestSupportDistanceParameters,
  importRestSupportFeatureSet,
  importRestSupportFetchPlaceParameters,
  importRestSupportFindImagesParameters,
  importRestSupportFindImagesResult,
  importRestSupportFindParameters,
  importRestSupportFindResult,
  importRestSupportFixedBoundariesBinParameters,
  importRestSupportFixedIntervalBinParameters,
  importRestSupportGPMessage,
  importRestSupportGeneralizeParameters,
  importRestSupportIdentifyParameters,
  importRestSupportIdentifyResult,
  importRestSupportImageAngleParameters,
  importRestSupportImageAngleResult,
  importRestSupportImageAreaParameters,
  importRestSupportImageAreaResult,
  importRestSupportImageBoundaryParameters,
  importRestSupportImageBoundaryResult,
  importRestSupportImageDistanceParameters,
  importRestSupportImageDistanceResult,
  importRestSupportImageGPSInfo,
  importRestSupportImageGPSInfoParameters,
  importRestSupportImageGPSInfoResult,
  importRestSupportImageHeightParameters,
  importRestSupportImageHeightResult,
  importRestSupportImageHistogramParameters,
  importRestSupportImageIdentifyParameters,
  importRestSupportImageIdentifyResult,
  importRestSupportImageInspectionInfo,
  importRestSupportImageParameters,
  importRestSupportImagePixelLocationParameters,
  importRestSupportImagePixelLocationResult,
  importRestSupportImagePointParameters,
  importRestSupportImagePointResult,
  importRestSupportImageSample,
  importRestSupportImageSampleParameters,
  importRestSupportImageSampleResult,
  importRestSupportImageToMapMultirayParameters,
  importRestSupportImageToMapParameters,
  importRestSupportImageUrlParameters,
  importRestSupportImageUrlResult,
  importRestSupportImageVolume,
  importRestSupportImageVolumeParameters,
  importRestSupportImageVolumeResult,
  importRestSupportJobInfo,
  importRestSupportLegendLayer,
  importRestSupportLengthsParameters,
  importRestSupportLinearUnit,
  importRestSupportMapToImageParameters,
  importRestSupportMeasureAreaFromImageResult,
  importRestSupportMeasureFromImageParameters,
  importRestSupportMeasureLengthFromImageResult,
  importRestSupportMultipartColorRamp,
  importRestSupportNAMessage,
  importRestSupportNetworkFeatureSet,
  importRestSupportNetworkUrl,
  importRestSupportOffsetParameters,
  importRestSupportParameterValue,
  importRestSupportPlaceResult,
  importRestSupportPlacesParameters,
  importRestSupportPlacesQueryParameters,
  importRestSupportPlacesQueryResult,
  importRestSupportPointBarrier,
  importRestSupportPolygonBarrier,
  importRestSupportPolylineBarrier,
  importRestSupportPrintParameters,
  importRestSupportPrintTemplate,
  importRestSupportProjectParameters,
  importRestSupportQuery,
  importRestSupportRasterData,
  importRestSupportRelationParameters,
  importRestSupportRelationshipQuery,
  importRestSupportRouteInfo,
  importRestSupportRouteParameters,
  importRestSupportRouteResult,
  importRestSupportRouteSolveResult,
  importRestSupportServiceAreaParameters,
  importRestSupportServiceAreaSolveResult,
  importRestSupportStatisticDefinition,
  importRestSupportStop,
  importRestSupportTopFeaturesQuery,
  importRestSupportTopFilter,
  importRestSupportTravelMode,
  importRestSupportTrimExtendParameters,
  importRestSymbolService,
  importSmartMappingHeuristicsBinLevel,
  importSmartMappingHeuristicsScaleRange,
  importSmartMappingHeuristicsSizeRange,
  importSmartMappingLabelsBins,
  importSmartMappingLabelsClusters,
  importSmartMappingPopupClusters,
  importSmartMappingPopupTemplates,
  importSmartMappingRasterRenderersClassBreaks,
  importSmartMappingRasterRenderersColormap,
  importSmartMappingRasterRenderersFlow,
  importSmartMappingRasterRenderersRgb,
  importSmartMappingRasterRenderersShadedRelief,
  importSmartMappingRasterRenderersStretch,
  importSmartMappingRasterRenderersUniqueValue,
  importSmartMappingRasterRenderersVectorField,
  importSmartMappingRasterSupportColorRamps,
  importSmartMappingRasterSupportUtils,
  importSmartMappingRenderersColor,
  importSmartMappingRenderersDotDensity,
  importSmartMappingRenderersHeatmap,
  importSmartMappingRenderersLocation,
  importSmartMappingRenderersOpacity,
  importSmartMappingRenderersPieChart,
  importSmartMappingRenderersPredominance,
  importSmartMappingRenderersRelationship,
  importSmartMappingRenderersSize,
  importSmartMappingRenderersSupportRendererUtils,
  importSmartMappingRenderersType,
  importSmartMappingRenderersUnivariateColorSize,
  importSmartMappingStatisticsClassBreaks,
  importSmartMappingStatisticsHeatmapStatistics,
  importSmartMappingStatisticsHistogram,
  importSmartMappingStatisticsPredominantCategories,
  importSmartMappingStatisticsSummaryStatistics,
  importSmartMappingStatisticsSummaryStatisticsForAge,
  importSmartMappingStatisticsSupportAgeUtils,
  importSmartMappingStatisticsSupportPredominanceUtils,
  importSmartMappingStatisticsUniqueValues,
  importSmartMappingSymbologyColor,
  importSmartMappingSymbologyDotDensity,
  importSmartMappingSymbologyFlow,
  importSmartMappingSymbologyHeatmap,
  importSmartMappingSymbologyLocation,
  importSmartMappingSymbologyPieChart,
  importSmartMappingSymbologyPredominance,
  importSmartMappingSymbologyRelationship,
  importSmartMappingSymbologySize,
  importSmartMappingSymbologySupportColorRamps,
  importSmartMappingSymbologyType,
  importSupportActionsActionBase,
  importSupportActionsActionButton,
  importSupportActionsActionToggle,
  importSupportBasemapStyle,
  importSupportMapFloorInfo,
  importSupportPopupUtils,
  importSupportTimeUtils,
  importSymbols,
  importSymbolsCIMSymbol,
  importSymbolsCalloutsCallout3D,
  importSymbolsCalloutsLineCallout3D,
  importSymbolsEdgesEdges3D,
  importSymbolsEdgesSketchEdges3D,
  importSymbolsEdgesSolidEdges3D,
  importSymbolsExtrudeSymbol3DLayer,
  importSymbolsFillSymbol,
  importSymbolsFillSymbol3DLayer,
  importSymbolsFont,
  importSymbolsIconSymbol3DLayer,
  importSymbolsLabelSymbol3D,
  importSymbolsLineStyleMarker3D,
  importSymbolsLineSymbol,
  importSymbolsLineSymbol3D,
  importSymbolsLineSymbol3DLayer,
  importSymbolsLineSymbolMarker,
  importSymbolsMarkerSymbol,
  importSymbolsMeshSymbol3D,
  importSymbolsObjectSymbol3DLayer,
  importSymbolsPathSymbol3DLayer,
  importSymbolsPatternsLineStylePattern3D,
  importSymbolsPatternsStylePattern3D,
  importSymbolsPictureFillSymbol,
  importSymbolsPictureMarkerSymbol,
  importSymbolsPointSymbol3D,
  importSymbolsPolygonSymbol3D,
  importSymbolsSimpleFillSymbol,
  importSymbolsSimpleLineSymbol,
  importSymbolsSimpleMarkerSymbol,
  importSymbolsSupportCimConversionUtils,
  importSymbolsSupportCimSymbolUtils,
  importSymbolsSupportJsonUtils,
  importSymbolsSupportStyleOrigin,
  importSymbolsSupportSymbol3DVerticalOffset,
  importSymbolsSupportSymbolUtils,
  importSymbolsSymbol,
  importSymbolsSymbol3D,
  importSymbolsSymbol3DLayer,
  importSymbolsTextSymbol,
  importSymbolsTextSymbol3DLayer,
  importSymbolsWaterSymbol3DLayer,
  importSymbolsWebStyleSymbol,
  importTablesAttributeTableTemplate,
  importTablesElements,
  importTablesElementsAttributeTableAttachmentElement,
  importTablesElementsAttributeTableElement,
  importTablesElementsAttributeTableFieldElement,
  importTablesElementsAttributeTableGroupElement,
  importTablesElementsAttributeTableRelationshipElement,
  importTimeExtent,
  importTimeInterval,
  importTimeTimeExtent,
  importTimeTimeInterval,
  importVersionManagementUtils,
  importVersionManagementVersionAdaptersUtils,
  importVersionManagementVersionManagementService,
  importVersionManagementVersioningState,
  importViewpoint,
  importViews2dLayersBaseLayerView2D,
  importViews2dLayersBaseLayerViewGL2D,
  importViews2dViewState,
  importViews3dAnalysisAreaMeasurementAnalysisView3D,
  importViews3dAnalysisDirectLineMeasurementAnalysisView3D,
  importViews3dAnalysisLineOfSightAnalysisResult,
  importViews3dAnalysisLineOfSightAnalysisView3D,
  importViews3dAnalysisSliceAnalysisView3D,
  importViews3dAnalysisViewshedAnalysisView3D,
  importViews3dEnvironmentCloudyWeather,
  importViews3dEnvironmentFoggyWeather,
  importViews3dEnvironmentRainyWeather,
  importViews3dEnvironmentSnowyWeather,
  importViews3dEnvironmentSunLighting,
  importViews3dEnvironmentSunnyWeather,
  importViews3dEnvironmentVirtualLighting,
  importViews3dSupportLayerPerformanceInfo,
  importViews3dSupportSceneViewPerformanceInfo,
  importViews3dWebgl,
  importViews3dWebglManagedFBO,
  importViews3dWebglRenderCamera,
  importViews3dWebglRenderNode,
  importViewsAnalysisDimensionAnalysisView,
  importViewsAnalysisLengthDimensionResult,
  importViewsBasemapView,
  importViewsDrawDraw,
  importViewsDrawDrawAction,
  importViewsDrawMultipointDrawAction,
  importViewsDrawPointDrawAction,
  importViewsDrawPolygonDrawAction,
  importViewsDrawPolylineDrawAction,
  importViewsDrawSegmentDrawAction,
  importViewsGroundView,
  importViewsInputGamepadGamepadInputDevice,
  importViewsInputGamepadGamepadSettings,
  importViewsInputInput,
  importViewsInteractiveSketchSketchLabelOptions,
  importViewsInteractiveSketchSketchTooltipOptions,
  importViewsInteractiveSketchSketchValueOptions,
  importViewsInteractiveSnappingFeatureSnappingLayerSource,
  importViewsInteractiveSnappingSnappingOptions,
  importViewsInteractiveTooltip,
  importViewsLayersBuildingComponentSublayerView,
  importViewsLayersBuildingSceneLayerView,
  importViewsLayersCatalogDynamicGroupLayerView,
  importViewsLayersCatalogFootprintLayerView,
  importViewsLayersCatalogLayerView,
  importViewsLayersDimensionLayerView,
  importViewsLayersFeatureLayerView,
  importViewsLayersGroupLayerView,
  importViewsLayersImageryLayerView,
  importViewsLayersImageryTileLayerView,
  importViewsLayersLayerView,
  importViewsLayersMediaLayerView,
  importViewsLayersOGCFeatureLayerView,
  importViewsLayersSceneLayerView,
  importViewsLayersStreamLayerView,
  importViewsLayersViewshedLayerView,
  importViewsLinkChartView,
  importViewsMagnifier,
  importViewsMapView,
  importViewsNavigationGamepadGamepadSettings,
  importViewsNavigationNavigation,
  importViewsNavigationNavigationActionMap,
  importViewsSceneView,
  importViewsSupportColorUtils,
  importViewsSupportHighlightOptions,
  importViewsTheme,
  importViewsUiDefaultUI,
  importViewsUiUI,
  importViewsView,
  importViewsView2D,
  importViewsViewAnimation,
  importWebDocument2D,
  importWebLinkChart,
  importWebMap,
  importWebScene,
  importWebdocApplicationPropertiesSearch,
  importWebdocApplicationPropertiesSearchLayer,
  importWebdocApplicationPropertiesSearchLayerField,
  importWebdocApplicationPropertiesSearchTable,
  importWebdocApplicationPropertiesSearchTableField,
  importWebdocApplicationPropertiesViewing,
  importWebdocGeotriggersInfo,
  importWebdocGeotriggersInfoDeviceLocationFeed,
  importWebdocGeotriggersInfoExpressionInfo,
  importWebdocGeotriggersInfoFeatureFenceParameters,
  importWebdocGeotriggersInfoFeatureFilter,
  importWebdocGeotriggersInfoFeatureLayerSource,
  importWebdocGeotriggersInfoFenceGeotrigger,
  importWebdocGeotriggersInfoGeotrigger,
  importWebdocGeotriggersInfoGeotriggerNotificationOptions,
  importWebdocIPSInfo,
  importWebdocIpsPositioningService,
  importWebdocWidgetsTimeSlider,
  importWebmapApplicationProperties,
  importWebmapBackgroundColorBackground,
  importWebmapBookmark,
  importWebmapInitialViewProperties,
  importWebsceneApplicationProperties,
  importWebsceneBackgroundBackground,
  importWebsceneBackgroundColorBackground,
  importWebsceneEnvironment,
  importWebsceneInitialViewProperties,
  importWebscenePresentation,
  importWebsceneSlide,
  importWebsceneSlideLegendInfo,
  importWebsceneSunLighting,
  importWebsceneSupportSlideElements,
  importWebsceneVirtualLighting,
  importWidgetsAreaMeasurement2D,
  importWidgetsAreaMeasurement2DAreaMeasurement2DViewModel,
  importWidgetsAreaMeasurement3D,
  importWidgetsAreaMeasurement3DAreaMeasurement3DViewModel,
  importWidgetsAttachments,
  importWidgetsAttachmentsAttachmentsViewModel,
  importWidgetsAttribution,
  importWidgetsAttributionAttributionViewModel,
  importWidgetsBasemapGallery,
  importWidgetsBasemapGalleryBasemapGalleryViewModel,
  importWidgetsBasemapGallerySupportBasemapGalleryItem,
  importWidgetsBasemapGallerySupportLocalBasemapsSource,
  importWidgetsBasemapGallerySupportPortalBasemapsSource,
  importWidgetsBasemapLayerList,
  importWidgetsBasemapLayerListBasemapLayerListViewModel,
  importWidgetsBasemapToggle,
  importWidgetsBasemapToggleBasemapToggleViewModel,
  importWidgetsBatchAttributeForm,
  importWidgetsBatchAttributeFormBatchAttributeFormViewModel,
  importWidgetsBookmarks,
  importWidgetsBookmarksBookmarksViewModel,
  importWidgetsBuildingExplorer,
  importWidgetsBuildingExplorerBuildingExplorerViewModel,
  importWidgetsBuildingExplorerBuildingLevel,
  importWidgetsBuildingExplorerBuildingPhase,
  importWidgetsCatalogLayerList,
  importWidgetsCatalogLayerListCatalogLayerListViewModel,
  importWidgetsCompass,
  importWidgetsCompassCompassViewModel,
  importWidgetsCoordinateConversion,
  importWidgetsCoordinateConversionCoordinateConversionViewModel,
  importWidgetsCoordinateConversionSupportConversion,
  importWidgetsCoordinateConversionSupportFormat,
  importWidgetsDaylight,
  importWidgetsDaylightDaylightViewModel,
  importWidgetsDirectLineMeasurement3D,
  importWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel,
  importWidgetsDirectionalPad,
  importWidgetsDirectionalPadDirectionalPadViewModel,
  importWidgetsDirections,
  importWidgetsDirectionsDirectionsViewModel,
  importWidgetsDistanceMeasurement2D,
  importWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel,
  importWidgetsEditor,
  importWidgetsEditorCreateFeaturesWorkflow,
  importWidgetsEditorCreateFeaturesWorkflowData,
  importWidgetsEditorEditorViewModel,
  importWidgetsEditorEdits,
  importWidgetsEditorSupportEditorItem,
  importWidgetsEditorUpdateWorkflow,
  importWidgetsEditorUpdateWorkflowData,
  importWidgetsEditorWorkflow,
  importWidgetsElevationProfile,
  importWidgetsElevationProfileElevationProfileLine,
  importWidgetsElevationProfileElevationProfileLineGround,
  importWidgetsElevationProfileElevationProfileLineInput,
  importWidgetsElevationProfileElevationProfileLineQuery,
  importWidgetsElevationProfileElevationProfileLineView,
  importWidgetsElevationProfileElevationProfileViewModel,
  importWidgetsExpand,
  importWidgetsExpandExpandViewModel,
  importWidgetsFeature,
  importWidgetsFeatureFeatureViewModel,
  importWidgetsFeatureForm,
  importWidgetsFeatureFormFeatureFormViewModel,
  importWidgetsFeatureFormFieldInput,
  importWidgetsFeatureFormGroupInput,
  importWidgetsFeatureFormRelationshipInput,
  importWidgetsFeatureFormTextElementInput,
  importWidgetsFeatureFormUtilityNetworkAssociationInput,
  importWidgetsFeatureTable,
  importWidgetsFeatureTableActionColumn,
  importWidgetsFeatureTableAttachmentsColumn,
  importWidgetsFeatureTableFeatureTableViewModel,
  importWidgetsFeatureTableFieldColumn,
  importWidgetsFeatureTableGridColumn,
  importWidgetsFeatureTableGridGroupColumn,
  importWidgetsFeatureTableGridSupportButtonMenu,
  importWidgetsFeatureTableGridSupportButtonMenuItem,
  importWidgetsFeatureTableGridSupportButtonMenuViewModel,
  importWidgetsFeatureTableRelationshipColumn,
  importWidgetsFeatureTableSupportAttachmentsColumnTemplate,
  importWidgetsFeatureTableSupportColumnTemplate,
  importWidgetsFeatureTableSupportColumnTemplateBase,
  importWidgetsFeatureTableSupportFieldColumnTemplate,
  importWidgetsFeatureTableSupportGroupColumnTemplate,
  importWidgetsFeatureTableSupportRelationshipColumnTemplate,
  importWidgetsFeatureTableSupportTableTemplate,
  importWidgetsFeatureTemplates,
  importWidgetsFeatureTemplatesFeatureTemplatesViewModel,
  importWidgetsFeatureTemplatesTemplateItem,
  importWidgetsFeatureTemplatesTemplateItemGroup,
  importWidgetsFeatures,
  importWidgetsFeaturesFeaturesViewModel,
  importWidgetsFloorFilter,
  importWidgetsFloorFilterFloorFilterViewModel,
  importWidgetsFullscreen,
  importWidgetsFullscreenFullscreenViewModel,
  importWidgetsHistogram,
  importWidgetsHistogramHistogramViewModel,
  importWidgetsHistogramRangeSlider,
  importWidgetsHistogramRangeSliderHistogramRangeSliderViewModel,
  importWidgetsHome,
  importWidgetsHomeHomeViewModel,
  importWidgetsLayerList,
  importWidgetsLayerListLayerListViewModel,
  importWidgetsLayerListListItem,
  importWidgetsLayerListListItemPanel,
  importWidgetsLegend,
  importWidgetsLegendLegendViewModel,
  importWidgetsLegendSupportActiveLayerInfo,
  importWidgetsLineOfSight,
  importWidgetsLineOfSightLineOfSightTarget,
  importWidgetsLineOfSightLineOfSightViewModel,
  importWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel,
  importWidgetsLocate,
  importWidgetsLocateLocateViewModel,
  importWidgetsMeasurement,
  importWidgetsMeasurementMeasurementViewModel,
  importWidgetsNavigationToggle,
  importWidgetsNavigationToggleNavigationToggleViewModel,
  importWidgetsOrientedImageryViewer,
  importWidgetsOrientedImageryViewerOrientedImageryViewerViewModel,
  importWidgetsPopup,
  importWidgetsPopupPopupViewModel,
  importWidgetsPrint,
  importWidgetsPrintCustomTemplate,
  importWidgetsPrintPrintViewModel,
  importWidgetsPrintTemplateOptions,
  importWidgetsScaleBar,
  importWidgetsScaleBarScaleBarViewModel,
  importWidgetsScaleRangeSlider,
  importWidgetsScaleRangeSliderScaleRangeSliderViewModel,
  importWidgetsScaleRangeSliderScaleRanges,
  importWidgetsSearch,
  importWidgetsSearchLayerSearchSource,
  importWidgetsSearchLocatorSearchSource,
  importWidgetsSearchSearchResultRenderer,
  importWidgetsSearchSearchSource,
  importWidgetsSearchSearchViewModel,
  importWidgetsShadowCast,
  importWidgetsShadowCastShadowCastViewModel,
  importWidgetsSketch,
  importWidgetsSketchSketchViewModel,
  importWidgetsSlice,
  importWidgetsSliceSliceViewModel,
  importWidgetsSlider,
  importWidgetsSliderSliderViewModel,
  importWidgetsSmartMappingBinaryColorSizeSlider,
  importWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel,
  importWidgetsSmartMappingClassedColorSlider,
  importWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel,
  importWidgetsSmartMappingClassedSizeSlider,
  importWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel,
  importWidgetsSmartMappingColorSizeSlider,
  importWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel,
  importWidgetsSmartMappingColorSlider,
  importWidgetsSmartMappingColorSliderColorSliderViewModel,
  importWidgetsSmartMappingHeatmapSlider,
  importWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel,
  importWidgetsSmartMappingOpacitySlider,
  importWidgetsSmartMappingOpacitySliderOpacitySliderViewModel,
  importWidgetsSmartMappingSizeSlider,
  importWidgetsSmartMappingSizeSliderSizeSliderViewModel,
  importWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel,
  importWidgetsSmartMappingSmartMappingSliderBase,
  importWidgetsSmartMappingSmartMappingSliderViewModel,
  importWidgetsSmartMappingSupportUtils,
  importWidgetsSupportGridControls,
  importWidgetsSupportGridControlsGridControlsViewModel,
  importWidgetsSupportSnappingControls,
  importWidgetsSupportSnappingControlsSnappingControlsViewModel,
  importWidgetsSupportWidget,
  importWidgetsSwipe,
  importWidgetsSwipeSwipeViewModel,
  importWidgetsTableList,
  importWidgetsTableListListItem,
  importWidgetsTableListListItemPanel,
  importWidgetsTableListTableListViewModel,
  importWidgetsTimeSlider,
  importWidgetsTimeSliderTimeSliderViewModel,
  importWidgetsTimeZoneLabel,
  importWidgetsTrack,
  importWidgetsTrackTrackViewModel,
  importWidgetsUtilityNetworkAssociations,
  importWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel,
  importWidgetsUtilityNetworkTrace,
  importWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel,
  importWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel,
  importWidgetsUtilityNetworkValidateTopology,
  importWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel,
  importWidgetsValuePicker,
  importWidgetsValuePickerValuePickerCollection,
  importWidgetsValuePickerValuePickerCombobox,
  importWidgetsValuePickerValuePickerLabel,
  importWidgetsValuePickerValuePickerSlider,
  importWidgetsVersionManagementVersionManagementViewModel,
  importWidgetsVideoPlayer,
  importWidgetsVideoPlayerVideoPlayerViewModel,
  importWidgetsWeather,
  importWidgetsWeatherWeatherViewModel,
  importWidgetsWidget,
  importWidgetsZoom,
  importWidgetsZoomZoomViewModel,
  loadUndocumentedModule,
  newAnalysisAreaMeasurementAnalysis,
  newAnalysisDimensionAnalysis,
  newAnalysisDimensionSimpleStyle,
  newAnalysisDirectLineMeasurementAnalysis,
  newAnalysisLengthDimension,
  newAnalysisLineOfSightAnalysis,
  newAnalysisLineOfSightAnalysisObserver,
  newAnalysisLineOfSightAnalysisTarget,
  newAnalysisSliceAnalysis,
  newAnalysisSlicePlane,
  newAnalysisViewshed,
  newAnalysisViewshedAnalysis,
  newAttributeBinsGraphic,
  newBasemap,
  newCamera,
  newCameraLayout,
  newColor,
  newCoreAccessor,
  newCoreCollection,
  newCoreError,
  newCoreHandles,
  newCoreWorkersConnection,
  newFormElementsAttachmentElement,
  newFormElementsElement,
  newFormElementsFieldElement,
  newFormElementsGroupElement,
  newFormElementsInputsAttachmentsAttachmentInput,
  newFormElementsInputsAttachmentsAudioInput,
  newFormElementsInputsAttachmentsDocumentInput,
  newFormElementsInputsAttachmentsImageInput,
  newFormElementsInputsAttachmentsSignatureInput,
  newFormElementsInputsAttachmentsVideoInput,
  newFormElementsInputsBarcodeScannerInput,
  newFormElementsInputsComboBoxInput,
  newFormElementsInputsDatePickerInput,
  newFormElementsInputsDateTimeOffsetPickerInput,
  newFormElementsInputsDateTimePickerInput,
  newFormElementsInputsRadioButtonsInput,
  newFormElementsInputsSwitchInput,
  newFormElementsInputsTextAreaInput,
  newFormElementsInputsTextBoxInput,
  newFormElementsInputsTimePickerInput,
  newFormElementsRelationshipElement,
  newFormElementsTextElement,
  newFormElementsUtilityNetworkAssociationsElement,
  newFormExpressionInfo,
  newFormFormTemplate,
  newGeometryCircle,
  newGeometryExtent,
  newGeometryGeometry,
  newGeometryHeightModelInfo,
  newGeometryMesh,
  newGeometryMultipoint,
  newGeometryOperatorsSupportGeographicTransformation,
  newGeometryOperatorsSupportGeographicTransformationStep,
  newGeometryOperatorsSupportTransformation,
  newGeometryPoint,
  newGeometryPolygon,
  newGeometryPolyline,
  newGeometrySpatialReference,
  newGeometrySupportGeographicTransformation,
  newGeometrySupportGeographicTransformationStep,
  newGeometrySupportMeshComponent,
  newGeometrySupportMeshGeoreferencedVertexSpace,
  newGeometrySupportMeshLocalVertexSpace,
  newGeometrySupportMeshMaterial,
  newGeometrySupportMeshMaterialMetallicRoughness,
  newGeometrySupportMeshTexture,
  newGeometrySupportMeshTextureTransform,
  newGeometrySupportMeshTransform,
  newGraphic,
  newGround,
  newIdentityCredential,
  newIdentityOAuthInfo,
  newIdentityServerInfo,
  newLayersBaseDynamicLayer,
  newLayersBaseElevationLayer,
  newLayersBaseTileLayer,
  newLayersBingMapsLayer,
  newLayersBuildingSceneLayer,
  newLayersBuildingSublayersBuildingComponentSublayer,
  newLayersBuildingSublayersBuildingGroupSublayer,
  newLayersBuildingSublayersBuildingSublayer,
  newLayersCSVLayer,
  newLayersCatalogCatalogDynamicGroupLayer,
  newLayersCatalogCatalogFootprintLayer,
  newLayersCatalogLayer,
  newLayersDimensionLayer,
  newLayersElevationLayer,
  newLayersFeatureLayer,
  newLayersGeoJSONLayer,
  newLayersGeoRSSLayer,
  newLayersGraphicsLayer,
  newLayersGroupLayer,
  newLayersImageryLayer,
  newLayersImageryTileLayer,
  newLayersIntegratedMesh3DTilesLayer,
  newLayersIntegratedMeshLayer,
  newLayersKMLLayer,
  newLayersKnowledgeGraphKnowledgeGraphSublayer,
  newLayersKnowledgeGraphLayer,
  newLayersLayer,
  newLayersLineOfSightLayer,
  newLayersLinkChartLayer,
  newLayersMapImageLayer,
  newLayersMapNotesLayer,
  newLayersMediaLayer,
  newLayersOGCFeatureLayer,
  newLayersOpenStreetMapLayer,
  newLayersOrientedImageryLayer,
  newLayersPointCloudFiltersPointCloudBitfieldFilter,
  newLayersPointCloudFiltersPointCloudFilter,
  newLayersPointCloudFiltersPointCloudReturnFilter,
  newLayersPointCloudFiltersPointCloudValueFilter,
  newLayersPointCloudLayer,
  newLayersRouteLayer,
  newLayersSceneLayer,
  newLayersStreamLayer,
  newLayersSubtypeGroupLayer,
  newLayersSupportAggregateField,
  newLayersSupportBuildingFilter,
  newLayersSupportBuildingSummaryStatistics,
  newLayersSupportCodedValueDomain,
  newLayersSupportControlPointsGeoreference,
  newLayersSupportCornersGeoreference,
  newLayersSupportDimensionalDefinition,
  newLayersSupportDisplayFilter,
  newLayersSupportDisplayFilterInfo,
  newLayersSupportDomain,
  newLayersSupportElevationSampler,
  newLayersSupportExpressionInfo,
  newLayersSupportExtentAndRotationGeoreference,
  newLayersSupportFacilityLayerInfo,
  newLayersSupportFeatureEffect,
  newLayersSupportFeatureFilter,
  newLayersSupportFeatureReductionBinning,
  newLayersSupportFeatureReductionCluster,
  newLayersSupportFeatureReductionSelection,
  newLayersSupportFeatureTemplate,
  newLayersSupportFeatureType,
  newLayersSupportField,
  newLayersSupportFieldsIndex,
  newLayersSupportGeometryFieldsInfo,
  newLayersSupportImageElement,
  newLayersSupportInheritedDomain,
  newLayersSupportKMLSublayer,
  newLayersSupportLOD,
  newLayersSupportLabelClass,
  newLayersSupportLayerFloorInfo,
  newLayersSupportLevelLayerInfo,
  newLayersSupportLocalMediaElementSource,
  newLayersSupportMapImage,
  newLayersSupportMosaicRule,
  newLayersSupportMultidimensionalSubset,
  newLayersSupportOrderByInfo,
  newLayersSupportPixelBlock,
  newLayersSupportPublishingInfo,
  newLayersSupportRangeDomain,
  newLayersSupportRasterBandInfo,
  newLayersSupportRasterFunction,
  newLayersSupportRasterInfo,
  newLayersSupportRasterSensorInfo,
  newLayersSupportRelationship,
  newLayersSupportRouteStopSymbols,
  newLayersSupportRouteSymbols,
  newLayersSupportSceneFilter,
  newLayersSupportSceneModification,
  newLayersSupportSceneModifications,
  newLayersSupportSiteLayerInfo,
  newLayersSupportSublayer,
  newLayersSupportSubtype,
  newLayersSupportSubtypeSublayer,
  newLayersSupportTelemetryData,
  newLayersSupportTelemetryDisplay,
  newLayersSupportTileInfo,
  newLayersSupportTileMatrixSet,
  newLayersSupportTimeInfo,
  newLayersSupportTrackInfo,
  newLayersSupportTrackPartInfo,
  newLayersSupportVideoElement,
  newLayersSupportVideoTimeExtent,
  newLayersSupportWMSSublayer,
  newLayersSupportWMTSStyle,
  newLayersSupportWMTSSublayer,
  newLayersTileLayer,
  newLayersUnknownLayer,
  newLayersUnsupportedLayer,
  newLayersVectorTileLayer,
  newLayersVideoLayer,
  newLayersViewshedLayer,
  newLayersVoxelLayer,
  newLayersVoxelVoxelDynamicSection,
  newLayersVoxelVoxelSlice,
  newLayersVoxelVoxelTransferFunctionStyle,
  newLayersVoxelVoxelVariableStyle,
  newLayersVoxelVoxelVolumeStyle,
  newLayersWCSLayer,
  newLayersWFSLayer,
  newLayersWMSLayer,
  newLayersWMTSLayer,
  newLayersWebTileLayer,
  newLinkChartChronologicalLayoutSettings,
  newLinkChartLayoutSettings,
  newLinkChartLinkChartProperties,
  newLinkChartNonspatialDataDisplay,
  newLinkChartOrganicLayoutSettings,
  newMap,
  newNetworksNetwork,
  newNetworksSupportNamedTraceConfiguration,
  newNetworksSupportNetworkSystemLayers,
  newNetworksSupportTerminal,
  newNetworksSupportTerminalConfiguration,
  newNetworksSupportTopologyValidationJobInfo,
  newNetworksSupportTraceConfiguration,
  newNetworksSupportTraceJobInfo,
  newNetworksSupportUNTraceConfiguration,
  newNetworksUtilityNetwork,
  newPopupContentAttachmentsContent,
  newPopupContentBarChartMediaInfo,
  newPopupContentColumnChartMediaInfo,
  newPopupContentContent,
  newPopupContentCustomContent,
  newPopupContentExpressionContent,
  newPopupContentFieldsContent,
  newPopupContentImageMediaInfo,
  newPopupContentLineChartMediaInfo,
  newPopupContentMediaContent,
  newPopupContentPieChartMediaInfo,
  newPopupContentRelationshipContent,
  newPopupContentSupportChartMediaInfoValue,
  newPopupContentSupportChartMediaInfoValueSeries,
  newPopupContentSupportImageMediaInfoValue,
  newPopupContentTextContent,
  newPopupContentUtilityNetworkAssociationsContent,
  newPopupElementExpressionInfo,
  newPopupExpressionInfo,
  newPopupFieldInfo,
  newPopupLayerOptions,
  newPopupRelatedRecordsInfo,
  newPopupSupportAttachmentsOrderByInfo,
  newPopupSupportFieldInfoFormat,
  newPopupSupportRelatedRecordsInfoFieldOrder,
  newPopupSupportUtilityNetworkAssociationType,
  newPopupTemplate,
  newPortalPortal,
  newPortalPortalFolder,
  newPortalPortalGroup,
  newPortalPortalItem,
  newPortalPortalItemResource,
  newPortalPortalQueryParams,
  newPortalPortalQueryResult,
  newPortalPortalRating,
  newPortalPortalUser,
  newRenderersClassBreaksRenderer,
  newRenderersDictionaryRenderer,
  newRenderersDotDensityRenderer,
  newRenderersFlowRenderer,
  newRenderersHeatmapRenderer,
  newRenderersPieChartRenderer,
  newRenderersPointCloudClassBreaksRenderer,
  newRenderersPointCloudRGBRenderer,
  newRenderersPointCloudRenderer,
  newRenderersPointCloudStretchRenderer,
  newRenderersPointCloudUniqueValueRenderer,
  newRenderersRasterColormapRenderer,
  newRenderersRasterShadedReliefRenderer,
  newRenderersRasterStretchRenderer,
  newRenderersRenderer,
  newRenderersSimpleRenderer,
  newRenderersSupportAttributeColorInfo,
  newRenderersSupportAuthoringInfo,
  newRenderersSupportAuthoringInfoVisualVariable,
  newRenderersSupportClassBreakInfo,
  newRenderersSupportColormapInfo,
  newRenderersSupportHeatmapColorStop,
  newRenderersSupportRasterPresetRenderer,
  newRenderersSupportUniqueValue,
  newRenderersSupportUniqueValueClass,
  newRenderersSupportUniqueValueGroup,
  newRenderersSupportUniqueValueInfo,
  newRenderersUniqueValueRenderer,
  newRenderersVectorFieldRenderer,
  newRenderersVisualVariablesColorVariable,
  newRenderersVisualVariablesOpacityVariable,
  newRenderersVisualVariablesRotationVariable,
  newRenderersVisualVariablesSizeVariable,
  newRenderersVisualVariablesSupportColorSizeStop,
  newRenderersVisualVariablesSupportColorStop,
  newRenderersVisualVariablesSupportOpacityStop,
  newRenderersVisualVariablesSupportSizeStop,
  newRenderersVisualVariablesVisualVariable,
  newRestFeatureServiceFeatureService,
  newRestKnowledgeGraphDataModel,
  newRestKnowledgeGraphEntity,
  newRestKnowledgeGraphEntityType,
  newRestKnowledgeGraphFieldIndex,
  newRestKnowledgeGraphGraphApplyEdits,
  newRestKnowledgeGraphGraphApplyEditsResult,
  newRestKnowledgeGraphGraphNamedObject,
  newRestKnowledgeGraphGraphObject,
  newRestKnowledgeGraphGraphObjectType,
  newRestKnowledgeGraphGraphProperty,
  newRestKnowledgeGraphGraphQuery,
  newRestKnowledgeGraphGraphQueryResult,
  newRestKnowledgeGraphGraphQueryResultHeader,
  newRestKnowledgeGraphGraphQueryStreaming,
  newRestKnowledgeGraphGraphQueryStreamingResult,
  newRestKnowledgeGraphGraphSearch,
  newRestKnowledgeGraphGraphSearchStreaming,
  newRestKnowledgeGraphInputQuantizationParameters,
  newRestKnowledgeGraphKnowledgeGraph,
  newRestKnowledgeGraphOutputQuantizationParameters,
  newRestKnowledgeGraphPath,
  newRestKnowledgeGraphRelationship,
  newRestKnowledgeGraphRelationshipType,
  newRestKnowledgeGraphSearchIndex,
  newRestKnowledgeGraphServiceDefinition,
  newRestKnowledgeGraphSourceTypeValueBehavior,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsConfiguration,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsEntity,
  newRestKnowledgeGraphToolServiceFindPathsCIMFilteredFindPathsPathFilter,
  newRestKnowledgeGraphToolServiceFindPathsCIMKGTraversalDirection,
  newRestKnowledgeGraphToolServiceFindPathsFindPathsToolSettings,
  newRestNetworksSupportAggregatedGeometry,
  newRestNetworksSupportAssociation,
  newRestNetworksSupportAssociationGeometriesResult,
  newRestNetworksSupportFunctionResult,
  newRestNetworksSupportNetworkElement,
  newRestNetworksSupportQueryAssociationsParameters,
  newRestNetworksSupportQueryAssociationsResult,
  newRestNetworksSupportSynthesizeAssociationGeometriesParameters,
  newRestNetworksSupportTraceLocation,
  newRestNetworksSupportTraceParameters,
  newRestNetworksSupportTraceResult,
  newRestNetworksSupportValidateNetworkTopologyParameters,
  newRestQuerySupportAttachmentInfo,
  newRestSupportAddressCandidate,
  newRestSupportAlgorithmicColorRamp,
  newRestSupportArealUnit,
  newRestSupportAreasAndLengthsParameters,
  newRestSupportAttachmentQuery,
  newRestSupportAttributeBinsFeatureSet,
  newRestSupportAttributeBinsGrouping,
  newRestSupportAttributeBinsQuery,
  newRestSupportAutoIntervalBinParameters,
  newRestSupportBaseImageMeasureParameters,
  newRestSupportBaseImageMeasureResult,
  newRestSupportBufferParameters,
  newRestSupportCameraInfo,
  newRestSupportClosestFacilityParameters,
  newRestSupportClosestFacilitySolveResult,
  newRestSupportColorRamp,
  newRestSupportDataFile,
  newRestSupportDataLayer,
  newRestSupportDateBinParameters,
  newRestSupportDateBinTimeInterval,
  newRestSupportDensifyParameters,
  newRestSupportDirectionLine,
  newRestSupportDirectionPoint,
  newRestSupportDirectionsEvent,
  newRestSupportDirectionsFeature,
  newRestSupportDirectionsFeatureSet,
  newRestSupportDistanceParameters,
  newRestSupportFeatureSet,
  newRestSupportFetchPlaceParameters,
  newRestSupportFindImagesParameters,
  newRestSupportFindImagesResult,
  newRestSupportFindParameters,
  newRestSupportFindResult,
  newRestSupportFixedBoundariesBinParameters,
  newRestSupportFixedIntervalBinParameters,
  newRestSupportGPMessage,
  newRestSupportGeneralizeParameters,
  newRestSupportIdentifyParameters,
  newRestSupportIdentifyResult,
  newRestSupportImageAngleParameters,
  newRestSupportImageAngleResult,
  newRestSupportImageAreaParameters,
  newRestSupportImageAreaResult,
  newRestSupportImageBoundaryParameters,
  newRestSupportImageBoundaryResult,
  newRestSupportImageDistanceParameters,
  newRestSupportImageDistanceResult,
  newRestSupportImageGPSInfo,
  newRestSupportImageGPSInfoParameters,
  newRestSupportImageGPSInfoResult,
  newRestSupportImageHeightParameters,
  newRestSupportImageHeightResult,
  newRestSupportImageHistogramParameters,
  newRestSupportImageIdentifyParameters,
  newRestSupportImageIdentifyResult,
  newRestSupportImageInspectionInfo,
  newRestSupportImageParameters,
  newRestSupportImagePixelLocationParameters,
  newRestSupportImagePixelLocationResult,
  newRestSupportImagePointParameters,
  newRestSupportImagePointResult,
  newRestSupportImageSample,
  newRestSupportImageSampleParameters,
  newRestSupportImageSampleResult,
  newRestSupportImageToMapMultirayParameters,
  newRestSupportImageToMapParameters,
  newRestSupportImageUrlParameters,
  newRestSupportImageUrlResult,
  newRestSupportImageVolume,
  newRestSupportImageVolumeParameters,
  newRestSupportImageVolumeResult,
  newRestSupportJobInfo,
  newRestSupportLegendLayer,
  newRestSupportLengthsParameters,
  newRestSupportLinearUnit,
  newRestSupportMapToImageParameters,
  newRestSupportMeasureAreaFromImageResult,
  newRestSupportMeasureFromImageParameters,
  newRestSupportMeasureLengthFromImageResult,
  newRestSupportMultipartColorRamp,
  newRestSupportNAMessage,
  newRestSupportNetworkFeatureSet,
  newRestSupportNetworkUrl,
  newRestSupportOffsetParameters,
  newRestSupportParameterValue,
  newRestSupportPlaceResult,
  newRestSupportPlacesParameters,
  newRestSupportPlacesQueryParameters,
  newRestSupportPlacesQueryResult,
  newRestSupportPointBarrier,
  newRestSupportPolygonBarrier,
  newRestSupportPolylineBarrier,
  newRestSupportPrintParameters,
  newRestSupportPrintTemplate,
  newRestSupportProjectParameters,
  newRestSupportQuery,
  newRestSupportRasterData,
  newRestSupportRelationParameters,
  newRestSupportRelationshipQuery,
  newRestSupportRouteInfo,
  newRestSupportRouteParameters,
  newRestSupportRouteResult,
  newRestSupportRouteSolveResult,
  newRestSupportServiceAreaParameters,
  newRestSupportServiceAreaSolveResult,
  newRestSupportStatisticDefinition,
  newRestSupportStop,
  newRestSupportTopFeaturesQuery,
  newRestSupportTopFilter,
  newRestSupportTravelMode,
  newRestSupportTrimExtendParameters,
  newSupportActionsActionBase,
  newSupportActionsActionButton,
  newSupportActionsActionToggle,
  newSupportBasemapStyle,
  newSupportMapFloorInfo,
  newSymbolsCIMSymbol,
  newSymbolsCalloutsCallout3D,
  newSymbolsCalloutsLineCallout3D,
  newSymbolsEdgesEdges3D,
  newSymbolsEdgesSketchEdges3D,
  newSymbolsEdgesSolidEdges3D,
  newSymbolsExtrudeSymbol3DLayer,
  newSymbolsFillSymbol,
  newSymbolsFillSymbol3DLayer,
  newSymbolsFont,
  newSymbolsIconSymbol3DLayer,
  newSymbolsLabelSymbol3D,
  newSymbolsLineStyleMarker3D,
  newSymbolsLineSymbol,
  newSymbolsLineSymbol3D,
  newSymbolsLineSymbol3DLayer,
  newSymbolsLineSymbolMarker,
  newSymbolsMarkerSymbol,
  newSymbolsMeshSymbol3D,
  newSymbolsObjectSymbol3DLayer,
  newSymbolsPathSymbol3DLayer,
  newSymbolsPatternsLineStylePattern3D,
  newSymbolsPatternsStylePattern3D,
  newSymbolsPictureFillSymbol,
  newSymbolsPictureMarkerSymbol,
  newSymbolsPointSymbol3D,
  newSymbolsPolygonSymbol3D,
  newSymbolsSimpleFillSymbol,
  newSymbolsSimpleLineSymbol,
  newSymbolsSimpleMarkerSymbol,
  newSymbolsSupportStyleOrigin,
  newSymbolsSupportSymbol3DVerticalOffset,
  newSymbolsSymbol,
  newSymbolsSymbol3D,
  newSymbolsSymbol3DLayer,
  newSymbolsTextSymbol,
  newSymbolsTextSymbol3DLayer,
  newSymbolsWaterSymbol3DLayer,
  newSymbolsWebStyleSymbol,
  newTablesAttributeTableTemplate,
  newTablesElementsAttributeTableAttachmentElement,
  newTablesElementsAttributeTableElement,
  newTablesElementsAttributeTableFieldElement,
  newTablesElementsAttributeTableGroupElement,
  newTablesElementsAttributeTableRelationshipElement,
  newTimeExtent,
  newTimeInterval,
  newTimeTimeExtent,
  newTimeTimeInterval,
  newVersionManagementVersionManagementService,
  newVersionManagementVersioningState,
  newViewpoint,
  newViews2dLayersBaseLayerView2D,
  newViews2dLayersBaseLayerViewGL2D,
  newViews2dViewState,
  newViews3dAnalysisAreaMeasurementAnalysisView3D,
  newViews3dAnalysisDirectLineMeasurementAnalysisView3D,
  newViews3dAnalysisLineOfSightAnalysisResult,
  newViews3dAnalysisLineOfSightAnalysisView3D,
  newViews3dAnalysisSliceAnalysisView3D,
  newViews3dAnalysisViewshedAnalysisView3D,
  newViews3dEnvironmentCloudyWeather,
  newViews3dEnvironmentFoggyWeather,
  newViews3dEnvironmentRainyWeather,
  newViews3dEnvironmentSnowyWeather,
  newViews3dEnvironmentSunLighting,
  newViews3dEnvironmentSunnyWeather,
  newViews3dEnvironmentVirtualLighting,
  newViews3dWebglRenderNode,
  newViewsAnalysisDimensionAnalysisView,
  newViewsBasemapView,
  newViewsDrawDraw,
  newViewsDrawDrawAction,
  newViewsDrawMultipointDrawAction,
  newViewsDrawPointDrawAction,
  newViewsDrawPolygonDrawAction,
  newViewsDrawPolylineDrawAction,
  newViewsDrawSegmentDrawAction,
  newViewsGroundView,
  newViewsInputGamepadGamepadInputDevice,
  newViewsInputGamepadGamepadSettings,
  newViewsInputInput,
  newViewsInteractiveSketchSketchLabelOptions,
  newViewsInteractiveSketchSketchTooltipOptions,
  newViewsInteractiveSketchSketchValueOptions,
  newViewsInteractiveSnappingFeatureSnappingLayerSource,
  newViewsInteractiveSnappingSnappingOptions,
  newViewsInteractiveTooltip,
  newViewsLayersBuildingComponentSublayerView,
  newViewsLayersBuildingSceneLayerView,
  newViewsLayersCatalogDynamicGroupLayerView,
  newViewsLayersCatalogFootprintLayerView,
  newViewsLayersCatalogLayerView,
  newViewsLayersDimensionLayerView,
  newViewsLayersFeatureLayerView,
  newViewsLayersGroupLayerView,
  newViewsLayersImageryLayerView,
  newViewsLayersImageryTileLayerView,
  newViewsLayersLayerView,
  newViewsLayersMediaLayerView,
  newViewsLayersOGCFeatureLayerView,
  newViewsLayersSceneLayerView,
  newViewsLayersStreamLayerView,
  newViewsLayersViewshedLayerView,
  newViewsLinkChartView,
  newViewsMagnifier,
  newViewsMapView,
  newViewsNavigationGamepadGamepadSettings,
  newViewsNavigationNavigation,
  newViewsNavigationNavigationActionMap,
  newViewsSceneView,
  newViewsSupportHighlightOptions,
  newViewsTheme,
  newViewsUiDefaultUI,
  newViewsUiUI,
  newViewsView,
  newViewsView2D,
  newViewsViewAnimation,
  newWebDocument2D,
  newWebLinkChart,
  newWebMap,
  newWebScene,
  newWebdocApplicationPropertiesSearch,
  newWebdocApplicationPropertiesSearchLayer,
  newWebdocApplicationPropertiesSearchLayerField,
  newWebdocApplicationPropertiesSearchTable,
  newWebdocApplicationPropertiesSearchTableField,
  newWebdocApplicationPropertiesViewing,
  newWebdocGeotriggersInfo,
  newWebdocGeotriggersInfoDeviceLocationFeed,
  newWebdocGeotriggersInfoExpressionInfo,
  newWebdocGeotriggersInfoFeatureFenceParameters,
  newWebdocGeotriggersInfoFeatureFilter,
  newWebdocGeotriggersInfoFeatureLayerSource,
  newWebdocGeotriggersInfoFenceGeotrigger,
  newWebdocGeotriggersInfoGeotrigger,
  newWebdocGeotriggersInfoGeotriggerNotificationOptions,
  newWebdocIPSInfo,
  newWebdocIpsPositioningService,
  newWebdocWidgetsTimeSlider,
  newWebmapApplicationProperties,
  newWebmapBackgroundColorBackground,
  newWebmapBookmark,
  newWebmapInitialViewProperties,
  newWebsceneApplicationProperties,
  newWebsceneBackgroundBackground,
  newWebsceneBackgroundColorBackground,
  newWebsceneEnvironment,
  newWebsceneInitialViewProperties,
  newWebscenePresentation,
  newWebsceneSlide,
  newWebsceneSlideLegendInfo,
  newWebsceneSunLighting,
  newWebsceneVirtualLighting,
  newWidgetsAreaMeasurement2D,
  newWidgetsAreaMeasurement2DAreaMeasurement2DViewModel,
  newWidgetsAreaMeasurement3D,
  newWidgetsAreaMeasurement3DAreaMeasurement3DViewModel,
  newWidgetsAttachments,
  newWidgetsAttachmentsAttachmentsViewModel,
  newWidgetsAttribution,
  newWidgetsAttributionAttributionViewModel,
  newWidgetsBasemapGallery,
  newWidgetsBasemapGalleryBasemapGalleryViewModel,
  newWidgetsBasemapGallerySupportBasemapGalleryItem,
  newWidgetsBasemapGallerySupportLocalBasemapsSource,
  newWidgetsBasemapGallerySupportPortalBasemapsSource,
  newWidgetsBasemapLayerList,
  newWidgetsBasemapLayerListBasemapLayerListViewModel,
  newWidgetsBasemapToggle,
  newWidgetsBasemapToggleBasemapToggleViewModel,
  newWidgetsBatchAttributeForm,
  newWidgetsBookmarks,
  newWidgetsBookmarksBookmarksViewModel,
  newWidgetsBuildingExplorer,
  newWidgetsBuildingExplorerBuildingExplorerViewModel,
  newWidgetsBuildingExplorerBuildingLevel,
  newWidgetsBuildingExplorerBuildingPhase,
  newWidgetsCatalogLayerList,
  newWidgetsCatalogLayerListCatalogLayerListViewModel,
  newWidgetsCompass,
  newWidgetsCompassCompassViewModel,
  newWidgetsCoordinateConversion,
  newWidgetsCoordinateConversionCoordinateConversionViewModel,
  newWidgetsCoordinateConversionSupportConversion,
  newWidgetsCoordinateConversionSupportFormat,
  newWidgetsDaylight,
  newWidgetsDaylightDaylightViewModel,
  newWidgetsDirectLineMeasurement3D,
  newWidgetsDirectLineMeasurement3DDirectLineMeasurement3DViewModel,
  newWidgetsDirectionalPad,
  newWidgetsDirectionalPadDirectionalPadViewModel,
  newWidgetsDirections,
  newWidgetsDirectionsDirectionsViewModel,
  newWidgetsDistanceMeasurement2D,
  newWidgetsDistanceMeasurement2DDistanceMeasurement2DViewModel,
  newWidgetsEditor,
  newWidgetsEditorCreateFeaturesWorkflow,
  newWidgetsEditorCreateFeaturesWorkflowData,
  newWidgetsEditorEditorViewModel,
  newWidgetsEditorEdits,
  newWidgetsEditorSupportEditorItem,
  newWidgetsEditorUpdateWorkflow,
  newWidgetsEditorUpdateWorkflowData,
  newWidgetsEditorWorkflow,
  newWidgetsElevationProfile,
  newWidgetsElevationProfileElevationProfileLine,
  newWidgetsElevationProfileElevationProfileLineGround,
  newWidgetsElevationProfileElevationProfileLineInput,
  newWidgetsElevationProfileElevationProfileLineQuery,
  newWidgetsElevationProfileElevationProfileLineView,
  newWidgetsElevationProfileElevationProfileViewModel,
  newWidgetsExpand,
  newWidgetsExpandExpandViewModel,
  newWidgetsFeature,
  newWidgetsFeatureFeatureViewModel,
  newWidgetsFeatureForm,
  newWidgetsFeatureFormFeatureFormViewModel,
  newWidgetsFeatureFormFieldInput,
  newWidgetsFeatureFormGroupInput,
  newWidgetsFeatureFormRelationshipInput,
  newWidgetsFeatureFormTextElementInput,
  newWidgetsFeatureFormUtilityNetworkAssociationInput,
  newWidgetsFeatureTable,
  newWidgetsFeatureTableActionColumn,
  newWidgetsFeatureTableAttachmentsColumn,
  newWidgetsFeatureTableFeatureTableViewModel,
  newWidgetsFeatureTableFieldColumn,
  newWidgetsFeatureTableGridColumn,
  newWidgetsFeatureTableGridGroupColumn,
  newWidgetsFeatureTableGridSupportButtonMenu,
  newWidgetsFeatureTableGridSupportButtonMenuItem,
  newWidgetsFeatureTableGridSupportButtonMenuViewModel,
  newWidgetsFeatureTableRelationshipColumn,
  newWidgetsFeatureTableSupportAttachmentsColumnTemplate,
  newWidgetsFeatureTableSupportColumnTemplate,
  newWidgetsFeatureTableSupportColumnTemplateBase,
  newWidgetsFeatureTableSupportFieldColumnTemplate,
  newWidgetsFeatureTableSupportGroupColumnTemplate,
  newWidgetsFeatureTableSupportRelationshipColumnTemplate,
  newWidgetsFeatureTableSupportTableTemplate,
  newWidgetsFeatureTemplates,
  newWidgetsFeatureTemplatesFeatureTemplatesViewModel,
  newWidgetsFeatureTemplatesTemplateItem,
  newWidgetsFeatureTemplatesTemplateItemGroup,
  newWidgetsFeatures,
  newWidgetsFeaturesFeaturesViewModel,
  newWidgetsFloorFilter,
  newWidgetsFloorFilterFloorFilterViewModel,
  newWidgetsFullscreen,
  newWidgetsFullscreenFullscreenViewModel,
  newWidgetsHistogram,
  newWidgetsHistogramHistogramViewModel,
  newWidgetsHistogramRangeSlider,
  newWidgetsHistogramRangeSliderHistogramRangeSliderViewModel,
  newWidgetsHome,
  newWidgetsHomeHomeViewModel,
  newWidgetsLayerList,
  newWidgetsLayerListLayerListViewModel,
  newWidgetsLayerListListItem,
  newWidgetsLayerListListItemPanel,
  newWidgetsLegend,
  newWidgetsLegendLegendViewModel,
  newWidgetsLegendSupportActiveLayerInfo,
  newWidgetsLineOfSight,
  newWidgetsLineOfSightLineOfSightTarget,
  newWidgetsLineOfSightLineOfSightViewModel,
  newWidgetsLinkChartLayoutSwitcherLinkChartLayoutSwitcherViewModel,
  newWidgetsLocate,
  newWidgetsLocateLocateViewModel,
  newWidgetsMeasurement,
  newWidgetsMeasurementMeasurementViewModel,
  newWidgetsNavigationToggle,
  newWidgetsNavigationToggleNavigationToggleViewModel,
  newWidgetsOrientedImageryViewer,
  newWidgetsOrientedImageryViewerOrientedImageryViewerViewModel,
  newWidgetsPopup,
  newWidgetsPopupPopupViewModel,
  newWidgetsPrint,
  newWidgetsPrintCustomTemplate,
  newWidgetsPrintPrintViewModel,
  newWidgetsPrintTemplateOptions,
  newWidgetsScaleBar,
  newWidgetsScaleBarScaleBarViewModel,
  newWidgetsScaleRangeSlider,
  newWidgetsScaleRangeSliderScaleRangeSliderViewModel,
  newWidgetsScaleRangeSliderScaleRanges,
  newWidgetsSearch,
  newWidgetsSearchLayerSearchSource,
  newWidgetsSearchLocatorSearchSource,
  newWidgetsSearchSearchResultRenderer,
  newWidgetsSearchSearchSource,
  newWidgetsSearchSearchViewModel,
  newWidgetsShadowCast,
  newWidgetsShadowCastShadowCastViewModel,
  newWidgetsSketch,
  newWidgetsSketchSketchViewModel,
  newWidgetsSlice,
  newWidgetsSliceSliceViewModel,
  newWidgetsSlider,
  newWidgetsSliderSliderViewModel,
  newWidgetsSmartMappingBinaryColorSizeSlider,
  newWidgetsSmartMappingBinaryColorSizeSliderBinaryColorSizeSliderViewModel,
  newWidgetsSmartMappingClassedColorSlider,
  newWidgetsSmartMappingClassedColorSliderClassedColorSliderViewModel,
  newWidgetsSmartMappingClassedSizeSlider,
  newWidgetsSmartMappingClassedSizeSliderClassedSizeSliderViewModel,
  newWidgetsSmartMappingColorSizeSlider,
  newWidgetsSmartMappingColorSizeSliderColorSizeSliderViewModel,
  newWidgetsSmartMappingColorSlider,
  newWidgetsSmartMappingColorSliderColorSliderViewModel,
  newWidgetsSmartMappingHeatmapSlider,
  newWidgetsSmartMappingHeatmapSliderHeatmapSliderViewModel,
  newWidgetsSmartMappingOpacitySlider,
  newWidgetsSmartMappingOpacitySliderOpacitySliderViewModel,
  newWidgetsSmartMappingSizeSlider,
  newWidgetsSmartMappingSizeSliderSizeSliderViewModel,
  newWidgetsSmartMappingSmartMappingPrimaryHandleSliderViewModel,
  newWidgetsSmartMappingSmartMappingSliderBase,
  newWidgetsSmartMappingSmartMappingSliderViewModel,
  newWidgetsSupportGridControls,
  newWidgetsSupportGridControlsGridControlsViewModel,
  newWidgetsSupportSnappingControls,
  newWidgetsSupportSnappingControlsSnappingControlsViewModel,
  newWidgetsSwipe,
  newWidgetsSwipeSwipeViewModel,
  newWidgetsTableList,
  newWidgetsTableListListItem,
  newWidgetsTableListListItemPanel,
  newWidgetsTableListTableListViewModel,
  newWidgetsTimeSlider,
  newWidgetsTimeSliderTimeSliderViewModel,
  newWidgetsTimeZoneLabel,
  newWidgetsTrack,
  newWidgetsTrackTrackViewModel,
  newWidgetsUtilityNetworkAssociations,
  newWidgetsUtilityNetworkAssociationsUtilityNetworkAssociationsViewModel,
  newWidgetsUtilityNetworkTrace,
  newWidgetsUtilityNetworkTraceAnalysisUtilityNetworkTraceAnalysisViewModel,
  newWidgetsUtilityNetworkTraceUtilityNetworkTraceViewModel,
  newWidgetsUtilityNetworkValidateTopology,
  newWidgetsUtilityNetworkValidateTopologyUtilityNetworkValidateTopologyViewModel,
  newWidgetsValuePicker,
  newWidgetsValuePickerValuePickerCollection,
  newWidgetsValuePickerValuePickerCombobox,
  newWidgetsValuePickerValuePickerLabel,
  newWidgetsValuePickerValuePickerSlider,
  newWidgetsVersionManagementVersionManagementViewModel,
  newWidgetsVideoPlayer,
  newWidgetsVideoPlayerVideoPlayerViewModel,
  newWidgetsWeather,
  newWidgetsWeatherWeatherViewModel,
  newWidgetsWidget,
  newWidgetsZoom,
  newWidgetsZoomZoomViewModel
});
