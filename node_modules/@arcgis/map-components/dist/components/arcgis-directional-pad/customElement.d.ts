/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as DirectionalPadViewModel } from '@arcgis/core/widgets/DirectionalPad/DirectionalPadViewModel.js';
import { JsxNode, ToElement, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useDirectionalPadViewModel: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<DirectionalPadViewModel, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "disabled" | "moving" | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    position: __esri.UIPosition;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): unknown;
} | undefined) => DirectionalPadViewModel;
/**
 * A directional pad (D-Pad) component can be used to control the position and
 * rotation of the map. The D-Pad provides eight directions of movement, a small
 * compass which indicates the current orientation of the map and a slider for
 * rotating the map.
 *
 * It is also possible to disable the map's rotation controls or change the size
 * of the component.
 *
 * The Directional Pad component is not supported in 3D.
 */
export declare class ArcgisDirectionalPad extends LitElement {
    private messages;
    /**
     * If true, the component will not be destroyed automatically when
     * it is disconnected from the document. This is useful when you
     * want to move the component to a different place on the page, or
     * temporary hide it. If this is set, make sure to call the
     * \`destroy\` method when you are done to prevent memory leaks.
     */
    autoDestroyDisabled: boolean;
    /**
     * Indicates whether interaction is allowed on the component. When `true`,
     * this property sets the component to a disabled state to disable any user
     * interaction.
     */
    disabled: boolean;
    /**
     * Whether to hide directional pad buttons.
     */
    hideDirectionalButtons: boolean;
    /**
     * Icon which represents the component. It is typically used when the
     * component is controlled by another one (e.g. in the arcgis-expand
     * component).
     *
     * @see [Calcite Icon Search](https://developers.arcgis.com/calcite-design-system/icons/)
     */
    icon: Nil | string;
    /** The component's default label. */
    label: Nil | string;
    /** Overwrite localized strings for this component */
    messageOverrides?: typeof this.messages._overrides;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    /**
     * Whether to display the button to reset the rotation angle. This only takes
     * effect if showRotationSlider is true.
     */
    showRotationResetButton: boolean;
    /**
     * Whether to display the map rotation slider.
     */
    showRotationSlider: boolean;
    /**
     * The current state of the component.
     */
    readonly state: "ready" | "disabled" | "moving";
    /**
     * Determines the size of directional pad buttons and the slider.
     *
     * In addition to this parameter, you can set the width on the component
     * container to dictate directional pad size.
     */
    visualScale: HTMLCalciteButtonElement["scale"];
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
}
export {};
