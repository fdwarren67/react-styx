/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as Editor } from '@arcgis/core/widgets/Editor.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useEditorWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<Editor, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.EditorViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.EditorProperties | undefined): __esri.EditorProperties | Promise<__esri.EditorProperties | undefined> | undefined;
} | undefined) => Editor;
/** The Editor component provides an out-of-the-box editing experience to help streamline editing within a web application.
 */
export declare class ArcgisEditor extends LitElement {
    readonly activeWorkflow: nullish | __esri.CreateFeaturesWorkflow | __esri.UpdateWorkflow;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    headingLevel: number;
    hideCreateFeaturesSection: boolean;
    hideEditFeaturesSection: boolean;
    hideLabelsToggle: boolean;
    hideSnappingControlsElementsEnabledToggle: boolean;
    hideSnappingControlsElementsFeatureEnabledToggle: boolean;
    hideSnappingControlsElementsLayerList: boolean;
    hideSnappingControlsElementsSelfEnabledToggle: boolean;
    hideTooltipsToggle: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    /** The component's default label. */
    label: string;
    labelOptions: __esri.SketchLabelOptions;
    layerInfos: nullish | __esri.EditorLayerInfo[];
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    showSnappingControlsElementsHeader: boolean;
    snappingOptions: __esri.SnappingOptions;
    readonly state: "ready" | "disabled" | "add-association-create-association" | "add-association-select-feature" | "add-association-select-layer" | "adding-attachment" | "awaiting-feature-creation-info" | "awaiting-feature-to-create" | "awaiting-feature-to-update" | "awaiting-update-feature-candidate" | "creating-features" | "editing-attributes" | "editing-attachment" | "editing-existing-feature" | "editing-new-feature";
    supportingWidgetDefaults: nullish | __esri.SupportingWidgetDefaults;
    tooltipOptions: __esri.SketchTooltipOptions;
    cancelWorkflow(): Promise<void>;
    deleteFeatureFromWorkflow(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    startCreateFeaturesWorkflowAtFeatureCreation(info: __esri.CreateFeaturesCreationInfo): Promise<void>;
    startCreateFeaturesWorkflowAtFeatureTypeSelection(): Promise<void>;
    startUpdateWorkflowAtFeatureEdit(feature: __esri.Graphic): Promise<void>;
    startUpdateWorkflowAtFeatureSelection(): Promise<void>;
    startUpdateWorkflowAtMultipleFeatureSelection(candidates: __esri.Graphic[]): Promise<void>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state" | "activeWorkflow";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
}
export {};
