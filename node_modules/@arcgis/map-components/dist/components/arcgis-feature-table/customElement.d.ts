/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as FeatureTable } from '@arcgis/core/widgets/FeatureTable.js';
import { PublicLitElement as LitElement, ToElement, TargetedEvent } from '@arcgis/lumina';
import { PropertyValues } from 'lit';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useFeatureTableWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<FeatureTable, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "loaded" | "ready" | "loading" | "disabled" | "error" | undefined;
    viewModel?: __esri.FeatureTableViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.FeatureTableProperties | undefined): __esri.FeatureTableProperties | Promise<__esri.FeatureTableProperties | undefined> | undefined;
} | undefined) => FeatureTable;
/** The Feature Table component provides an interactive tabular view of each feature's attributes in a feature layer.
 */
export declare class ArcgisFeatureTable extends LitElement {
    attributeTableTemplate: nullish | __esri.AttributeTableTemplate;
    actionColumnConfig: nullish | __esri.ActionColumnConfig;
    /**
     * A read-only property indicating the type of filter used by the table.
     * It returns either filters by geometry or selections using a row's object ID.
     */
    readonly activeFilters: __esri.Collection<__esri.GeometryFilter | __esri.SelectionFilter>;
    /**
     * Use this read-only property if needing to query features while retaining
     * a column's sort order.
     */
    readonly activeSortOrders: __esri.ColumnSortOrder[];
    /** Indicates the table is displaying all related tables in "show all" mode. */
    readonly allRelatedTablesVisible: boolean;
    attachmentsEnabled: boolean;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    /**
     * Indicates whether the table should automatically refresh when the underlying data changes
     *
     * @default false
     */
    autoRefreshDisabled: boolean;
    /**
     * Indicates whether the table should allow reordering of columns.
     *
     * @default false
     */
    columnReorderingDisabled: boolean;
    /**
     * A read-only collection of column, field, group, action, attachment,
     * and relationship columns that are displayed within the table.
     */
    readonly columns: __esri.Collection<__esri.Column | __esri.FieldColumn | __esri.GroupColumn | __esri.ActionColumn | __esri.AttachmentsColumn | __esri.RelationshipColumn>;
    description: string | Function | nullish;
    editingEnabled: boolean;
    /**
     * Total number of records displayed in the table's current view.
     */
    readonly effectiveSize: number;
    filterBySelectionEnabled: boolean;
    filterGeometry: nullish | __esri.GeometryUnion;
    /** Indicates whether to display descriptions in the header cells of individual columns. */
    hideColumnDescriptions: boolean | undefined;
    hiddenFields: __esri.Collection<string>;
    /** Indicates whether to display the Sort Ascending menu item. */
    hideColumnMenuItemsSortAscending: boolean | undefined;
    /** Indicates whether to display the Sort Descending menu item. */
    hideColumnMenuItemsSortDescending: boolean | undefined;
    /** Indicates whether to display the menu items within the individual columns */
    hideColumnMenus: boolean | undefined;
    /** Indicates whether to display the feature table's header information. */
    hideHeader: boolean | undefined;
    /** Indicates whether to display the feature table's menu. */
    hideMenu: boolean | undefined;
    /** Indicates whether to display the Clear selection menu item. */
    hideMenuItemsClearSelection: boolean | undefined;
    /** Indicates whether to display the Delete Selection menu item. */
    hideMenuItemsDeleteSelection: boolean | undefined;
    /** Indicates whether to display the Export selection to CSV menu item. */
    hideMenuItemsExportSelectionToCsv: boolean | undefined;
    /** Indicates whether to display the Refresh data menu item. */
    hideMenuItemsRefreshData: boolean | undefined;
    /** Indicates whether to toggle between showing only selected records in the table to showing all of the records. */
    hideMenuItemsSelectedRecordsShowAllToggle: boolean | undefined;
    /** Indicates whether to display the Show selected records menu item. */
    hideMenuItemsSelectedRecordsShowSelectedToggle: boolean | undefined;
    /** Indicates whether to enable toggling column visibility within the menu. */
    hideMenuItemsToggleColumns: boolean | undefined;
    /** Indicates whether to display the Zoom to selected menu item. */
    hideMenuItemsZoomToSelection: boolean | undefined;
    /** Indicates whether to display the progress indicator when the table is querying or syncing data. */
    hideProgress: boolean | undefined;
    /**
     * Indicates whether to display the selection column in the table.
     * Each row has a checkbox that selects its corresponding feature.
     */
    hideSelectionColumn: boolean | undefined;
    /** Indicates whether to display the tooltip for the Show/hide columns button. */
    hideTooltips: boolean | undefined;
    /** @default false */
    highlightDisabled: boolean;
    highlightIds: __esri.Collection<string | number>;
    initialSize: number | nullish;
    /** Icon which represents the component. */
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    /** A read-only property which indicates if the table is querying or syncing data. */
    readonly isQueryingOrSyncing: boolean;
    /** The components label. */
    label: string;
    layer: __esri.FeatureLayer | __esri.SceneLayer | __esri.GeoJSONLayer | __esri.OrientedImageryLayer | nullish | __esri.WFSLayer | __esri.CSVLayer | __esri.ImageryLayer | __esri.Sublayer | __esri.CatalogFootprintLayer | __esri.KnowledgeGraphSublayer;
    /**
     * Portal Item Id for a layer to load. You can set, `layer`, `layerUrl`, or `itemId`,
     * but not more than one.
     */
    layerItemId?: string;
    /**
     * Url for a layer to load. You can set, `layer`, `layerUrl`, or `itemId`,
     * but not more than one.
     */
    layerUrl?: string;
    /** The layer view associated with the table's layer. */
    readonly layerView: nullish | __esri.LayerView;
    /**
     * Group of layers displayed in the dropdown component in the table's header,
     * which allows changing what layer is currently displayed in the table.
     */
    layers: nullish | (__esri.FeatureLayer | __esri.SceneLayer | __esri.GeoJSONLayer | __esri.WFSLayer | __esri.CSVLayer | __esri.ImageryLayer | __esri.CatalogFootprintLayer | __esri.KnowledgeGraphSublayer)[];
    maxSize: number | nullish;
    menuConfig: nullish | __esri.TableMenuConfig;
    /** @default false */
    multipleSelectionDisabled: boolean;
    /** Indicates whether sorting multiple columns is supported within the table. */
    multipleSortEnabled: boolean;
    objectIds: __esri.Collection<string | number>;
    outFields: nullish | string[];
    readonly pageCount: number;
    pageIndex: number;
    pageSize: number;
    paginationEnabled: boolean;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    relatedRecordsEnabled: boolean;
    /**
     * Reference to a nested table instance representing a relationship with another table.
     */
    relatedTable: nullish | FeatureTable;
    relatedTables: __esri.Collection<FeatureTable>;
    returnGeometryEnabled: boolean;
    returnMEnabled: boolean;
    returnZEnabled: boolean;
    rowHighlightIds: __esri.Collection<string | number>;
    /** Total number of records currently displayed in the table. */
    readonly size: number;
    /** Indicates whether to display the feature table's layer switch drop down menu. */
    showLayerDropdown: boolean | undefined;
    readonly state: "loaded" | "ready" | "loading" | "disabled" | "error";
    /**
     * Reference to top-level controller table, if this table is a related table, nested within and controlled by another table.
     */
    tableController: nullish | FeatureTable;
    tableDisabled: boolean;
    /**
     *  Reference to a table instance that this table is directly related to.
     */
    tableParent: nullish | FeatureTable;
    tableTemplate: nullish | __esri.TableTemplate;
    timeExtent: nullish | __esri.TimeExtent;
    timeZone: string | nullish;
    deleteSelection(showWarningPrompt?: boolean): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    exportSelectionToCSV(includeGeometry?: boolean): Promise<void>;
    findColumn(fieldName: string): Promise<__esri.ActionColumn | __esri.AttachmentsColumn | __esri.Column | __esri.GroupColumn | __esri.RelationshipColumn | nullish>;
    goToPage(index: number): Promise<void>;
    hideColumn(fieldName: string): Promise<void>;
    nextPage(): Promise<void>;
    previousPage(): Promise<void>;
    refresh(): Promise<void>;
    scrollToBottom(): Promise<void>;
    scrollToIndex(index: number): Promise<void>;
    scrollToLeft(): Promise<void>;
    scrollToRow(objectId: number): Promise<void>;
    scrollToTop(): Promise<void>;
    showAllColumns(): Promise<void>;
    showColumn(fieldName: string): Promise<void>;
    sortColumn(path: string, direction: "asc" | "desc"): Promise<void>;
    zoomToSelection(): Promise<void>;
    readonly arcgisCellClick: TargetedEvent<this, __esri.FeatureTableCellClickEvent>;
    readonly arcgisCellKeydown: TargetedEvent<this, __esri.FeatureTableCellKeydownEvent>;
    readonly arcgisCellPointerout: TargetedEvent<this, __esri.FeatureTableCellPointeroutEvent>;
    readonly arcgisCellPointerover: TargetedEvent<this, __esri.FeatureTableCellPointeroverEvent>;
    readonly arcgisColumnReorder: TargetedEvent<this, __esri.FeatureTableColumnReorderEvent>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "size" | "state" | "effectiveSize" | "isQueryingOrSyncing" | "layerView";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
    readonly arcgisSelectionChange: TargetedEvent<this, __esri.CollectionChangeEvent<string | number>>;
}
export {};
