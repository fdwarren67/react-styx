/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as Features } from '@arcgis/core/widgets/Features.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useFeaturesWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<Features, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.FeaturesViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.FeaturesProperties | undefined): __esri.FeaturesProperties | Promise<__esri.FeaturesProperties | undefined> | undefined;
} | undefined) => Features;
/** Features component allows users to view a feature's popupTemplate content such as attributes, actions, related records, etc., without having to be tied to the [View](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html).
 */
export declare class ArcgisFeatures extends LitElement {
    actions: __esri.Collection<__esri.ActionButton | __esri.ActionToggle>;
    readonly active: boolean;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    collapsed: boolean;
    content: string | HTMLElement | nullish | __esri.Widget;
    featureNavigationTop: boolean;
    featureViewModelAbilities: nullish | __esri.Abilities;
    features: __esri.Graphic[];
    featuresPerPage: number;
    featuresTitle: string | nullish;
    goToOverride: nullish | __esri.GoToOverride;
    headingLevel: number;
    headerActions: __esri.Collection<__esri.ActionBase>;
    hideActionBar: boolean;
    hideCloseButton: boolean;
    hideFeatureMenuHeading: boolean;
    hideFeatureNavigation: boolean;
    hideFlow: boolean;
    hideHeading: boolean;
    hideSpinner: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string | nullish;
    includeDefaultActions: boolean;
    initialDisplayMode: "feature" | "list";
    /** The component's default label. */
    label: string;
    map: __esri.Map | nullish;
    position: __esri.UIPosition;
    promises: Promise<any>[];
    referenceElement: ArcgisReferenceElement | Nil | string;
    readonly selectedFeature: nullish | __esri.Graphic;
    selectedFeatureIndex: number;
    showCollapseButton: boolean;
    spatialReference: nullish | __esri.SpatialReference;
    readonly state: "ready" | "disabled";
    timeZone: string;
    clear(): Promise<void>;
    close(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    fetchFeatures(screenPoint: __esri.FeaturesFetchFeaturesScreenPoint, options?: __esri.FetchFeaturesOptions): Promise<__esri.FetchPopupFeaturesResult>;
    next(): Promise<__esri.FeaturesViewModel>;
    open(options?: __esri.FeaturesOpenOptions): Promise<void>;
    previous(): Promise<__esri.FeaturesViewModel>;
    triggerAction(actionIndex: number): Promise<void>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state" | "selectedFeature" | "selectedFeatureIndex";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
    readonly arcgisTriggerAction: TargetedEvent<this, __esri.FeaturesTriggerActionEvent>;
}
export {};
