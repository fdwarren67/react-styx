/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as HistogramRangeSlider } from '@arcgis/core/widgets/HistogramRangeSlider.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useHistogramRangeSliderWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<HistogramRangeSlider, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.HistogramRangeSliderViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.HistogramRangeSliderProperties | undefined): __esri.HistogramRangeSliderProperties | Promise<__esri.HistogramRangeSliderProperties | undefined> | undefined;
} | undefined) => HistogramRangeSlider;
/**
 * @internal
 */
export declare class ArcgisHistogramRangeSlider extends LitElement {
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    average: number | nullish;
    barCreatedFunction: nullish | __esri.BarCreatedFunction;
    bins: nullish | __esri.Bin[];
    dataLineCreatedFunction: nullish | __esri.DataLineCreatedFunction;
    dataLines: nullish | __esri.HistogramRangeSliderDataLines[];
    excludedBarColor: __esri.Color;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    includedBarColor: __esri.Color;
    /** The component's default label. */
    label: string;
    labelFormatFunction: __esri.SliderLabelFormatter;
    max: number | nullish;
    min: number | nullish;
    position: __esri.UIPosition;
    precision: number;
    rangeType: "equal" | "not-equal" | "less-than" | "greater-than" | "at-most" | "at-least" | "between" | "not-between";
    referenceElement: ArcgisReferenceElement | Nil | string;
    standardDeviation: number | nullish;
    standardDeviationCount: number;
    readonly state: "ready" | "disabled";
    values: nullish | number[];
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    /**
     * Generates a SQL where clause based on a given field and the slider's
     * rangeType
     */
    generateWhereClause(field: string): Promise<nullish | string>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
}
export {};
