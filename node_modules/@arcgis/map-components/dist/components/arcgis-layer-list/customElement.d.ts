/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as LayerList } from '@arcgis/core/widgets/LayerList.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useLayerListWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<LayerList, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.LayerListViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.LayerListProperties | undefined): __esri.LayerListProperties | Promise<__esri.LayerListProperties | undefined> | undefined;
} | undefined) => LayerList;
/** The Layer List component provides a way to display a list of layers, and switch on/off their visibility.
 */
export declare class ArcgisLayerList extends LitElement {
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    /** The CatalogLayerList that displays a catalog layer's dynamic group layer. */
    get catalogLayerList(): __esri.CatalogLayerList | nullish;
    catalogOptions: nullish | __esri.LayerListCatalogOptions;
    collapsed: boolean;
    dragEnabled: boolean;
    filterPlaceholder: string;
    filterPredicate: nullish | __esri.LayerListFilterPredicate;
    filterText: string;
    headingLevel: number;
    hideCatalogLayerList: boolean;
    hideFlow: boolean;
    hideStatusIndicators: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    knowledgeGraphOptions: nullish | __esri.LayerListKnowledgeGraphOptions;
    /** The component's default label. */
    label: string;
    listItemCreatedFunction: nullish | __esri.LayerListListItemCreatedHandler;
    minDragEnabledItems: number;
    minFilterItems: number;
    readonly openedLayers: __esri.Collection<__esri.Layer>;
    /** A collection of ListItems representing operational layers. */
    get operationalItems(): __esri.Collection<__esri.ListItem>;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    selectedItems: __esri.Collection<__esri.ListItem>;
    selectionMode: "none" | "single" | "multiple" | "single-persist";
    showCloseButton: boolean;
    showCollapseButton: boolean;
    showErrors: boolean;
    showFilter: boolean;
    showHeading: boolean;
    showTemporaryLayerIndicators: boolean;
    readonly state: "ready" | "loading" | "disabled";
    /** The TableList that displays the tables associated with a KnowledgeGraphLayer. */
    get tableList(): __esri.TableList | nullish;
    visibilityAppearance: "default" | "checkbox";
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    triggerAction(action: __esri.ActionButton | __esri.ActionToggle, item: __esri.ListItem): Promise<void>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
    readonly arcgisTriggerAction: TargetedEvent<this, __esri.LayerListTriggerActionEvent>;
}
export {};
