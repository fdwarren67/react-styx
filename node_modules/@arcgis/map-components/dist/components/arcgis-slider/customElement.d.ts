/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/components-controllers';
import { Nil } from '@arcgis/components-utils';
import { default as Slider } from '@arcgis/core/widgets/Slider.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useSliderWidget: (component: import('@arcgis/components-controllers').StencilLifecycles & {
    manager: import('@arcgis/components-controllers').ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<Slider, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "disabled" | "editing" | "dragging" | undefined;
    viewModel?: __esri.SliderViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/components-controllers').EventEmitter;
    arcgisPropertyChange: import('@arcgis/components-controllers').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.SliderProperties | undefined): __esri.SliderProperties | Promise<__esri.SliderProperties | undefined> | undefined;
} | undefined) => Slider;
/**
 * @internal
 */
export declare class ArcgisSlider extends LitElement {
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    draggableSegmentsEnabled: boolean;
    effectiveMax: number | nullish;
    effectiveMin: number | nullish;
    readonly effectiveSegmentElements: __esri.Collection<HTMLElement>;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    /** The component's default label. */
    label: string;
    readonly labelElements: __esri.Collection<HTMLElement>;
    labelInputsEnabled: boolean;
    readonly labels: __esri.LabelInfos;
    layout: "vertical" | "horizontal" | "horizontal-reversed" | "vertical-reversed";
    max: number | nullish;
    readonly maxLabelElement: HTMLElement | nullish;
    min: number | nullish;
    readonly minLabelElement: HTMLElement | nullish;
    position: __esri.UIPosition;
    precision: number;
    rangeLabelInputsEnabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    readonly segmentElements: __esri.Collection<HTMLElement>;
    snapOnClickEnabled: boolean;
    readonly state: "ready" | "disabled" | "editing" | "dragging";
    steps: number | nullish | number[];
    syncedSegmentsEnabled: boolean;
    readonly thumbElements: __esri.Collection<HTMLElement>;
    thumbsConstrained: boolean;
    tickConfigs: __esri.TickConfig[];
    readonly tickElements: __esri.Collection<__esri.Collection<__esri.TickElementGroup>>;
    readonly trackElement: HTMLElement | nullish;
    values: nullish | number[];
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    readonly arcgisMaxChange: TargetedEvent<this, __esri.SliderMaxChangeEvent>;
    readonly arcgisMaxClick: TargetedEvent<this, __esri.SliderMaxClickEvent>;
    readonly arcgisMinChange: TargetedEvent<this, __esri.SliderMinChangeEvent>;
    readonly arcgisMinClick: TargetedEvent<this, __esri.SliderMinClickEvent>;
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state";
    }>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
    readonly arcgisSegmentClick: TargetedEvent<this, __esri.SliderSegmentClickEvent>;
    readonly arcgisSegmentDrag: TargetedEvent<this, __esri.SliderSegmentDragEvent>;
    readonly arcgisThumbChange: TargetedEvent<this, __esri.SliderThumbChangeEvent>;
    readonly arcgisThumbClick: TargetedEvent<this, __esri.SliderThumbClickEvent>;
    readonly arcgisThumbDrag: TargetedEvent<this, __esri.SliderThumbDragEvent>;
    readonly arcgisTickClick: TargetedEvent<this, __esri.SliderTickClickEvent>;
    readonly arcgisTrackClick: TargetedEvent<this, __esri.SliderTrackClickEvent>;
}
export {};
