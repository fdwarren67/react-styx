/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { default as UtilityNetworkTrace } from '@arcgis/core/widgets/UtilityNetworkTrace.js';
import { ArcgisReferenceElement, WidgetElement } from '../../utils/component-utils';
import { Nil } from '@arcgis/components-utils';
import { PropertyValues } from 'lit';
import { JsxNode, ToElement, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';

export type UtilityNetworkTraceWidget = InstanceType<typeof UtilityNetworkTrace>;
/** UtilityNetworkTrace component provides a way to run traces in a Utility Network based on connectivity or traversability from set input flags. Input flags (starting points and barriers) can be set by clicking the view.

> The UtilityNetworkTrace Component does not support proxied feature services or feature services that utilize stored credentials.

Note: Sign in to access the data in this sample, U/P: `viewer01`/`I68VGU^nMurF`
 */
export declare class ArcgisUtilityNetworkTrace extends LitElement {
    defaultGraphicColor: UtilityNetworkTraceWidget["defaultGraphicColor"];
    disabled: boolean;
    enableResultArea: boolean;
    flags: UtilityNetworkTraceWidget["flags"];
    gdbVersion: string;
    inputSettings: UtilityNetworkTraceWidget["inputSettings"];
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    resultAreaProperties?: UtilityNetworkTraceWidget["resultAreaProperties"];
    selectOnCompleteDisabled: boolean;
    selectedTraces: UtilityNetworkTraceWidget["selectedTraces"];
    showGraphicsOnCompleteDisabled: boolean;
    showSelectionAttributesDisabled: boolean;
    checkCanTrace(): Promise<void>;
    confirmReset(): Promise<void>;
    readonly arcgisAddFlag: TargetedEvent<this, __esri.UtilityNetworkTraceAddFlagEvent>;
    readonly arcgisAddFlagComplete: TargetedEvent<this, __esri.UtilityNetworkTraceAddFlagCompleteEvent>;
    readonly arcgisAddFlagError: TargetedEvent<this, __esri.UtilityNetworkTraceAddFlagErrorEvent>;
    readonly arcgisAddResultArea: TargetedEvent<this, __esri.UtilityNetworkTraceAddResultAreaEvent>;
    readonly arcgisReady: TargetedEvent<this, undefined>;
    readonly arcgisRemoveResultArea: TargetedEvent<this, __esri.UtilityNetworkTraceRemoveResultAreaEvent>;
}
