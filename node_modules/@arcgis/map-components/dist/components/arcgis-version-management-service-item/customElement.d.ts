/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Nil } from '@arcgis/components-utils';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisVersionManagementVersionList } from '../arcgis-version-management-version-list/customElement.js';
import { ArcgisVersionManagement, InitialVersionInfo } from '../arcgis-version-management/customElement.js';

/** @private */
export declare class ArcgisVersionManagementServiceItem extends LitElement {
    serviceItemElementProps: {
        allowEditing: boolean;
        closable: boolean;
        currentUser: string;
        currentVersionIdentifier: __esri.VersionIdentifier;
        executionError: string | undefined;
        flowElement: HTMLCalciteFlowElement | undefined;
        hasAdvEditingUte: boolean;
        heading: string;
        mode: Nil | string;
        initialVersionInfos: InitialVersionInfo[];
        isInitialVersionInvalid: Map<string, boolean>;
        isVersionAdministrator: boolean;
        isVersioningApiAvailable: boolean;
        pageSize: number;
        serviceName: string;
        state: string;
        serviceUrl: string;
        strings: ArcgisVersionManagement["messages"];
        versionInfos: __esri.VersionInfo[];
    };
    readonly arcgisFlowItemBack: TargetedEvent<this, void>;
    readonly arcgisFlowItemClose: TargetedEvent<this, void>;
    readonly arcgisGetVersions: TargetedEvent<this, {
        serviceUrl: string;
    }>;
    readonly arcgisManageVersion: TargetedEvent<this, {
        actionType: string;
        serviceUrl: string;
        versionInfo: __esri.VersionInfo;
    }>;
    readonly arcgisNewVersion: TargetedEvent<this, {
        serviceUrl: string;
    }>;
    readonly arcgisCreateVersionList: TargetedEvent<this, import('@arcgis/lumina').ToElement<ArcgisVersionManagementVersionList>>;
}
